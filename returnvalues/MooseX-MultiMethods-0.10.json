[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method BUILD ($args) {\n    $self->_dd_init_args($args);\n}\n\nmethod _build_dd_context {\n    return DDContext->new(%{ $self->_dd_init_args });\n}\n\nmethod import (ClassName $class:) {\n    my $setup_class = caller;\n    $class->setup_for($setup_class);\n}\n\nmethod setup_for (ClassName $class: ClassName $setup_class, HashRef $args = {}) {\n    Devel::Declare->setup_for($setup_class, {\n        'multi' => {\n            const => sub {\n                my $self = $class->new({ class => $setup_class, %{ $args } });\n                $self->init(@_);\n                return $self->parse;\n            },\n        },\n    });\n\n    install_sub({\n        code => sub {},\n        into => $setup_class,\n        as   => 'multi',\n    });\n\n    MooseX::Method::Signatures->setup_for($setup_class)\n        unless $setup_class->can('method');\n}\n\nmethod parse {\n    $self->skip_declarator;\n    $self->skipspace;\n\n    my $thing = $self->strip_name;\n    confess \"expected 'method', got '${thing}'\"\n        unless $thing eq 'method';\n\n    $self->skipspace;\n\n    my $name = $self->strip_name;\n    confess \"anonymous multi methods not allowed\"\n        unless defined $name && length $name;\n\n    my $proto = $self->strip_proto || '';\n    my $proto_variant = MooseX::Method::Signatures::Meta::Method->wrap(\n        signature    => \"(${proto})\",\n        package_name => $self->get_curstash_name,\n        name         => $name,\n    );\n\n    $self->inject_if_block($self->scope_injector_call . $proto_variant->injectable_code, 'sub');\n\n    my $meta = Class::MOP::class_of($self->class);\n    my $meta_method = $meta->get_method($name);\n    unless ($meta_method) {\n        $meta_method = MetaMethod->new(\n            name         => $name,\n            package_name => $self->class,\n        );\n        $meta->add_method($name => $meta_method);\n    }\n\n    confess \"method '${name}' is already defined\"\n        unless $meta_method->isa(MetaMethod);\n\n    $self->shadow(sub {\n        my $variant = $proto_variant->reify(actual_body => $_[0]);\n        $meta_method->add_variant($variant->type_constraint => $variant);\n    });\n}\n\n1",
      "file" : "/var/tmp/arv_iCGdTN/MooseX-MultiMethods-0.10/lib/MooseX/MultiMethods.pm",
      "package" : "MooseX::MultiMethods"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method initialize_body {\n    my $name          = $self->name;\n    my $variant_table = $self->_variant_table;\n\n    return sub {\n        my ($args) = \\@_;\n\n        my $result = $variant_table->find_variant($args)\n            || Class::MOP::class_of($args->[0])->find_next_method_by_name($name);\n\n        confess \"no variant of method '${name}' found for \", dump($args)\n            unless $result;\n\n        goto $result->body;\n    };\n}\n\n1",
      "file" : "/var/tmp/arv_iCGdTN/MooseX-MultiMethods-0.10/lib/MooseX/MultiMethods/Meta/Method.pm",
      "package" : "MooseX::MultiMethods::Meta::Method"
   }
]
