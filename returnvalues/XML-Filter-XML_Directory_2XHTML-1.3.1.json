[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\npackage XML::Filter::XML_Directory_2XHTML;\nuse strict;\n\nuse Carp;\nuse Exporter;\nuse File::Basename;\n\nuse XML::Filter::XML_Directory_2::Base '1.4.4';\n\n$XML::Filter::XML_Directory_2XHTML::VERSION   = '1.3.1';\n@XML::Filter::XML_Directory_2XHTML::ISA       = qw (Exporter XML::Filter::XML_Directory_2::Base);\n@XML::Filter::XML_Directory_2XHTML::EXPORT    = qw();\n@XML::Filter::XML_Directory_2XHTML::EXPORT_OK = qw ();\n\nuse constant DTD_HTML_ROOT     => \"html\";\nuse constant DTD_HTML_PUBLICID => \"-//W3C//DTD XHTML 1.0 Strict//EN\";\nuse constant DTD_HTML_SYSTEMID => \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\";\n\n\nuse constant HANDLER_EVENTS  => qw [ linktext file directory ];\n\n\nuse constant CALLBACK_EVENTS => qw [ link linktext title file directory ];\n\n\n\nsub set_lang {\n  my $self = shift;\n  $self->{__PACKAGE__.'__lang'} = $_[0];\n}\n\n\nsub set_images {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    carp \"Images must be passed as a hash ref of hash references.\";\n    return 0;\n  }\n\n  foreach my $img (keys %$args) {\n    my $ref = ref($args->{$img});\n\n    unless ($ref =~ /^(HASH|CODE)$/) {\n      carp \"Images must be passed as a hash ref of hash references or code references.\";\n      next;\n    }\n\n    if ($ref eq \"CODE\") {\n      $self->{'__images'}{$img} = $args->{$img};\n      next;\n    }\n\n    foreach (\"src\",\"height\",\"width\") {\n      if (! $args->{$img}->{$_}) {\n\tcarp \"You must define an '$_' property for your image.\";\n\tnext;\n      }\n    }\n\n    $self->{'__images'}{$img} = $args->{$img};\n  }\n\n  return 1;\n}\n\n\nsub set_styles {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"ARRAY\") {\n    carp \"Styles must be passed as an array ref of hash references.\";\n    return 0;\n  }\n\n  foreach my $css (@{$args}) {\n    if (ref($css) ne \"HASH\") {\n    carp \"Styles must be passed as an array ref of hash references.\";\n      next;\n    }\n    \n    if (! $css->{'href'}) {\n      carp \"You must define an 'href' property for your stylesheet.\";\n      next;\n    }\n\n    push @{$self->{'__styles'}} , $css;\n  }\n\n  return 1;\n}\n\n\nsub set_style {\n  my $self = shift;\n  if (ref($_[0]) eq \"SCALAR\") {\n    $self->{__PACKAGE__.'__css'} = $_[0];\n  }\n}\n\n\nsub set_scripts {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"ARRAY\") {\n    carp \"Scripts must be passed as an array ref of hash references.\";\n    return 0;\n  }\n\n  foreach my $js (@{$args}) {\n    if (ref($js) ne \"HASH\") {\n    carp \"Scripts must be passed as an array ref of hash references.\";\n      next;\n    }\n\n    if (! $js->{'src'}) {\n      carp \"You must define an 'src' property for your stylesheet.\";\n      next;\n    }\n\n    push @{$self->{'__scripts'}} , $js;\n  }\n\n  return 1;\n}\n\n\nsub _stylesheets {\n  my $self = shift;\n\n  $self->SUPER::start_element({Name=>\"style\",\n\t\t\t       Attributes=>{\"{}type\"=>{\n\t\t\t\t\t\t       Name=>\"type\",\n\t\t\t\t\t\t       Value=>\"text/css\",\n\t\t\t\t\t\t       LocalName=>\"type\",\n\t\t\t\t\t\t       NameSpaceURI=>\"\"},\n\t\t\t\t\t   },\n\t\t\t      });\n\n  if ($self->{__PACKAGE__.'__css'}) {\n    $self->comment({Data=>${$self->{__PACKAGE__.'__css'}}});\n  }\n\n  else {\n    $self->comment({Data=>qq(\n.file { \n         border:1px dotted #ccc;\n         margin-left:10px;\n         margin-bottom:5px;\n         margin-top:5px;\n         padding-right:50px;\n       }\n .directory {\n        border:1px dotted #666;\n        margin-left:10px;\n        margin-bottom:10px;\n        }\n .thumbnail { display:inline; }\n\n)});\n  }\n\n  $self->SUPER::end_element({Name=>\"style\"});\n\n\n  if (ref($self->{'__styles'}) ne \"ARRAY\") {\n    return 1;\n  }\n  \n  foreach my $style (@{$self->{'__styles'}}) {\n\n    $self->SUPER::start_element({Name=>\"link\",Attributes=>{\n\t\t\t\t\t\t\t   \"{}href\"  => {Name=>\"href\",\n\t\t\t\t\t\t\t\t\t Value=>$style->{'href'},\n\t\t\t\t\t\t\t\t\t Prefix=>\"\",\n\t\t\t\t\t\t\t\t\t LocalName=>\"href\",\n\t\t\t\t\t\t\t\t\t NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t   \"{}type\"  => {Name=>\"type\",\n\t\t\t\t\t\t\t\t\t Value=>\"text/css\",\n\t\t\t\t\t\t\t\t\t LocalName=>\"type\",\n\t\t\t\t\t\t\t\t\t NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t   \"{}rel\"   => {Name=>\"rel\",\n\t\t\t\t\t\t\t\t\t Value=>($style->{'rel'} || \"stylesheet\"),\n\t\t\t\t\t\t\t\t\t Prefix=>\"\",\n\t\t\t\t\t\t\t\t\t LocalName=>\"rel\",\n\t\t\t\t\t\t\t\t\t NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t   \"{}media\" => {Name=>\"media\",\n\t\t\t\t\t\t\t\t\t Value=>($style->{'media'} || \"all\"),\n\t\t\t\t\t\t\t\t\t Prefix=>\"\",\n\t\t\t\t\t\t\t\t\t LocalName=>\"media\",\n\t\t\t\t\t\t\t\t\t NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t   \"{}title\" => {Name=>\"title\",\n\t\t\t\t\t\t\t\t\t Value=>($style->{'title'} || \"\"),\n\t\t\t\t\t\t\t\t\t Prefix=>\"\",\n\t\t\t\t\t\t\t\t\t LocalName=>\"title\",\n\t\t\t\t\t\t\t\t\t NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t  }});\n    $self->SUPER::end_element({Name=>\"link\"});\n  }\n\n  return 1;\n}\n\nsub _scripts {\n  my $self = shift;\n\n  foreach my $style (@{$self->{'__scripts'}}) {\n\n    $self->SUPER::start_element({Name=>\"script\",Attributes=>{\n\t\t\t\t\t\t\t     \"{}href\"  => {Name=>\"src\",\n\t\t\t\t\t\t\t\t\t   Value=>$style->{'src'},\n\t\t\t\t\t\t\t\t\t   Prefix=>\"\",\n\t\t\t\t\t\t\t\t\t   LocalName=>\"src\",\n\t\t\t\t\t\t\t\t\t   NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t     \"{}type\"  => {Name=>\"type\",\n\t\t\t\t\t\t\t\t\t   Value=>\"text/javascript\",\n\t\t\t\t\t\t\t\t\t   LocalName=>\"type\",\n\t\t\t\t\t\t\t\t\t   NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t    }});\n    $self->SUPER::comment({Data=>\"\"});\n    $self->SUPER::end_element({Name=>\"script\"});\n  }\n\n  return 1;\n}\n\nsub _image {\n  my $self = shift;\n  my $type = shift;\n  my $data = shift;\n\n  if (! $type) {\n    return 0;\n  }\n\n  my $src = $self->{'__images'}{$type};\n\n  if (! $src) {\n    return 0;\n  }\n\n  if (ref($src) eq \"CODE\") {\n    $src = &$src($self->build_uri($data).\"/\".&basename($self->current_location()));\n\n    if (ref($src) ne \"HASH\") { return 0; }\n\n    foreach (\"src\",\"height\",\"width\") {\n      if (! $src->{$_}) { return 0; }\n    }\n\n  }\n\n  $self->SUPER::start_element({Name=>\"div\",__PACKAGE__->attributes(class=>\"thumbnail\")});\n  $self->SUPER::start_element({Name=>\"img\",Attributes=>{\n\t\t\t\t\t\t\t\"{}src\"  => {Name=>\"src\",\n\t\t\t\t\t\t\t\t     Value=>$src->{'src'},\n\t\t\t\t\t\t\t\t     Prefix=>\"\",\n\t\t\t\t\t\t\t\t     LocalName=>\"src\",\n\t\t\t\t\t\t\t\t     NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t\"{}alt\"  => {Name=>\"alt\",\n\t\t\t\t\t\t\t\t     Value=>($src->{'alt'} || $type),\n\t\t\t\t\t\t\t\t     Prefix=>\"\",\n\t\t\t\t\t\t\t\t     LocalName=>\"alt\",\n\t\t\t\t\t\t\t\t     NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t\"{}height\" => {Name=>\"height\",\n\t\t\t\t\t\t\t\t       Value=>$src->{'height'},\n\t\t\t\t\t\t\t\t       Prefix=>\"\",\n\t\t\t\t\t\t\t\t       LocalName=>\"height\",\n\t\t\t\t\t\t\t\t       NameSpaceURI=>\"\"},\n\t\t\t\t\t\t\t\"{}width\"  => {Name=>\"width\",\n\t\t\t\t\t\t\t\t       Value=>$src->{'width'},\n\t\t\t\t\t\t\t\t       Prefix=>\"\",\n\t\t\t\t\t\t\t\t       LocalName=>\"width\",\n\t\t\t\t\t\t\t\t       NameSpaceURI=>\"\"},\n\t\t\t\t\t\t       }});\n  $self->SUPER::end_element({Name=>\"img\"});\n  $self->SUPER::end_element({Name=>\"div\"});\n  return 1;\n}\n\nsub _link {\n  my $self = shift;\n  my $data = shift;\n\n  $self->SUPER::start_element({\n\t\t\t       Name=>\"a\",\n\t\t\t       __PACKAGE__->attributes(href=>$self->make_link($data)),\n\t\t\t      });\n\n\n  if (my $h = $self->retrieve_handler(\"linktext\")) {\n    $self->SUPER::characters({Data=>$h->parse_uri($self->build_uri($data))});\n  }\n  \n  elsif (my $c = $self->retrieve_callback(\"linktext\")) {\n    $self->SUPER::characters({Data=>&$c(\n\t\t\t\t\t$self->build_uri($data),\n\t\t\t\t\t$data->{Attributes}->{'{}name'}->{Value}\n\t\t\t\t       )});\n  }\n  \n  else {\n    $self->SUPER::characters({Data=>&basename($self->make_link($data))});\n  }\n\n\n  $self->SUPER::end_element({Name=>\"a\"});\n  return 1;\n}\n\nsub handler_events {\n  return HANDLER_EVENTS;\n}\n\nsub callback_events {\n  return CALLBACK_EVENTS;\n}\n\n\nsub start_document {\n  my $self = shift;\n  $self->SUPER::start_document();\n\n  $self->SUPER::xml_decl({Version  => \"1.0\",\n\t\t\t  Encoding => $self->encoding()});\n\n  $self->SUPER::start_dtd({Name     => DTD_HTML_ROOT,\n\t\t\t   PublicId => DTD_HTML_PUBLICID,\n\t\t\t   SystemId => DTD_HTML_SYSTEMID});\n  $self->SUPER::end_dtd();\n\n  $self->SUPER::start_prefix_mapping({Prefix => \"\",\n\t\t\t\t     NamespaceURI => \"http://www.w3.org/1999/xhtml\"});\n\n  my %attrs = ();\n\n  if (my $lang = $self->{__PACKAGE__.'__lang'}) {\n    %attrs = __PACKAGE__->attributes(lang=>$lang,\"xml:lang\"=>$lang);\n  }\n\n  $self->SUPER::start_element({Name=>DTD_HTML_ROOT,%attrs});\n  $self->SUPER::end_prefix_mapping({Prefix=>\"\"});\n\n  return 1;\n}\n\nsub end_document {\n  my $self = shift;\n  $self->SUPER::end_element({Name=>DTD_HTML_ROOT});\n  $self->SUPER::end_document();\n  return 1;\n}\n\nsub start_cdata {}\n\nsub end_cdata {}\n\nsub start_dtd { }\n\nsub end_dtd { }\n\nsub element_decl {}\n\nsub internal_entity_decl {}\n\nsub start_element {\n  my $self = shift;\n  my $data = shift;\n\n  if (! $self->on_enter_start_element($data)) {\n    return 0;\n  }\n\n  if ($data->{Name} =~ /^(file|directory)$/) {\n    my $name = lc $1;\n\n    $self->{'__'.$name.'name'} = $data->{Attributes}->{'{}name'}->{Value};\n\n    $self->SUPER::start_element({Name=>\"div\",\n\t\t\t\t __PACKAGE__->attributes(class=>$name,id=>$self->generate_id())});\n\n    my $type = ($name eq \"directory\") ? \"directory\" :\n      ($self->mtype($self->{'__filename'}) || \"file\");\n\n    $self->_image($type);\n    $self->_link($data);\n\n    if (my $h = $self->retrieve_handler($name)) {\n      $h->parse_uri($self->build_uri($data));\n    }\n\n    elsif (my $c = $self->retrieve_callback($name)) {\n      $self->SUPER::characters({Data=>&$c($self->build_uri($data))});\n    }\n\n    else {}\n  }\n\n  return 1;\n}\n\nsub end_element {\n  my $self = shift;\n  my $data = shift;\n\n  $self->on_enter_end_element($data);\n\n  if ($data->{Name} eq \"head\") {\n\n    $self->SUPER::start_element({Name=>\"head\"});\n\n\n    my $title = $self->current_location() || &basename($self->build_uri($data));\n\n    if (my $c = $self->retrieve_callback(\"title\")) {\n      $title = &$c();\n    }\n\n    $self->SUPER::start_element({Name=>\"title\"});\n    $self->SUPER::characters({Data=>$title});\n    $self->SUPER::end_element({Name=>\"title\"});\n\n\n    $self->_stylesheets();\n    $self->_scripts();\n\n    $self->SUPER::end_element({Name=>\"head\"});\n    $self->SUPER::start_element({Name=>\"body\"});\n\n    $self->{'__body'} ++;\n  }\n\n  if (($self->start_level()) && \n      ($self->current_level() > $self->start_level()) && \n      (! $self->skip_level())) {\n\n    if ($data->{Name} =~ /^(directory|file)$/) {\n      $self->SUPER::end_element({Name=>\"div\"});\n    }\n  }\n\n  if ($data->{Name} eq \"dirtree\") {\n    $self->SUPER::end_element({Name=>\"body\"});\n  }\n\n  $self->on_exit_end_element($data);\n\n  return 1;\n}\n\nsub characters {\n  my $self = shift;\n  my $data = shift;\n  $self->on_characters($data);\n  return 1;\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv__9ynzl/XML-Filter-XML_Directory_2XHTML-1.3.1/lib/XML/Filter/XML_Directory_2XHTML.pm",
      "package" : "XML::Filter::XML_Directory_2XHTML"
   }
]
