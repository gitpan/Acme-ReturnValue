[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub update_widgets {\n   my ($self) = @_;\n\n   DC::weaken $self;\n\n   my $button_cb = sub {\n      my (undef, $ev, $x, $y) = @_;\n\n      my $targ = $::CONN->{player}{tag};\n\n      if ($self->{container} == $::CONN->{player}{tag}) {\n         $targ = $::CONN->{open_container};\n      }\n\n      if (($ev->{mod} & DC::KMOD_SHIFT) && $ev->{button} == 1) {\n         $::CONN->send (\"move $targ $self->{tag} 0\")\n            if $targ || !($self->{flags} & F_LOCKED);\n      } elsif (($ev->{mod} & DC::KMOD_SHIFT) && $ev->{button} == 2) {\n         $self->{flags} & F_LOCKED\n            ? $::CONN->send (\"lock \" . pack \"CN\", 0, $self->{tag})\n            : $::CONN->send (\"lock \" . pack \"CN\", 1, $self->{tag})\n      } elsif ($ev->{button} == 1) {\n         $::CONN->send (\"examine $self->{tag}\");\n      } elsif ($ev->{button} == 2) {\n         $::CONN->send (\"apply $self->{tag}\");\n      } elsif ($ev->{button} == 3) {\n         my $move_prefix = $::CONN->{open_container} ? 'put' : 'drop';\n         if ($self->{container} == $::CONN->{open_container}) {\n            $move_prefix = \"take\";\n         }\n\n         my $shortname = DC::shorten $self->{name}, 14;\n\n         my @menu_items = (\n            [\"examine\", sub { $::CONN->send (\"examine $self->{tag}\") }],\n            [\"mark\",    sub { $::CONN->send (\"mark \". pack \"N\", $self->{tag}) }],\n            [\"ignite/thaw\",  \n               sub {\n                  $::CONN->send (\"mark \". pack \"N\", $self->{tag});\n                  $::CONN->send (\"command apply flint and steel\");\n               }\n            ],\n            [\"inscribe\",  \n               sub {\n                  &::open_string_query (\"Text to inscribe\", sub {\n                     my ($entry, $txt) = @_;\n                     $::CONN->send (\"mark \". pack \"N\", $self->{tag});\n                     $::CONN->send_utf8 (\"command use_skill inscription $txt\");\n                  });\n               }\n            ],\n            [\"rename\",  \n               sub {\n                  &::open_string_query (\"Rename item to:\", sub {\n                     my ($entry, $txt) = @_;\n                     $::CONN->send (\"mark \". pack \"N\", $self->{tag});\n                     $::CONN->send_utf8 (\"command rename to <$txt>\");\n                  }, $self->{name},\n                  \"If you input no name or erase the current custom name, the custom name will be unset\");\n               }\n            ],\n            [\"apply\",   sub { $::CONN->send (\"apply $self->{tag}\") }],\n            (\n               $self->{flags} & F_LOCKED\n               ? (\n                  [\"unlock\", sub { $::CONN->send (\"lock \" . pack \"CN\", 0, $self->{tag}) }],\n                 )\n               : (\n                  [\"lock\",   sub { $::CONN->send (\"lock \" . pack \"CN\", 1, $self->{tag}) }],\n                  [\"$move_prefix all\",   sub { $::CONN->send (\"move $targ $self->{tag} 0\") }],\n                  [\"$move_prefix &lt;n&gt;\", \n                     sub {\n                        do_n_dialog (sub { $::CONN->send (\"move $targ $self->{tag} $_[0]\") })\n                     }\n                  ]\n               )\n            ),\n            [\"bind <i>apply $shortname</i> to a key\"   => sub { DC::Macro::quick_macro [\"apply $self->{name}\"] }],\n         );\n\n         DC::UI::Menu->new (items => \\@menu_items)->popup ($ev);\n      }\n\n      1\n   };\n\n   my $tooltip_std =\n      \"<small>\"\n      . \"Left click - examine item\\n\"\n      . \"Shift-Left click - \" . ($self->{container} ? \"move or drop\" : \"take\") . \" item\\n\"\n      . \"Middle click - apply\\n\"\n      . \"Shift-Middle click - lock/unlock\\n\"\n      . \"Right click - further options\"\n      . \"</small>\\n\";\n\n   my $bg = $self->{flags} & F_CURSED ? $bg_cursed\n          : $self->{flags} & F_MAGIC  ? $bg_magic\n          : undef;\n\n   my $desc = DC::Item::desc_string $self;\n   my $face_tooltip = \"<b>$desc</b>\\n\\n$tooltip_std\";\n\n   if (my $face = $self->{face_widget}) {\n      if ($face->{bg} != $bg) {\n         $face->{bg} = $bg;\n         $face->update;\n      }\n\n      $face->set_bg        ($bg)                if $face->{bg}        != $bg;\n      $face->set_face      ($self->{face})      if $face->{face}      != $self->{face};\n      $face->set_anim      ($self->{anim})      if $face->{anim}      != $self->{anim};\n      $face->set_animspeed ($self->{animspeed}) if $face->{animspeed} != $self->{animspeed};\n\n      $face->set_tooltip ($face_tooltip);\n   } else {\n      $self->{face_widget} = new DC::UI::Face \n         can_events => 1,\n         can_hover  => 1,\n         bg         => $bg,\n         face       => $self->{face},\n         anim       => $self->{anim},\n         animspeed  => $self->{animspeed}, \n         tooltip    => $face_tooltip,\n         on_button_down => $button_cb,\n      ;\n   }\n   \n   $self->{desc_widget} ||= new DC::UI::Label\n      can_events => 1,\n      can_hover  => 1,\n      ellipsise  => 2,\n      align      => 0,\n\n      on_button_down  => $button_cb,\n      on_tooltip_show => sub {\n         my ($widget) = @_;\n\n         $::CONN && $::CONN->ex ($self->{tag}, sub {\n            my ($long_desc) = @_;\n\n            $long_desc = DC::Protocol::sanitise_xml ($long_desc);\n\n            $self->{long_desc} = $long_desc;\n            $widget->set_tooltip (\"<b>$long_desc</b>\\n\\n$tooltip_std\");\n         });\n      },\n   ;\n\n   my $long_desc = $self->{long_desc} || $desc;\n\n   $self->{desc_widget}->set_bg ($bg) if $self->{desc_widget}{bg} != $bg;\n   $self->{desc_widget}->set_text ($desc);\n   $self->{desc_widget}->set_tooltip (\"<b>$long_desc</b>\\n\\n$tooltip_std\");\n\n   $self->{weight_widget} ||= new DC::UI::Label\n      can_events => 1,\n      can_hover  => 1,\n      ellipsise  => 0,\n      on_button_down => $button_cb,\n   ;\n   $self->{weight_widget}{bg} = $bg;\n   $self->{weight_widget}->set_text (DC::Item::weight_string $self);\n   $self->{weight_widget}->set_tooltip (\n      \"<b>Weight</b>.\\n\"\n    . ($self->{weight} >= 0 ? \"One item weighs $self->{weight}g. \" : \"You have no idea how much this weighs. \")\n    . ($self->{nrof} ? \"You have $self->{nrof} of it. \" : \"Item cannot stack with others of it's kind. \")\n    . \"\\n\\n$tooltip_std\"\n   );\n}",
      "file" : "/var/tmp/arv_fD_6MT/Deliantra-Client-2.11/DC/Item.pm",
      "package" : "DC::Item"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub set_items {\n   my ($self, $items) = @_;\n\n   $self->{items} = [$items ? values %$items : ()];\n   $self->update_items;\n}",
      "file" : "/var/tmp/arv_fD_6MT/Deliantra-Client-2.11/DC/UI/Inventory.pm",
      "package" : "DC::UI::Inventory"
   }
]
