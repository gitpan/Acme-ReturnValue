[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parameters {\n\tmy ($invocant, $spec);\n\tif (ref $_[0] eq 'ARRAY') {\n\t\t$spec = shift;\n\t} elsif (ref $_[0]) {\n\t\tcroak \"Getopt::Mixed doesn't handle a \",ref $_[0],\" as a parameter.\";\n\t} else {\n\t\t$invocant = shift;\n\t\t$spec = shift;\n\t}\n\n\tcroak \"Getopt::Mixed specification contains more than one semicolon.\"\n\t\t\tif grep /;/, @$spec > 1;\n\n\tmy $self;\n\tif (defined $invocant) {\n\t\tif ($invocant eq 'self') {\n\t\t\t$self = shift;\n\t\t} else {\n\t\t\tif (UNIVERSAL::isa($_[0], $invocant)) {\n\t\t\t\t$self = shift;\n\t\t\t} else {\n\t\t\t\t$self = $invocant;\n\t\t\t}\n\t\t}\n\t}\n\n\tmy @required;\n\tfor (0 .. $#$spec) {\n\t\tlast if $$spec[$_] eq '*';\n\t\tif ($$spec[$_] eq ';') {\n\t\t\tsplice(@$spec, $_, 1);\n\t\t\t\n\t\t\tlast;\n\t\t} elsif ($$spec[$_] =~ /;/) {\n\t\t\tmy @els = split /;/, $$spec[$_];\n\t\t\tshift @els if $els[0] eq '';\n\t\t\t\n\t\t\tcroak \"Getopt::Mixed specification contains more than one semicolon.\"\n\t\t\t\t\tif @els > 2;\n\t\t\t\t\t\n\t\t\tpush @required, $els[0] unless $$spec[$_] =~ /^;/;\n\t\t\tsplice(@$spec, $_, 1, @els);\n\t\t\t\n\t\t\tlast;\n\t\t}\n\n\t\tpush @required, $$spec[$_];\n\t}\n\t\t\t\n\n\tmy %result;\n\n\twhile (@_ > 0) {\n\t\tlast if defined $_[0] and $_[0] =~ /^-/; \n\t\tif ($$spec[0] eq '*') {\n\t\t\tpush @{$result{'*'}}, shift;\n\t\t} else {\n\t\t\t$result{shift @$spec} = shift;\n\t\t}\n\t}\n\n\tmy %named = @_;\n\twhile (my ($k, $v) = each %named) {\n\t\tconfess \"Illegal switch back to positional arguments.\"\n\t\t\t\tif $k !~ /^-/;\n\n\t\tmy $name = substr $k, 1;\n\n\t\tconfess \"Illegal argument: $name specified twice.\"\n\t\t\t\tif exists $result{$name};\n\t\tconfess \"Illegal argument: $name unknown.\"\n\t\t\t\tunless (@$spec > 0 and @$spec[-1] eq '*') or grep { $name eq $_ } @$spec;\n\n\t\t$result{$name} = $v;\n\t}\n\n\tmy @missing = grep { !defined $result{$_} } @required;\n\tif (@missing) {\n\t\tconfess \"Missing these required arguments: \",join(', ',@missing);\n\t}\n\n\treturn defined $self ? ($self, %result) : %result;\n}",
      "file" : "/var/tmp/arv_mAwO8e/Getargs-Mixed-1.03/Mixed.pm",
      "package" : "Getargs::Mixed"
   }
]
