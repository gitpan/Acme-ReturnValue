[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "DESTROY {\n    my $self = shift;\n\n    $self->_finish_current_row;\n\n    $self->_execute_query();\n}\n\n\nsub insert_row {\n    my ( $self, @new_rows ) = @_;\n\n    my $query_executed = 0;\n\n    foreach my $new_row ( @new_rows ) {\n\t$query_executed = 1 if $self->_finish_current_row();\n\n\t$self->{_do_append_row_to_query} = 1;\n\t$self->{_current_row} = $new_row;\n   }\n\n    return $query_executed;\n}\n\n\nsub _finish_current_row {\n    my $self = shift;\n\n    my $query_executed;\n\n    if ( $self->{_do_append_row_to_query} ) {\n\n\tif ( $self->{_total_rows} >= $MAX_ROWS_TO_QUERY ) {\n\t    $query_executed = $self->_execute_query();\n\t}\n\n\t$self->_append_row_to_query_rows;\n\n\t$self->{_do_append_row_to_query} = 0;\n    }\n\n    return $query_executed;\n}\n\nsub _execute_query {\n    my $self = shift;\n\n    return if ! $self->{_query_exists};\n\n    my $values = join ',', @{$self->{_query_rows}};\n\n    my $query = \"$self->{_statement} $self->{_table} $self->{_name_fields} VALUES $values\";\n\n    if ( $self->{_statement} =~ /^INSERT/i && $self->{_on_duplicate_update} ) {\n\n\tmy $update_statement = join ', ',\n\t    map { \"$_ = \" . $self->_prepare_value( $self->{_on_duplicate_update}->{$_} ) }\n\t\tkeys %{ $self->{_on_duplicate_update} };\n\n\t$query .= ' ON DUPLICATE KEY UPDATE ' . $update_statement;\n    }\n\n    my $result = $self->{_dbh}->do( $query ) or return;\n\n    $self->{_query_exists} = 0;\n    $self->{_total_rows} = 0;\n    $self->{_query_rows} = [];\n\n    return $result;\n}\n\nsub _append_row_to_query_rows {\n    my ( $self ) = @_;\n\n    unless ( $self->get_fields() ) {\n\tdie 'Undefined field names!' unless ref $self->{_current_row} eq 'HASH';\n\n\t$self->set_fields( keys %{$self->{_current_row}} );\n    }\n\n    my @data_row;\n\n    if ( ref $self->{_current_row} eq 'HASH' ) {\n\tfor my $field ( $self->get_fields() ) {\n\t    push @data_row, $self->_prepare_value( $self->{_current_row}->{ $field } );\n\t}\n    }\n    else {\n\tpush @data_row, map { $self->_prepare_value( $_ ) } @{ $self->{_current_row} };\n    }\n\n    push @{$self->{_query_rows}}, \"\\n\\t( \".join(', ', @data_row).\" )\";\n\n    $self->{_query_exists} = 1;\n    $self->{_total_rows}++;\n}\n\nsub _prepare_value {\n    my ( $self, $value ) = @_;\n\n    if ( ref $value eq 'SCALAR' ) {\n\treturn ${ $value } || q{''};\n    }\n    else {\n\treturn $self->{_dbh}->quote( $value );\n    }\n}\n\n\n\n1",
      "file" : "/var/tmp/arv_mcaJ8F/MySQL-Insert-0.06/lib/MySQL/Insert.pm",
      "package" : "MySQL::Insert"
   }
]
