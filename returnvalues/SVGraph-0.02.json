[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub prepare\n{ \n\tmy $self=shift;\n\t\n\t$self->{SVG}=SVG->new(width=>$self->{ENV}{x},height=>$self->{ENV}{y});\n\t$self->{SVG}->script()->CDATA(\"setTimeout('reload()', \".($self->{ENV}{reload}*1000).\");\") if $self->{ENV}{reload};\n\t\n\t$self->prepare_block();\n\n\t$self->prepare_title();\n\n\t$self->prepare_columns();\n\t\n\t$self->prepare_axis_calculate();\n\t$self->prepare_axis_x_markArea(front=>0);\n\t$self->prepare_axis_x(); \n\t$self->prepare_axis_x_mark(front=>0);\n\t\n\t$self->prepare_axis_y_markArea(front=>0);\n\t$self->prepare_axis_y();\n\t$self->prepare_axis_y_mark(front=>0);\n\t\n\t$self->prepare_legend();\n\t\n\t\t\n\t\t\n\t\t\n\t\n\tforeach my $color(keys %SVGraph::colors::table)\n\t{\t\t\n\t\tmy $g = $self->{SVG}->gradient\n\t\t(\n\t\t\t'-type' => \"linear\",\n\t\t\t'id'    => \"gr_\".$color.\"_0\",\n\t\t\t'x1'=>\"0%\",'y1'=>\"0%\",'x2'=>\"0%\",'y2'=>\"100%\",\n\t\t);\n\t\t$g->stop(offset=>\"0%\",style=>\"stop-color:rgb(\".$SVGraph::colors::table{$color}{'B0'}.\");stop-opacity:1\");\n\t\t$g->stop(offset=>\"100%\",style=>\"stop-color:rgb(\".$SVGraph::colors::table{$color}{'L1'}.\");stop-opacity:1\");\n\t}\n\t\n\t\n\t\n\tmy @data_stacked;\n\tforeach my $column(@{$self->{columnsA}})\n\t{\n\t\tmy $color=$self->{columns}->{$column}{ENV}{color};\n\t\tmy %colors=%{$SVGraph::colors::table{$color}};\n\t\t\n\t\t\n\t\t\n\t\tmy $count;\n\t\tmy $points;\n\t\tmy ($point_x,$point_y);\n\t\tmy (@points_x,@points_y,@points_data);\n\t\t\n\t\t\n\t\tforeach my $row(@{$self->{row}{label}})\n\t\t{\n\t\t\tmy $data=$self->{columns}{$column}->{data}{$row};\n\t\t\t\t\t\t\n\t\t\t\n\t\t\tmy $data_o=$data; \n\t\t\tmy $data_w=$data; \n\t\t\t$count++;\n\t\t\t\n\t\t\t$data=$data/($self->GetRowSum($row)/100) if $self->{ENV}{type}=~/percentage/;\n\t\t\t\n\t\t\t$data_stacked[$count]+=$data;\n\t\t\tif ($self->{ENV}{type}=~/stacked/)\n\t\t\t{\n\t\t\t\tif ($self->{ENV}{type}=~/percentage/)\n\t\t\t\t{\n\t\t\t\t\t$data_w=((int($data*100))/100).\"%\";\n\t\t\t\t\t$data=100-$data_stacked[$count]+$data;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$data=$self->GetRowSum($row)-$data_stacked[$count]+$data;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tmy $height=(($data-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*($self->{block_height}/100);\n\t\t\t$height=int($height*100)/100;\n\t\t\t$height=0 if $height < 0;\n\t\t\t$height=$self->{block_height} if $height > $self->{block_height};\n\t\t\tmy $width=($count-1)*($self->{block_width}/($self->{grid_x_main_lines}-1));\n\t\t\t$width=int($width*100)/100;   \n\t\t\t\n\t\t\t$points.=($self->{block_left}+$width).\",\".($self->{block_down}-$height).\" \";\n\t\t\tpush @points_x,($self->{block_left}+$width);\n\t\t\tpush @points_y,($self->{block_down}-$height);\n\t\t\tpush @points_data, $data_w;\n\t\t}\n\t\t\n\t\tif ($self->{ENV}{show_lines_smooth_range})\n\t\t{\n\t\t\tfor my $sin_koef(3,4,6,10)\n\t\t\t{\n\t\t\t\tmy $points_sin;  \n\t\t\t\t$points_sin.=\"M$points_x[0],$points_y[0] \";\n\t\t\t\tfor (1..@points_x-2)\n\t\t\t\t{\n\t\t\t\t\t$points_sin.=\"S\".($points_x[$_]+($points_x[$_-1]-$points_x[$_+1])/$sin_koef).\",\".($points_y[$_]+($points_y[$_-1]-$points_y[$_+1])/$sin_koef).\" $points_x[$_],$points_y[$_] \";   \n\t\t\t\t}\n\t\t\t\t$points_sin.=\"S$points_x[-1],$points_y[-1] $points_x[-1],$points_y[-1]\";\n\t\t\t\t$self->{SVG}->path(\n\t\t\t\t\td=>$points_sin,\n\t\t\t\t\t'stroke-width'\t=>\"0.5pt\" ,\n\t\t\t\t\t'stroke'\t\t=>\"rgb(\".$colors{G0}.\")\",\n\t\t\t\t\tstyle\t=>\n\t\t\t\t\t{\n\t\t\t\t\t\t'fill'\t\t\t=>\"white\",\n\t\t\t\t\t\t'fill-opacity'\t=>\"0\",\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (\n\t\t\t$self->{ENV}{show_lines_smooth} ||\n\t\t\t$self->{ENV}{show_areas} ||\n\t\t\t$self->{columns}{$column}->{ENV}{show_area} ||\n\t\t\t$self->{columns}{$column}->{ENV}{show_line_smooth}\n\t\t\t)\n\t\t{\n\t\t\t\n\t\t\tmy $min=$self->{grid_y_scale_minimum};$min=0 if $min<0;\n\t\t\tmy $height=\n\t\t\t(\n\t\t\t\t($min-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100)\n\t\t\t)*($self->{block_height}/100);\n\t\t\t\n\t\t\tmy $opacity=\"0\";\n\t\t\tmy $points_sin;\n\t\t\tmy $sin_koef=6;\n\t\t\t\n\t\t\tmy $first=-1;\n\t\t\tmy $last;\n\t\t\tfor (0..@points_x-2)\n\t\t\t{\n\t\t\t\tnext unless defined $points_data[$_];\n\t\t\t\t\n\t\t\t\t$last=$_;\n\t\t\t\tif ($first == -1)\n\t\t\t\t{\n\t\t\t\t\t$points_sin.=\"M$points_x[$_],$points_y[$_] \";\n\t\t\t\t\t$first=$_;\n\t\t\t\t\tnext;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tmy $x=int($points_x[$_]+($points_x[$_-1]-$points_x[$_+1])/$sin_koef);\n\t\t\t\tmy $y=int($points_y[$_]+($points_y[$_-1]-$points_y[$_+1])/$sin_koef);\n\t\t\t\t\n\t\t\t\tif ($y>$self->{block_down}){$y=$self->{block_down}}\n\t\t\t\t\n\t\t\t\tif (not defined $points_data[$_+1])\n\t\t\t\t{\n\t\t\t\t\t$x=$points_x[$_];\n\t\t\t\t\t$y=$points_y[$_];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$points_sin.=\"S\".\n\t\t\t\t\t($x).\",\".\n\t\t\t\t\t($y).\" $points_x[$_],$points_y[$_] \";\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$last=@points_x-1 if defined $points_data[@points_x-1];\n\t\t\t\n\t\t\t$points_sin.=\"S$points_x[$last],$points_y[$last] $points_x[$last],$points_y[$last]\";\n\t\t\t\n\t\t\tif\n\t\t\t(\n\t\t\t\t(\n\t\t\t\t\t($self->{ENV}{show_areas})||\n\t\t\t\t\t($self->{columns}{$column}->{ENV}{show_area})\n\t\t\t\t)&&\n\t\t\t\t(!$self->{columns}{$column}->{ENV}{show_line})\n\t\t\t)\n\t\t\t{\n\t\t\t\tmy $points_sin=$points_sin;\n\t\t\t\t$points_sin.=\n\t\t\t\t\" S\".$points_x[$last].\",\".($self->{block_down}-$height).\" \".$points_x[$last].\",\".($self->{block_down}-$height).\n\t\t\t\t\" S\".$points_x[$first].\",\".($self->{block_down}-$height).\" \".$points_x[$first].\",\".($self->{block_down}-$height);\n\t\t\t\t$opacity=\"1\";\n\t\t\t\t$opacity=$self->{ENV}{show_areas_opacity} if $self->{ENV}{show_areas_opacity};\n\t\t\t\t$opacity=$self->{columns}{$column}->{ENV}{show_area_opacity} if $self->{columns}{$column}->{ENV}{show_area_opacity};\n\t\t\t\t$self->{SVG}->path(\n\t\t\t\t\td=>$points_sin,\n\t\t\t\t\t'stroke-width'\t=>\"0pt\" ,\n\t\t\t\t\t'fill'\t\t\t=>\"url(#gr_\".$color.\"_0)\",\n\t\t\t\t\t'fill-opacity'\t=>$opacity,\n\t\t\t\t);\n\t\t\t}\n\t\t\t\n\t\t\tif\n\t\t\t(\n\t\t\t\t($self->{ENV}{show_lines_smooth})||\n\t\t\t\t($self->{columns}{$column}->{ENV}{show_line_smooth})\n\t\t\t)\n\t\t\t{\n\t\t\t\tmy %plus;\n\t\t\t\t\n\t\t\t\t$plus{'stroke-dasharray'}=$self->{'ENV'}{'show_line_dasharray'}\n\t\t\t\t\tif $self->{'ENV'}{'show_line_dasharray'};\n\t\t\t\t$plus{'stroke-dasharray'}=$self->{'columns'}{$column}->{'ENV'}{'show_line_dasharray'}\n\t\t\t\t\tif $self->{'columns'}{$column}->{'ENV'}{'show_line_dasharray'};\n\t\t\t\t\n\t\t\t\t$self->{SVG}->path(\n\t\t\t\t\td=>$points_sin,\n\t\t\t\t\t'stroke-width'\t=>\"2pt\" ,\n\t\t\t\t\t'stroke'\t\t=>\"rgb(\".$colors{N0}.\")\",\n\t\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t\t'fill-opacity'\t=>\"0\",\n\t\t\t\t\t%plus\n\t\t\t\t);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tif ($self->{ENV}{show_lines})\n\t\t{\n\t\t\tmy $min=$self->{grid_y_scale_minimum};$min=0 if $min<0;\n\t\t\tmy $height=(($min-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*($self->{block_height}/100);\n\t\t\tmy @points_x=@points_x;\n\t\t\tmy @points_y=@points_y;\n\t\t\tmy $opacity=\"0\";\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif(\n\t\t\t\t(\n\t\t\t\t\t($self->{ENV}{show_areas})||\n\t\t\t\t\t($self->{columns}{$column}->{ENV}{show_area})\n\t\t\t\t)&&\n\t\t\t\t(!$self->{columns}{$column}->{ENV}{show_line})\n\t\t\t)\n\t\t\t{\n\t\t\t\t$opacity=\"1\";\n\t\t\t\t$opacity=$self->{ENV}{show_areas_opacity} if $self->{ENV}{show_areas_opacity};\n\t\t\t\t$opacity=$self->{columns}{$column}->{ENV}{show_area_opacity} if $self->{ENV}{show_area_opacity};\n\t\t\t\tpush @points_x,$self->{block_right},$self->{block_left};\n\t\t\t\tpush @points_y,($self->{block_down}-$height),($self->{block_down}-$height);\n\t\t\t}\n\t\t\t\n\t\t\tmy $points=$self->{SVG}->get_path(\n\t\t\t\tx => [@points_x],\n\t\t\t\ty => [@points_y],\n\t\t\t\t-type   => 'path',\n\t\t\t);\n\t\t\t\n\t\t\t$self->{SVG}->path(\n\t\t\t\t%$points,\n\t\t\t\t'stroke-width'\t=>\"1pt\" ,\n\t\t\t\t'stroke'\t\t=>\"rgb(\".$colors{N0}.\")\",\n\t\t\t\t'stroke-linecap'\t=>\"round\",\n\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t'fill'\t\t\t=>\"url(#gr_\".$color.\"_0)\",\n\t\t\t\t'fill-opacity'\t=>$opacity,\n\t\t\t);\n\t\t}\n\t\t\n\t\tfor (0..@points_x-1)\n\t\t{\n\t\t\t\n\t\t\t\n\t\t\tif ($self->{ENV}{show_points} || $self->{columns}{$column}->{ENV}{show_points})\n\t\t\t{\n\t\t\t\t\n\t\t\t\tmy $circle=$self->{SVG}->circle\n\t\t\t\t(\n\t\t\t\t\tcx\t=>\t$points_x[$_],\n\t\t\t\t\tcy\t=>\t$points_y[$_],\n\t\t\t\t\tr\t=>\t2,\n\t\t\t\t\t'fill'\t\t\t=>\t\"white\",\n\t\t\t\t\t'stroke'\t\t=>\t\"rgb(\".$colors{N0}.\")\",\n\t\t\t\t\t'stroke-width'\t=>\t\"1pt\",\n\t\t\t\t) if $points_y[$_] ne $self->{block_down};\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t$self->{SVG}->circle(\n\t\t\t\tcx=>(($points_x[$_]+$points_x[$_-1])/2),\n\t\t\t\tcy=>(($points_y[$_]+$points_y[$_-1])/2),r=>2,\n\t\t\t\t'fill'\t\t=>\t\"rgb(\".$colors{B1}.\")\",\n\t\t\t\t'stroke'\t\t=>\t\"rgb(\".$colors{L0}.\")\",\n\t\t\t\t'stroke-width'\t=>\t\"1pt\",\n\t\t\t) if $self->{ENV}{show_points_middle};\n\t\t\t\n\t\t\t\n\t\t\tif ($points_data[$_])\n\t\t\t{\n\t\t\t\t\n\t\t\t\tif (\n\t\t\t\t\t\t$self->{ENV}{show_data_background} ||\n\t\t\t\t\t\t$self->{columns}{$column}->{ENV}{show_data_background}\n\t\t\t\t\t)\n\t\t\t\t{\n\t\t\t\t\tmy $width=length($points_data[$_])*5;\n\t\t\t\t\t\n\t\t\t\t\tmy $rect=$self->{SVG}->rect(\n\t\t\t\t\t\t'x' => ($points_x[$_]+2),\n\t\t\t\t\t\t'y' => ($points_y[$_]-11),\n\t\t\t\t\t\t'width' => $width+3,\n\t\t\t\t\t\t'height' => 10,\n\t\t\t\t\t\t'fill'\t=>\"rgb(255,255,255)\",\n\t\t\t\t\t\t'fill-opacity'\t=>\"1\",\n\t\t\t\t\t\t'stroke'\t\t=>\"rgb(125,125,125)\",\n\t\t\t\t\t\t'stroke-width'\t=>\"1pt\",\n\t\t\t\t\t\t'stroke-linecap'\t=>\"round\",\n\t\t\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t\t\t'rx' => \"2pt\",\n\t\t\t\t\t\t'ry' => \"2pt\",\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tif ($self->{ENV}{show_data} || $self->{columns}{$column}->{ENV}{show_data})\n\t\t\t\t{\n\t\t\t\t\t$self->{SVG}->text\n\t\t\t\t\t(\n\t\t\t\t\t\tx\t=>\t$points_x[$_]+3,\n\t\t\t\t\t\ty\t=>\t$points_y[$_]-3,\n\t\t\t\t\t\tstyle =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t'font-family'\t=> 'Verdana',\n\t\t\t\t\t\t\t\t'font-size'\t\t=> '8px',\n\t\t\t\t\t\t\t\t'font-weight'\t=> 400,\n\t\t\t\t\t\t\t\t'fill'\t=>\t\"rgb(0,0,0)\",\n\t\t\t\t\t\t\t\t'stroke-linecap'\t=>\"round\",\n\t\t\t\t\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t)->cdata($points_data[$_]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\tif\n\t\t\t(\n\t\t\t\t($self->{'ENV'}{'show_data_SMIL'} || $self->{columns}{$column}->{'ENV'}{'show_data_SMIL'})\n\t\t\t\t&&($points_data[$_])\n\t\t\t)\n\t\t\t{\n\t\t\t\n\t\t\t\tmy $width=length($points_data[$_])*5;\n\t\t\t\t\n\t\t\t\tmy $box=$self->{SVG}->polyline(\n\t\t\t\t\t'points'\t=>\n\t\t\t\t\t\t\t\t($points_x[$_]-3).\",\".($points_y[$_]-5).\" \".\n\t\t\t\t\t\t\t\t($points_x[$_]+$width).\",\".($points_y[$_]-5).\" \".\n\t\t\t\t\t\t\t\t($points_x[$_]+$width).\",\".($points_y[$_]+5).\" \".\n\t\t\t\t\t\t\t\t($points_x[$_]-3).\",\".($points_y[$_]+5).\" \".\n\t\t\t\t\t\t\t\t($points_x[$_]-3).\",\".($points_y[$_]-5).\" \",\n\t\t\t\t\t'fill'\t\t\t=>\"rgb(255,255,255)\",\n\t\t\t\t\t'fill-opacity'\t=>\"0.7\",\n\t\t\t\t\t'stroke'\t\t=>\"rgb(0,0,0)\",\n\t\t\t\t\t'stroke-width'\t=>\"1\",\n\t\t\t\t\t'stroke-opacity' => \"0\",\n\t\t\t\t\t'fill-opacity' => \"0\",\n\t\t\t\t\t'stroke-linecap'\t=>\"round\",\n\t\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t);\n\t\t\t\t\n\t\t\t\t$box->animate\n\t\t\t\t(\n\t\t\t\t\t'attributeName'=>\"fill-opacity\",\n\t\t\t\t\t'begin'=>\"mouseover\",\n\t\t\t\t\t'end'=>\"mouseout\",\n\t\t\t\t\t'values'=>\"1\",\n\t\t\t\t\t'restart'=>\"whenNotActive\"\n\t\t\t\t);\n\t\t\t}\n\t\t\t\n\t\t}\n\n\n\t}\n\n\t$self->prepare_axis_x_markArea(front=>1);\n\t$self->prepare_axis_x_mark(front=>1);\n\t$self->prepare_axis_y_markArea(front=>1);\n\t$self->prepare_axis_y_mark(front=>1);\n\n\n\t$self->prepare_axis();\n\n\t$self->prepare_legend_label();\n\n\t$self->{SVG_out}=$self->{SVG}->xmlify\n\t(\n\t\t-inline   => 1\n\t);\n\n\treturn $self->{SVG_out};\n}",
      "file" : "/var/tmp/arv_CL5ACN/SVGraph-0.02/lib/SVGraph/2D/lines.pm",
      "package" : "SVGraph::2D::lines"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub prepare\n{\n\tmy $self=shift;\n\n\t$self->{SVG}=SVG->new(width=>$self->{ENV}{x},height=>$self->{ENV}{y});\n\n\t$self->prepare_block();\n\n\t$self->prepare_title();\n\n\t$self->prepare_columns();\n\n\n\t$self->prepare_legend();\n\n\n\t$self->{SVG}->ellipse\n\t(\n\t'cx'=>300,\n\t'cy'=>150,\n\t'rx'=>200,\n\t'ry'=>80,\n\t'stroke'=>\"black\",\n\t'stroke-width'=>\"1pt\",\n\t);\n\n \n \n\n\t$self->{SVG_out}=$self->{SVG}->xmlify\n\t(\n\t-pubid => \"-//W3C//DTD SVG 1.0//EN\",\n\t);\n\treturn $self->{SVG_out};\n}",
      "file" : "/var/tmp/arv_CL5ACN/SVGraph-0.02/lib/SVGraph/2D/ring.pm",
      "package" : "SVGraph::2D::ring"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub prepare\n{\n\tmy $self=shift;\n\t\n\t$self->{SVG}=SVG->new(width=>$self->{ENV}{x},height=>$self->{ENV}{y});\n\t$self->{SVG}->script()->CDATA(\"setTimeout('reload()', \".($self->{ENV}{reload}*1000).\");\") if $self->{ENV}{reload};\n\t\n\t$self->prepare_block();\n\t$self->prepare_title();\n\t$self->prepare_columns();\n\t\n\t$self->prepare_axis_calculate();\n\t$self->prepare_axis_x_markArea(front=>0);\n\t$self->prepare_axis_x();\n\t$self->prepare_axis_x_mark(front=>0);\n\t\n\t$self->prepare_axis_y_markArea(front=>0);\n\t$self->prepare_axis_y();\n\t$self->prepare_axis_y_mark(front=>0);\n\t\n\t$self->prepare_legend();\n\t\n\t\n\tif ($self->{ENV}{type}=~/stacked/)\n\t{\n\t\t@{$self->{columnsA}}=reverse @{$self->{columnsA}};\n\t}\n\t\n\t\n\tforeach my $color(keys %SVGraph::colors::table)\n\t{\n\t\t\n\t\tmy $g = $self->{SVG}->gradient\n\t\t(\n\t\t\t'-type' => \"linear\",\n\t\t\t'id'    => \"gr_\".$color.\"_0\",\n\t\t\t'x1'=>\"0%\",'y1'=>\"0%\",'x2'=>\"100%\",'y2'=>\"0%\",\n\t\t);\n\t\t$g->stop(offset=>\"0%\",style=>\"stop-color:rgb(\".$SVGraph::colors::table{$color}{'N0'}.\");stop-opacity:1\");\n\t\t$g->stop(offset=>\"50%\",style=>\"stop-color:rgb(\".$SVGraph::colors::table{$color}{'L1'}.\");stop-opacity:1\");\n\t\t$g->stop(offset=>\"100%\",style=>\"stop-color:rgb(\".$SVGraph::colors::table{$color}{'N0'}.\");stop-opacity:1\");\n\t}\n\t\n\tmy $g = $self->{SVG}->gradient\n\t(\n\t\t'-type' => \"linear\",\n\t\t'id'    => \"gr_highlight_0\",\n\t\t'x1'=>\"0%\",'y1'=>\"0%\",'x2'=>\"100%\",'y2'=>\"0%\",\n\t);\n\t$g->stop(offset=>\"0%\",style=>\"stop-color:rgb(0,0,0);stop-opacity:1\");\n\t$g->stop(offset=>\"50%\",style=>\"stop-color:rgb(100,100,100);stop-opacity:1\");\n\t$g->stop(offset=>\"100%\",style=>\"stop-color:rgb(0,0,0);stop-opacity:1\");\n\t\n\t\n\tmy $count=0;   \n\tforeach my $row(@{$self->{row}{label}})\n\t{\n\t\t$count++;\n\t\t\t\t\n\t\t\n\t\tmy $rows=0;\n\t\tmy $data_a;\n\t\tforeach my $column(@{$self->{columnsA}})\n\t\t{\n\t\t\t\n\t\t\tmy $color=$self->{columns}->{$column}{ENV}{color};\n\t\t\tmy %colors=%{$SVGraph::colors::table{$color}};\n\t\t\t\n\t\t\tmy $data=$self->{columns}{$column}->{data}{$row};\n\t\t\t\n\t\t\t$data=$data/($self->GetRowSum($row)/100) if $self->{ENV}{type}=~/percentage/;\n\t\t\t$data_a+=$data;\n\t\t\tmy $data_o=$data; \n\t\t\tmy $data_w=$data; \n\t\t\t\n\t\t\tmy $del;\n\t\t\tmy $x;\n\t\t\tmy $height;\n\t\t\tmy $height0;\n\t\t\tmy $xm;\n\t\t\t\n\t\t\tnext unless $data_o;\n\t\t\t\n\t\t\tmy $width=($self->{block_width}/($self->{grid_x_main_lines}-1));\n\t\t\t\n\t\t\tif ($self->{ENV}{type}=~/stacked/)\n\t\t\t{\n\t\t\t\t$height=(($data_a-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*\n\t\t\t\t\t($self->{block_height}/100);\n\n\t\t\t\t$height=int($height*100)/100;\n\t\t\t\t$height=0 if $height < 0;\n\t\t\t\t$height=$self->{block_height} if $height > $self->{block_height};\n\n\t\t\t\tmy $min=$self->{grid_y_scale_minimum};$min=0 if $min<0;\n\t\t\t\t$height0=((($data_a-$data)-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*\n\t\t\t\t\t($self->{block_height}/100);\n\t\t\t\t\n\t\t\t\t$del=($self->{block_width_scale}-($width*0.50));\n\t\t\t\t\n\t\t\t\t$x=($count-1)*($self->{block_width}/($self->{grid_x_main_lines}-1));\n\t\t\t\t$x+=($width*0.25);\n\t\t\t}\n\t\n\t\t\telsif ($self->{ENV}{type}=~/overlap/)\n\t\t\t{\n\t\t\t\t$height=(($data-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*\n\t\t\t\t\t($self->{block_height}/100);\n\n\t\t\t\t$height=int($height*100)/100;\n\t\t\t\t$height=0 if $height < 0;\n\t\t\t\t$height=$self->{block_height} if $height > $self->{block_height};\n\n\t\t\t\tmy $min=$self->{grid_y_scale_minimum};$min=0 if $min<0;\n\t\t\t\t$height0=(($min-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*\n\t\t\t\t\t($self->{block_height}/100);\n\n\t\t\t\t$del=(($self->{block_width_scale}-4)/($self->GetNumColumns()+1));\n\n\t\t\t\t$x=($count-1)*($self->{block_width}/($self->{grid_x_main_lines}-1));$x+=2;\n\n\t\t\t\t$x+=($rows*$del);\n\n\t\t\t\t$xm=-$del;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$height=(($data-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*\n\t\t\t\t\t($self->{block_height}/100);\n\n\t\t\t\t$height=int($height*100)/100;\n\t\t\t\t$height=0 if $height < 0;\n\t\t\t\t$height=$self->{block_height} if $height > $self->{block_height};\n\n\t\t\t\tmy $min=$self->{grid_y_scale_minimum};$min=0 if $min<0;\n\t\t\t\t$height0=(($min-$self->{grid_y_scale_minimum})/($self->{grid_y_scale}/100))*($self->{block_height}/100);\n\t\t\t\t$del=($self->{block_width_scale}-6)/$self->GetNumColumns();\n\n\t\t\t\t$xm=1;\n\n\t\t\t\t$x=($count-1)*($self->{block_width}/($self->{grid_x_main_lines}-1));$x+=3+($xm/2);\n\n\t\t\t\t$x+=($rows*$del);\n\t\t\t}\n\n\t\t\tif ($del-$xm<0.5)\n\t\t\t{\n\t\t\t\tdie \"cannot rows on size \".($del-$xm).\"\\n\";\n\t\t\t}\n\n\n\t\t\tmy $cl=$self->{SVG}->polyline(\n\t\t\tpoints\t=>\t\n\t\t\t\t($self->{block_left}+$x).\",\".($self->{block_down}-$height0).\" \".\n\t\t\t\t($self->{block_left}+$x+$del-$xm).\",\".($self->{block_down}-$height0).\" \".\n\t\t\t\t($self->{block_left}+$x+$del-$xm).\",\".($self->{block_down}-$height).\" \".\n\t\t\t\t($self->{block_left}+$x).\",\".($self->{block_down}-$height).\" \".\n\t\t\t\t($self->{block_left}+$x).\",\".($self->{block_down}-$height0).\" \",\n\t\t\t'stroke-width'\t=>\"0pt\",\n\t\t\t'stroke'\t\t=>\"rgb(0,0,0)\",\n\t\t\t'stroke-linecap'\t=>\"butt\",\n\t\t\t'fill'\t\t\t=>\"url(#gr_\".$color.\"_0)\",\n\t\t\t'fill-opacity'\t=>\"1\"\n\t\t\t);\n\t\n\t\n\t\n\t\t\t$data_w=\"0\" unless $data_w;\n\t\t\tmy $d_x=3;\n\t\t\tmy $d_y=-2;\n\t\n\t\t\tif ($self->{ENV}{show_data_background} || $self->{columns}{$column}->{ENV}{show_data_background})\n\t\t\t{\n\t\t\t\tmy $rx=\"2pt\";\n\t\t\t\tmy $ry=\"2pt\";\n\t\t\t\tmy $width=length($data_w)*5;\n\t\t\t\tmy $fill=\"rgb(255,255,255)\";\n\t\t\t\tmy $fill_opacity=\"0.5\";\n\t\t\n\t\t\t\tif ($self->{columns}{$column}->{ENV}{show_data_summary})\n\t\t\t\t{\n\t\t\t\t\t$width=length($self->GetRowSum($row))*5;\n\t\t\t\t\t$rx=\"0pt\";\n\t\t\t\t\t$ry=\"0pt\";\n\t\t\t\t\t$fill=\"rgb(255,255,255)\";\n\t\t\t\t\t$fill_opacity=\"1\";\n\t\t\t\t}\n\t\t\n\t\t\t\t$self->{SVG}->rect(\n\t\t\t\t\t'x' => (($self->{block_left}+$x)-1+$d_x),\n\t\t\t\t\t'y' => (($self->{block_down}-$height-3)-8+$d_y),\n\t\t\t\t\t'width' => $width+3,\n\t\t\t\t\t'height' => 10,\n\t\t\t\t\t'fill'\t=>$fill,\n\t\t\t\t\t'fill-opacity'\t=>$fill_opacity,\n\t\t\t\t\t'stroke'\t\t=>\"rgb(125,125,125)\",\n\t\t\t\t\t'stroke-width'\t=>\"1pt\",\n\t\t\t\t\t'stroke-linecap'\t=>\"round\",\n\t\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t\t'rx' => $rx,\n\t\t\t\t\t'ry' => $ry,\n\t\t\t\t);\n\t\t\n\t\t\t}\n\t\n\t\t\tif ($self->{ENV}{show_data} || $self->{columns}{$column}->{ENV}{show_data})\n\t\t\t{\n\t\t\t\t$self->{SVG}->text\n\t\t\t\t(\n\t\t\t\t\t'x'\t=>\t($self->{block_left}+$x+$d_x),\n\t\t\t\t\t'y'\t=>\t($self->{block_down}-$height-3+$d_y),\n\t\t\t\t\tstyle => \n\t\t\t\t\t{\n\t\t\t\t\t\t'font-family'\t=> 'Verdana',\n\t\t\t\t\t\t'font-size'\t\t=> '8pt',\n\t\t\t\t\t\t'font-weight'\t=> 400,\n\t\t\t\t\t\t'fill'\t=>\t\"rgb(0,0,0)\",\n\t\t\t\t\t\t'stroke-linecap'\t=>\"round\",\n\t\t\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t\t},\n\t\t\t\t)->cdata($data_w.$self->{'ENV'}{'data_suffix'});\n\t\t\t}\n\t\n\t\t\tif ($self->{columns}{$column}->{ENV}{show_data_summary})\n\t\t\t{\n\t\t\t\t$self->{SVG}->text\n\t\t\t\t(\n\t\t\t\t\t'x'\t=>\t($self->{block_left}+$x+$d_x),\n\t\t\t\t\t'y'\t=>\t($self->{block_down}-$height-3+$d_y),\n\t\t\t\t\tstyle => \n\t\t\t\t\t{\n\t\t\t\t\t\t'font-family'\t=> 'Verdana',\n\t\t\t\t\t\t'font-size'\t\t=> 8,\n\t\t\t\t\t\t'font-weight'\t=> 400,\n\t\t\t\t\t\t'fill'\t=>\t\"rgb(0,0,0)\",\n\t\t\t\t\t\t'stroke-linecap'\t=>\"round\",\n\t\t\t\t\t\t'stroke-linejoin'\t=>\"round\",\n\t\t\t\t\t},\n\t\t\t\t)->cdata($self->GetRowSum($row));\n\t\t\t}\n\n   \n   \n   \t\t\t$rows++;\n  \t\t}\n\n \t}\n \n \n \n \n \n\n\n\n\n\n\t$self->prepare_axis_x_markArea(front=>1);\n\t$self->prepare_axis_x_mark(front=>1);\n\t$self->prepare_axis_y_markArea(front=>1);\n\t$self->prepare_axis_y_mark(front=>1);\n\n\n\t$self->prepare_axis();\n \n\t$self->prepare_legend_label();\n \n\t$self->{SVG_out}=$self->{SVG}->xmlify\n\t(\n\t\t-inline   => 1\n\t);\n \n\treturn $self->{SVG_out};\n}",
      "file" : "/var/tmp/arv_CL5ACN/SVGraph-0.02/lib/SVGraph/2D/columns.pm",
      "package" : "SVGraph::2D::columns"
   }
]
