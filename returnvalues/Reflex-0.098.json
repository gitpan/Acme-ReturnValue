[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "role {\n\tmy $p = shift;\n\n\tmy $att_active    = $p->att_active();\n\tmy $att_pid       = $p->att_pid();\n\tmy $cb_exit       = $p->cb_exit();\n\n\trequires $att_active, $att_pid, $cb_exit;\n\n\tmy $method_start  = $p->method_start();\n\tmy $method_stop   = $p->method_stop();\n\tmy $method_pause  = $p->method_pause();\n\tmy $method_resume = $p->method_resume();\n\n\tsub BUILD {}\n\n\tafter BUILD => sub {\n\t\tmy $self = shift();\n\t\treturn unless $self->$att_active();\n\t\t$self->$method_start();\n\t\treturn;\n\t};\n\n\tsub DEMOLISH {}\n\n\tafter DEMOLISH => sub {\n\t\tshift()->$method_stop();\n\t};\n\n\tmethod $method_start => sub {\n\t\tmy $self = shift;\n\n\t\tmy $pid_value = $self->$att_pid();\n\n\t\t$callbacks{$pid_value}->{$self->session_id()}->{$self} = [\n\t\t\t$self, $cb_exit\n\t\t];\n\t\tweaken $callbacks{$pid_value}->{$self->session_id()}->{$self}->[0];\n\n\n\t\treturn if (\n\t\t\t(scalar keys %{$callbacks{$pid_value}->{$self->session_id()}}) > 1\n\t\t);\n\n\t\t$self->$method_resume();\n\t};\n\n\tmethod $method_pause => sub {\n\t\tmy $self = shift;\n\n\t\treturn unless $self->call_gate($method_pause);\n\n\t\t$POE::Kernel::poe_kernel->sig_child($self->$att_pid(), undef);\n\t};\n\n\tmethod $method_resume => sub {\n\t\tmy $self = shift;\n\n\t\treturn unless $self->call_gate($method_resume);\n\n\t\t$POE::Kernel::poe_kernel->sig_child(\n\t\t\t$self->$att_pid(), \"signal_happened\", ref($self)\n\t\t);\n\t};\n\n\tmethod $method_stop => sub {\n\t\tmy $self = shift;\n\n\t\tmy $pid_value = $self->$att_pid();\n\n\t\treturn unless exists $callbacks{$pid_value}->{$self->session_id()};\n\n\t\tmy $sw = $callbacks{$pid_value}->{$self->session_id()};\n\t\treturn unless delete $sw->{$self};\n\n\t\tunless (scalar keys %$sw) {\n\t\t\tdelete $callbacks{$pid_value}->{$self->session_id()};\n\t\t\tdelete $callbacks{$pid_value} unless (\n\t\t\t\tscalar keys %{$callbacks{$pid_value}}\n\t\t\t);\n\t\t\t$self->$method_pause();\n\t\t}\n\t};\n}",
      "file" : "/var/tmp/arv_NhLB2m/Reflex-0.098/lib/Reflex/Role/PidCatcher.pm",
      "package" : "Reflex::Role::PidCatcher"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "role {\n\tmy $p = shift;\n\n\tmy $att_signal    = $p->att_signal();\n\tmy $att_active    = $p->att_active();\n\tmy $cb_signal     = $p->cb_signal();\n\n\trequires $att_signal, $att_active, $cb_signal;\n\n\tmy $method_start  = $p->method_start();\n\tmy $method_stop   = $p->method_stop();\n\tmy $method_pause  = $p->method_pause();\n\tmy $method_resume = $p->method_resume();\n\n\tsub BUILD {}\n\n\tafter BUILD => sub {\n\t\treturn unless $att_active;\n\t\tshift()->$method_start();\n\t\treturn;\n\t};\n\n\tsub DEMOLISH {}\n\n\tafter DEMOLISH => sub {\n\t\tshift()->$method_stop();\n\t};\n\n\tmethod $method_start => sub {\n\t\tmy $self = shift;\n\n\t\tmy $sig_name = $self->$att_signal();\n\n\t\t$callbacks{$sig_name}->{$self->session_id()}->{$self} = [\n\t\t\t$self, $cb_signal\n\t\t];\n\t\tweaken $callbacks{$sig_name}->{$self->session_id()}->{$self}->[0];\n\n\n\t\treturn if (\n\t\t\t(scalar keys %{$callbacks{$sig_name}->{$self->session_id()}}) > 1\n\t\t);\n\n\t\t$self->$method_resume();\n\t};\n\n\tmethod $method_pause => sub {\n\t\tmy $self = shift;\n\n\t\treturn unless $self->call_gate($method_pause);\n\n\t\t$POE::Kernel::poe_kernel->refcount_decrement(\n\t\t\t$self->session_id(),\n\t\t\t\"signals_keep_alive\"\n\t\t);\n\n\t\t$POE::Kernel::poe_kernel->sig($self->$att_signal(), undef);\n\t};\n\n\tmethod $method_resume => sub {\n\t\tmy $self = shift;\n\n\t\treturn unless $self->call_gate($method_resume);\n\n\t\t$POE::Kernel::poe_kernel->refcount_increment(\n\t\t\t$self->session_id(),\n\t\t\t\"signals_keep_alive\"\n\t\t);\n\n\t\t$POE::Kernel::poe_kernel->sig(\n\t\t\t$self->$att_signal(), \"signal_happened\", ref($self)\n\t\t);\n\t};\n\n\tmethod $method_stop => sub {\n\t\tmy $self = shift;\n\n\t\tmy $sig_name = $self->$att_signal();\n\n\t\treturn unless exists $callbacks{$sig_name}->{$self->session_id()};\n\n\t\tmy $sw = $callbacks{$sig_name}->{$self->session_id()};\n\t\treturn unless delete $sw->{$self};\n\n\t\tunless (scalar keys %$sw) {\n\t\t\tdelete $callbacks{$sig_name}->{$self->session_id()};\n\t\t\tdelete $callbacks{$sig_name} unless scalar keys %{$callbacks{$sig_name}};\n\t\t\t$self->$method_pause();\n\t\t}\n\t};\n}",
      "file" : "/var/tmp/arv_NhLB2m/Reflex-0.098/lib/Reflex/Role/SigCatcher.pm",
      "package" : "Reflex::Role::SigCatcher"
   }
]
