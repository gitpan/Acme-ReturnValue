[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub outputComplete {\n    my ($self) = @_;\n    $self->_pushPrompt();\n}",
      "file" : "/var/tmp/arv_k8JDK2/Parse-Vipar-0.01/lib/Parse/Vipar/Console.pm",
      "package" : "Parse::Vipar::Console"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _sequence_to_tree {\n    my $tree = [];\n    while (@_) {\n        my $elt = shift;\n        if (!ref $elt) {\n            push @$tree, $elt;\n        } else {\n            if ($$elt =~ m!^/(\\w+)!) {\n                return ($tree, $1);\n            } else {\n                my ($tag, $params) = $$elt =~ /^(\\w+)\\s*(.*)$/;\n                my @params = $params =~ /\\S+/g;\n                my %params = map { split(/=/, $_, 2) } @params;\n                $params{tag} = $tag;\n                my $check;\n                ($params{body}, $check) = &_sequence_to_tree;\n                push @$tree, \\%params;\n                die \"Missing closing tag </$tag>\\n\"\n                    if !defined $check;\n                die \"Badly nested tags: expected </$tag>, got </$check>\\n\"\n                    if $tag ne $check;\n            }\n        }\n    }\n\n    return ($tree);\n}",
      "file" : "/var/tmp/arv_k8JDK2/Parse-Vipar-0.01/lib/Parse/Vipar/ViparText.pm",
      "package" : "Parse::Vipar::ViparText"
   }
]
