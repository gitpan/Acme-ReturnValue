[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub new\n{\n    my $whatami = shift @_;\n\n    while ($key = shift @_)\n    {\n        if ($var = shift @_)\n        {\n            $args{$key} = $var;\n        }\n    }\n    \n    $args{'http-ver'} ||= '1.0';\n\n    return undef unless (defined($args{'remote-host'}) && defined($args{'remote-port'}) && defined($args{'proxy-host'}) && defined($args{'proxy-port'}));\n\n    $new_tunnel = IO::Socket::INET->new( 'PeerAddr' => $args{'proxy-host'},\n                                         'PeerPort' => $args{'proxy-port'},\n                                         'Proto' => 'tcp' )\n        or return undef;\n\n    $connectmsg = 'CONNECT ' . $args{'remote-host'} . ':' . $args{'remote-port'} . ' HTTP/' . $args{'http-ver'} . \"\\015\\012\";\n    \n    if ($args{'http-ver'} ne '1.0')\n    {\n        $connectmsg .= 'Host: ' . $args{'proxy-host'} . ':' . $args{'proxy-port'} . \"\\015\\012\";\n    }\n    \n    if ($args{'proxy-user'} && $args{'proxy-pass'})\n    {\n        $upstr = $args{'proxy-user'} . ':' . $args{'proxy-pass'};\n        $passstr = MIME::Base64::encode($upstr, '');\n\n        $connectmsg .= 'Proxy-Authorization: Basic ' . $passstr . \"\\015\\012\";\n    }\n\n    if ($args{'user-agent'})\n    {\n        $connectmsg .= 'User-agent: ' . $args{'user-agent'} . \"\\015\\012\";\n    }\n    \n    $connectmsg .= \"\\015\\012\";\n\n    print $new_tunnel $connectmsg;\n\n    undef($success);\n\n    while (<$new_tunnel>)\n    {\n        if (/ 200 /)\n        {\n            $success = 1;\n        }\n        elsif (/^.$/)\n        {\n            last;\n        }\n        elsif (/^$/)\n        {\n            last;\n        }\n    }\n\n    return undef unless $success;\n\n    bless $new_tunnel, $whatami;\n    return $new_tunnel;\n}",
      "file" : "/var/tmp/arv_jyzxy7/Net-HTTPTunnel/HTTPTunnel.pm",
      "package" : "Net::HTTPTunnel"
   }
]
