[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n    use strict;\n    use warnings;\n    use File::Spec::Functions qw[catdir rel2abs canonpath];\n    our $BASE = 0; our $SVN = 9296; our $DEV = 0; our $VERSION = sprintf('%d.%05d' . ($DEV ? (($DEV < 0 ? '' : '_') . '%03d') : ('')), $BASE, $SVN, abs $DEV);\n\n    sub _md5 {\n        return {bz2 => 'd4d62c0ec8f33881c05217d9b487da2d',\n                gz  => '37ee9b6faec0e6b15f1833af798642cf'\n        };\n    }\n\n    sub _unique_file { return 'src/Widget.cxx' }\n\n    sub new {\n        my ($class, $overrides) = @_;    \n        my $self;\n        {\n            require File::ShareDir;\n            ($self->{'basedir'})\n                = (grep { -d $_ && -f catdir($_, 'config.yml') }\n                       map { rel2abs($_) } (\n                        'share', '../share', '../../share',\n                        eval { File::ShareDir::dist_dir('Alien-FLTK2') }\n                       )\n                );\n        }\n        if (!defined $self->{'basedir'}) {\n            warn 'Fail';\n            return ();\n        }\n        $self->{'define'} = do {\n            require YAML::Tiny;\n            my $yaml\n                = YAML::Tiny->read(catdir($self->{'basedir'}, 'config.yml'));\n            warn 'Failed to load Alien::FLTK2 config: ' . YAML::Tiny->errstr()\n                if !$yaml;\n            $yaml ? $yaml->[0] : {};\n        };\n        return bless $self, shift;\n    }\n    sub config   { return +shift->{'define'}; }\n    sub revision { return $SVN; }\n    sub branch   { return +shift->{'define'}->{'branch'} }\n\n    sub include_dirs {\n        my ($self) = @_;\n        return canonpath($self->{'basedir'} . '/include');\n    }\n\n    sub library_path {\n        my ($self) = @_;\n        return canonpath($self->{'basedir'} . '/libs');\n    }\n    sub cflags { return shift->cxxflags(); }\n\n    sub cxxflags {\n        my ($self) = @_;\n        return $self->config->{'cxxflags'} ? $self->config->{'cxxflags'} : '';\n    }\n\n    sub ldflags {    \n        my ($self, @args) = @_;\n        my $MSVC = 'Windows|MSVC' eq join '|', @{$self->config->{'platform'}};\n\n        my $libdir = shift->library_path();\n\n        my $SHAREDSUFFIX\n            = $self->config->{'_a'}\n            ? $self->config->{'_a'}\n            : $^O =~ '$MSWin32' ? '.a'    \n            :                     '.o';\n        my $LDSTATIC = sprintf '%s/libfltk2%s %s', $libdir, $SHAREDSUFFIX,\n            ($self->config->{'ldflags'} ? $self->config->{'ldflags'} : '');\n        my $LDFLAGS = '-lfltk2 '\n            . ($self->config->{'ldflags'} ? $self->config->{'ldflags'} : '');\n        my $LIBS = sprintf '%s/libfltk2%s', $libdir, $SHAREDSUFFIX;\n        if (grep {m[forms]} @args) {\n            $LDFLAGS  = sprintf '-lfltk2_forms %s',            $LDFLAGS;\n            $LDSTATIC = sprintf '$libdir/libfltk2_forms%s %s', $libdir,\n                $SHAREDSUFFIX,\n                $$LDSTATIC;\n            $LIBS = sprintf '%s %s/libfltk2_forms%s', $LIBS, $libdir,\n                $SHAREDSUFFIX;\n        }\n        if ((grep {m[gl]} @args) && $self->config->{'GL'}) {\n            my $LIBGL = $self->config->{'GL'};\n            $LDFLAGS = sprintf '-lfltk2_gl %s %s', $LIBGL, $LDFLAGS;\n            $LDSTATIC = sprintf '%s/libfltk2_gl%s %s %s',\n                $libdir, $SHAREDSUFFIX, $LIBGL, $LDSTATIC;\n            $LIBS = sprintf '%s %s/libfltk2_gl%s',\n                $LIBS, $libdir, $SHAREDSUFFIX;\n        }\n        if (grep {m[images]} @args) {\n            my $img_libs = $self->config->{'image_flags'};\n            $LDFLAGS  = \" $img_libs $LDFLAGS \";\n            $LDSTATIC = sprintf '%s/libfltk2_images%s %s %s',\n                $libdir, $SHAREDSUFFIX, $img_libs, $LDSTATIC;\n        }\n        my $ret\n            = (  \" -L$libdir \"\n               . (($MSVC || grep {m[static]} @args) ? $LDSTATIC : $LDFLAGS)\n               . ($MSVC ? '' : ' -lsupc++'));\n        if ($MSVC) {    \n            $ret =~ s[-L([^\\s]*)][/libpath:\"$1\"]g;\n            $ret =~ s[-l([^\\s]*)][$1]g;\n            $ret =~ s[-D([^\\s]+)][/D\"$1\"]g;\n        }\n        return $ret;\n    }\n\n    sub capabilities {\n        my ($self) = @_;\n        my @caps;\n        push @caps, 'gl' if $self->config->{'define'}{'HAVE_GL'};\n\n        return @caps;\n    }\n    1\n}",
      "file" : "/var/tmp/arv_aMdngD/Alien-FLTK2-0.09296/lib/Alien/FLTK2.pm",
      "package" : "Alien::FLTK2"
   }
]
