[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub plot {\n    my $me = shift;\n    my $ipo = shift;\n\n    my $po = {\n\ttitle    => $ipo->{title},\n\txlab     => $ipo->{xlabel},\n\tylab     => $ipo->{ylabel},\n\tkey      => $ipo->{key},\n\txrange   => $ipo->{xrange},\n\tyrange   => $ipo->{yrange},\n\tcbrange  => $ipo->{crange},\n\tcolorbox => $ipo->{wedge},\n\tjustify  => $ipo->{justify}>0 ? $ipo->{justify} : undef,\n\tclut   => 'sepia',\n    };\n\n    if( defined($ipo->{legend}) ) {\n\tmy $legend = \"\";\n\tif( $ipo->{legend} =~ m/l/i ) {\n\t    $legend .= ' left ';\n\t} elsif($ipo->{legend} =~ m/r/i) {\n\t    $legend .= ' right ';\n\t} else {\n\t    $legend .= ' center ';\n\t}\n\tif( $ipo->{legend} =~ m/t/i) {\n\t    $legend .= ' top ';\n\t} elsif( $ipo->{legend} =~ m/b/i) {\n\t    $legend .= ' bottom ';\n\t} else {\n\t    $legend .= ' center ';\n\t}\n\t$po->{key} = $legend;\n    }\n\n    $po->{logscale} = [$ipo->{logaxis}] if($ipo->{logaxis});\n\n    unless($ipo->{oplot}) {\n\t$me->{curvestyle} = 0;\n    }\n\n    my @arglist = ($po);\n\n    for my $block(@_) {\n\tmy $ct = $curve_types->{  $block->[0]->{with}  };\n\n\tunless(defined($ct)) {\n\t    die \"PDL::Graphics::Simple::Gnuplot: undefined curve type $ct\";\n\t}\n\tif(ref($ct) eq 'CODE') {\n\t    $block = &$ct($me, $po, @$block);\n\t} else {\n\t    $block->[0]->{with} = $ct;\n\t}\n\n\tmy $co = shift @$block;\n\tmy $gco = {};\n\t$gco->{with} = $co->{with};\n\n\tunless($co->{with} eq 'labels') {\n\n\t    if(defined($co->{style})  and  $co->{style}) {\n\t\t$me->{curvestyle} = $co->{style};\n\t    } else {\n\t\t$me->{curvestyle}++;\n\t    }\n\n\t    $gco->{linetype} = $me->{curvestyle};\n\t}\n\n\tif( defined($co->{width}) and $co->{width} and $co->{with} !~ m/^label/ ) {\n\t    my $s;\n\t    if($co->{with} =~ m/^points/) {\n\t\t$gco->{pointsize} = $co->{width};\n\t    } \n\t    $gco->{linewidth} = $co->{width};\n\t}\n\t$gco->{legend} = $co->{key} if(defined($co->{key}));\n\n\tpush(@arglist, ($gco, @$block));\n    }\n\n    if($me->{nplots}) {\n\tunless($me->{plot_no}) {\n\t    $me->{obj}->multiplot( layout=>[$me->{opt}->{multi}->[0], $me->{opt}->{multi}->[1]] );\n\t}\n    }\n\n    if($ipo->{oplot}) {\n\tdelete $po->{logaxis};\n\tdelete $po->{xrange};\n\tdelete $po->{yrange};\n\tdelete $po->{cbrange};\n\tdelete $po->{justify};\n\t$me->{obj}->replot(@arglist);\n    } else {\n\t$me->{obj}->plot(@arglist);\n    }\n\n\n    if($me->{nplots}) {\n\t$me->{plot_no}++;\n\tif($me->{plot_no} >= $me->{nplots}) {\n\t    $me->{obj}->end_multi();\n\t    $me->{plot_no} = 0;\n\t    \n\t    $me->{obj}->close()    if($me->{opt}->{type} =~ m/^f/i);\n\t    \n\t}\n    } else {\n\t$me->{obj}->close() if($me->{opt}->{type} =~ m/^f/i);\n    }\n    \n    if($me->{opt}->{type} =~ m/^f/i  and  $me->{conv_fn}) {\n\tprint \"converting $me->{conv_fn} to $me->{opt}->{output}...\";\n\t$a = rim($me->{conv_fn});\n\twim($a->slice('-1:0:-1')->mv(1,0), $me->{opt}->{output});\n\tunlink($me->{conv_fn});\n    }\n}",
      "file" : "/var/tmp/arv_vTwu2V/PDL-Graphics-Simple-1.005/lib/PDL/Graphics/Simple/Gnuplot.pm",
      "package" : "PDL::Graphics::Simple::Gnuplot"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub plot {\n    my $me = shift;\n    my $ipo = shift;\n\n    $me->{ipo} = $ipo;\n\n    if(defined($ipo->{legend})) {\n\tprintf(STDERR \"WARNING: Ignoring 'legend' option (Legends not yet supported by PDL::Graphics::Simple::Prima v%s)\",$PDL::Graphics::Simple::VERSION);\n    }\n    \n    my $plot;\n    \n    if($ipo->{oplot} and defined($me->{last_plot})) {\n\t$plot = $me->{last_plot};\n    } else {\n\t$me->{curvestyle} = 0;\n\t\n\tif( $me->{multi} ) {\n\n\t    if($me->{next_plotno}  and  $me->{next_plotno} >= $me->{multi}->[0] * $me->{multi}->[1]) {\n\t\tmap {$_->destroy} @{$me->{widgets}};\n\t\t$me->{widgets} = [];\n\t\t$me->{next_plotno} = 0;\n\t    }\n\n\t    my $pno = $me->{next_plotno};\n\t    $plot = $me->{obj}->insert('Plot',\n\t\t\t\t       place => {\n\t\t\t\t\t   relx      => ($pno % $me->{multi}->[0])/$me->{multi}->[0],\n\t\t\t\t\t   relwidth  => 1.0/$me->{multi}->[0],\n\t\t\t\t\t   rely      => 1.0 - (1 + int($pno / $me->{multi}->[0]))/$me->{multi}->[1],\n\t\t\t\t\t   relheight => 1.0/$me->{multi}->[1],\n\t\t\t\t\t   anchor    => 'sw'});\n\t    $me->{next_plotno}++;\n\t} else {\n\t    map { $_->destroy } @{$me->{widgets}};\n\t    $me->{widgets} = [];\n\t    $plot = $me->{obj}->insert('Plot',\n\t\t\t\t       pack=>{fill=>'both',expand=>1}\n\t\t);\n\t}\n\n    }\n\n    push(@{$me->{widgets}}, $plot);\n    $me->{last_plot} = $plot;\n    \n    $plot->hide;\n    $plot->lock;\n    $plot->title(     $ipo->{title}   )  if(defined($ipo->{title}));\n    $plot->x->label(  $ipo->{xlabel}  )  if(defined($ipo->{xlabel}));\n    $plot->y->label(  $ipo->{ylabel}  )  if(defined($ipo->{ylabel}));\n    \n    $plot->x->scaling(eval q{sc::Log}) if($ipo->{logaxis}=~ m/x/i);\n    $plot->y->scaling(eval q{sc::Log}) if($ipo->{logaxis}=~ m/y/i);\n    \n    $plot->x->min($ipo->{xrange}->[0]) if(defined($ipo->{xrange}) and defined($ipo->{xrange}->[0]));\n    $plot->x->max($ipo->{xrange}->[1]) if(defined($ipo->{xrange}) and defined($ipo->{xrange}->[1]));\n    $plot->y->min($ipo->{yrange}->[0]) if(defined($ipo->{yrange}) and defined($ipo->{yrange}->[0]));\n    $plot->y->max($ipo->{yrange}->[1]) if(defined($ipo->{yrange}) and defined($ipo->{yrange}->[1]));\n    \n    if( !!($ipo->{justify}) ) {\n\tmy ($dmin,$pmin,$dmax,$pmax,$xscale,$yscale);\n\t\n\t($dmin,$dmax) = $plot->x->minmax;\n\t$pmin = $plot->x->reals_to_pixels($dmin);\n\t$pmax = $plot->x->reals_to_pixels($dmax);\n\t$xscale = ($pmax-$pmin)/($dmax-$dmin);\n\t\n\t($dmin,$dmax) = $plot->y->minmax;\n\t$pmin = $plot->y->reals_to_pixels($dmin);\n\t$pmax = $plot->y->reals_to_pixels($dmax);\n\t$yscale = ($pmax-$pmin)/($dmax-$dmin);\n\t\n\tmy $ratio = $yscale / $xscale;\n\tprint \"ratio=$ratio\\n\";\n\tif($ratio > 1) {\n\t    my $ycen = ($dmax+$dmin)/2;\n\t    my $yof =  ($dmax-$dmin)/2;\n\t    my $new_yof = $yof * $yscale/$xscale;\n\t    $plot->y->min($ycen-$new_yof);\n\t    $plot->y->max($ycen+$new_yof);\n\t} elsif($ratio < 1) {\n\t    ($dmin,$dmax) = $plot->x->minmax;\n\t    my $xcen = ($dmax+$dmin)/2;\n\t    my $xof =  ($dmax-$dmin)/2;\n\t    my $new_xof = $xof * $xscale/$yscale;\n\t    $plot->x->min($xcen-$new_xof);\n\t    $plot->x->max($xcen+$new_xof);\n\t}\n    }\n\n\n    for my $block(@_) {\n\tmy $co = shift @$block;\n\t\n\tif(defined($co->{style}) and $co->{style}) {\n\t    $me->{curvestyle} = $co->{style};\n\t} else {\n\t    $me->{curvestyle}++;\n\t}\n\t\n\tmy $cprops = [\n\t    color        => eval $colors[   ($me->{curvestyle}-1) % @colors ],\n\t    linePattern  => eval $patterns[ ($me->{curvestyle}-1) % @patterns ],\n\t    lineWidth    => $co->{width} || 1\n\t    ];\n\t\n\tmy $type = $types->{$co->{with}};\n\tif( ref($type) eq 'CODE' ) {\n\t    &{$type}($me, $plot, $block, $cprops, $co);\n\t} else {\n\t    my $pt;\n\t    if(ref($type) eq 'ARRAY') {\n\t\t$pt = eval sprintf(\"%s\",$type->[ ($me->{curvestyle}-1) % (0+@{$type}) ] );\n\t    } elsif(!defined($type)) {\n\t\tdie \"$co->{with} is not yet implemented in PDL::Graphics::Simple for Prima.\\n\";\n\t    } else {\n\t\t$pt = eval qq{$type};\n\t    }\n\t    \n\t    $plot->dataSets()->{ 1+keys(%{$plot->dataSets()}) } = ds::Pair(@$block, plotType => $pt, @$cprops);\n\t}\n    }\n\n    if($me->{type} !~ m/f/i) {\n\t$plot->show;\n\t$plot->unlock;\n    } else {\n\t$plot->hide;\n\t$me->{obj}->hide;\n    }\n    \n    Prima::Timer->create(\n\tonTick=>sub{$_[0]->stop; die \"done with event loop\\n\"},\n\ttimeout=>50\n\t)->start;\n    eval { $::application->go };\n    die unless $@ =~ /^done with event loop/;\n    undef $@;\n\n}",
      "file" : "/var/tmp/arv_vTwu2V/PDL-Graphics-Simple-1.005/lib/PDL/Graphics/Simple/Prima.pm",
      "package" : "PDL::Graphics::Simple::Prima"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub cmd_location {\n  use File::Spec;\n  my @path = File::Spec->path();\n\n  for my $p(@path) {\n    if(-e \"${p}\\\\cmd.exe\") {return \"${p}\\\\cmd.exe\"}\n  }\n  die \"Can't locate cmd.exe\";\n}",
      "file" : "/var/tmp/arv_vTwu2V/PDL-Graphics-Simple-1.005/lib/PDL/Graphics/Simple/PLplot.pm",
      "package" : "PDL::Graphics::Simple::PLplot"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DESTROY {\n    my $me = shift;\n\n    $me->{obj}->release;\n\n    if($me->{type} =~ m/^f/i) {\n\teval q{ $me->{obj}->close; };\n\n\tmy $file = ( ($me->{conv_fn}) ? $me->{conv_fn} : $me->{output} );\n\tif($me->{conv_fn}) {\n\t    my $a;\n\t    $a = rim($me->{conv_fn}) ;\n\t    wim($a, $me->{opt}->{output}); \n\t    unlink($me->{conv_fn});\n\t}\n    }\n}",
      "file" : "/var/tmp/arv_vTwu2V/PDL-Graphics-Simple-1.005/lib/PDL/Graphics/Simple/PGPLOT.pm",
      "package" : "PDL::Graphics::Simple::PGPLOT"
   }
]
