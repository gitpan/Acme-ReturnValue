[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _lock {\n  my $self = shift;\n  if(open(my $fh, '>>', $self->file)) {\n    my $fn = fileno($fh);\n    my $id = \"$$:$fn\";\n    $self->_fh($fh);\n    return $id;\n  } else {\n    croak \"open \", $self->file, \" for write: $!\";\n  }\n}",
      "file" : "/var/tmp/arv_3Ryy7L/File-Lock-Multi-1.01/lib/File/Lock/Multi/Fuser.pm",
      "package" : "File::Lock::Multi::Fuser"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DESTROY {\n  my $self = shift;\n  $self->release if $self->locked;\n  $self->SUPER::DESTROY if $self->SUPER::can('DESTROY');\n}",
      "file" : "/var/tmp/arv_3Ryy7L/File-Lock-Multi-1.01/lib/File/Lock/Multi/MySQL.pm",
      "package" : "File::Lock::Multi::MySQL"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DESTROY {\n  my $self = shift;\n  $self->release if $self->locked;\n  $self->SUPER::DESTROY if $self->SUPER::can('DESTROY');\n}",
      "file" : "/var/tmp/arv_3Ryy7L/File-Lock-Multi-1.01/lib/File/Lock/Multi/FlockFiles.pm",
      "package" : "File::Lock::Multi::FlockFiles"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DESTROY {\n  my $self = shift;\n  $self->release if $self->locked;\n}",
      "file" : "/var/tmp/arv_3Ryy7L/File-Lock-Multi-1.01/lib/File/Lock/Multi/Base.pm",
      "package" : "File::Lock::Multi::Base"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _iterate {\n  my($self, $code) = @_;\n  my $max = $self->max;\n  my $now = 1;\n  my $delay = $self->iteration_delay;\n  my $rv;\n\n  while($now <= $max) {\n    if(my $rv = $code->($self, $now)) {\n      return $rv;\n    }\n    $now++;\n    sleep($delay) if $delay && $now <= $max;\n  }\n  return;\n}",
      "file" : "/var/tmp/arv_3Ryy7L/File-Lock-Multi-1.01/lib/File/Lock/Multi/Base/Iterative.pm",
      "package" : "File::Lock::Multi::Base::Iterative"
   }
]
