[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method endpoint_uri { return 'https://' . $self->target_domain . '/api/'; }\n\nmethod _talk($command,$method,$content?) {\n  my $uri = URI->new($self->endpoint_uri);\n  $uri->path(\"api/$command\");\n\n  $self->ua->credentials( \n    $uri->host . ':'.$uri->port,\n    'seamApp',\n    $self->token => 'x'\n  );\n  \n  print \"$uri\\n\" if $self->debug;\n\n  my $res;\n  my $type = ref $content  eq 'HASH' ? 'json' : 'xml';\n  if($method =~ /get/i){\n    if(ref $content eq 'HASH') {\n      $uri->query_form($content);\n    }\n    $res = $self->ua->request(\n      GET $uri, \n      Accept => 'application/json', \n      Content_Type => 'application/json',\n    );\n  } else {\n    if($type eq 'json') {\n      print \"Encoding as JSON\\n\" if $self->debug;\n      $content = encode_json $content;\n      print \"$content\\n\" if $self->debug;\n      $res = $self->ua->request(\n        POST $uri,\n        Accept => 'application/json', \n        Content_Type => 'application/json',\n        Content => $content,\n      );\n    } else {\n      $content = $self->xmls->XMLout($content, RootName => $command);\n      print \"Encoding as XML\\n\" if $self->debug;\n      $res = $self->ua->request(\n        POST $uri,\n        Accept => 'text/xml', \n        Content_Type => 'text/xml',\n        Content => $content,\n      );\n    }\n\n\n  }\n  \n  if ($res->is_success) {\n    print \"Server said: \", $res->status_line, \"\\n\" if $self->debug;\n    if($res->status_line =~ /^201/) {\n      return (split '/', $res->header('Location'))[-1]\n    } else {\n      print $res->content. \"\\n\" if $self->debug;\n      if($type eq 'json') {\n        return decode_json $res->content;\n      } elsif($res->content) {\n        return XMLin $res->content;\n      } else {\n        return 1;\n      }\n    }\n  } else {\n    $self->error($res->status_line);\n    warn $self->error;\n    if ($self->debug) {\n      print $res->content;\n    }\n  }\n  \n}\n\n\n\nmethod find_party_by_email($email) {\n  my $res = $self->_talk('party', 'GET', {\n    email => $email,\n    start => 0,\n  });\n  return $res->{'parties'}->{'person'}->{'id'} || undef;\n}\n\n\nmethod find_party($id) {\n  my $res = $self->_talk('party/'.$id, 'GET', $id);\n  return $res->{'parties'}->{'person'}->{'id'} || undef;\n}\n\n\nmethod create_person($data) {\n  return $self->_talk('person', 'POST', { person => $data } );\n}\n\n\nmethod create_organisation($data) {\n  return $self->_talk('organisation', 'POST', { organisation => $data } );\n}\n\nmethod add_tag($id, @tags) {\n  foreach(@tags) {\n    $self->_talk(\"party/$id/tag/$_\", 'POST');\n  }\n}\n\n\n1",
      "file" : "/var/tmp/arv_DesrnO/Net-CapsuleCRM-1.123130/lib/Net/CapsuleCRM.pm",
      "package" : "Net::CapsuleCRM"
   }
]
