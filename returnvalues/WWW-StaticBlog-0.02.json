[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method sorted_posts()\n{\n    return $self->_sorted_posts(\n        sub {\n            DateTime->compare(\n                $_[0]->posted_on(),\n                $_[1]->posted_on(),\n            )\n        }\n    );\n}\n\nmethod _sort_posts_by_date_descending(@posts)\n{\n    my @sorted_posts = sort {\n        DateTime->compare(\n            $b->posted_on(),\n            $a->posted_on(),\n        )\n    } @posts;\n\n    return @sorted_posts;\n}\n\nmethod newest_n_posts($n)\n{\n    my @posts = $self->_sort_posts_by_date_descending(\n        $self->all_posts()\n    );\n\n    return grep { defined } @posts[0..$n];\n}\n\nmethod posts_for_author($author)\n{\n    return $self->_posts_for_author_obj($author)\n        if (ref $author eq 'WWW::StaticBlog::Author');\n\n    return $self->_posts_for_author_str($author);\n}\n\nmethod _posts_for_author_obj($author)\n{\n    return $self->filter_posts(\n        sub {\n            $_->author() =~ $author->name()\n            || $_->author() =~ $author->alias()\n        }\n    );\n}\n\nmethod _posts_for_author_str($author)\n{\n    return $self->filter_posts(\n        sub { $_->author() =~ $author }\n    );\n}\n\nmethod _build_posts()\n{\n    return [] unless $self->have_posts_dir();\n\n    my @posts;\n    foreach my $post_file ($self->_find_files_for_dir($self->posts_dir())) {\n        push @posts, WWW::StaticBlog::Post->new(filename => $post_file);\n    }\n\n    return \\@posts;\n}\n\nmethod reload_posts()\n{\n    $self->clear_posts();\n    $self->posts($self->_build_posts());\n}\n\nmethod all_tags()\n{\n    my $set = Set::Object->new();\n\n    foreach my $post ($self->all_posts()) {\n        $set->insert($post->all_tags());\n    }\n\n    return sort { $a->name() cmp $b->name() } $set->members();\n}\n\nmethod posts_for_tags(@tags)\n{\n    my @posts = $self->all_posts();\n    foreach my $tag (@tags) {\n        @posts = $self->_filter_posts_to_tag($tag, @posts);\n        return unless @posts;\n    }\n\n    return $self->_sort_posts_by_date_descending(@posts);\n}\n\nmethod _filter_posts_to_tag($tag, @posts)\n{\n    my $tag_name = ref($tag) ? $tag->name() : $tag;\n    return grep {\n        any {\n            $_->name() =~ m/$tag_name/;\n        } $_->all_tags();\n    } @posts;\n}\n\n\"I don't think there's a punch-line scheduled, is there?\"",
      "file" : "/var/tmp/arv_njc9nn/WWW-StaticBlog-0.02/lib/WWW/StaticBlog/Compendium.pm",
      "package" : "WWW::StaticBlog::Compendium"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method compendium($compendium?)\n{\n    $WWW::StaticBlog::Tag::compendium = $compendium\n        if defined $compendium && UNIVERSAL::isa($compendium, 'WWW::StaticBlog::Compendium');\n\n    return $WWW::StaticBlog::Tag::compendium;\n}\n\nmethod post_count()\n{\n    return unless $WWW::StaticBlog::Tag::compendium;\n\n    return scalar $WWW::StaticBlog::Tag::compendium->posts_for_tags($self);\n}\n\n\"No fair! You can't flash back to things we saw ten seconds ago!\"",
      "file" : "/var/tmp/arv_njc9nn/WWW-StaticBlog-0.02/lib/WWW/StaticBlog/Tag.pm",
      "package" : "WWW::StaticBlog::Tag"
   }
]
