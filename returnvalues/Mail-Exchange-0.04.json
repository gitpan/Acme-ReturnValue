[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub unixtime_to_mstime{\n\tmy $unixtime=shift;\n\n\treturn $unixtime * 10_000_000 + 116_444_736_000_000_000;\n}",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/Time.pm",
      "package" : "Mail::Exchange::Time"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub addRecipient($$) {\n\tmy $self=shift;\n\tmy $recipient=shift;\n\n\tpush(@{$self->{_recipients}}, $recipient);\n}",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/Message.pm",
      "package" : "Mail::Exchange::Message"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _parseProperties {\n\tmy $self=shift;\n\tmy $file=shift;\n\tmy $dir=shift;\n\tmy $headersize=shift;\n\tmy $namedProperties=shift;\n\n\tmy $data=substr($file->{Data}, $headersize);\t\n\twhile ($data) {\n\t\tmy ($tag, $flags, $value, $v1, $v2);\n\t\teval {\n\t\t\t($tag, $flags, $value)=unpack(\"VVQ\", $data);\n\t\t\t$v1=$value&0xffffffff;\n\t\t};\n\t\tif ($@) {\n\t\t\t($tag, $flags, $v1, $v2)=unpack(\"VVVV\", $data);\n\t\t\t$value=$v2*4294967296+$v1;\n\t\t}\n\t\tmy $type = $tag&0xffff;\n\t\tmy $ptag = ($tag>>16)&0xffff;\n\n\t\tif ($ptag & 0x8000) {\n\t\t\t$namedProperties->setType($ptag, $type);\n\t\t}\n\t\tif ($type & 0x1000) {\n\t\t\tdie(\"Multiple properties not implemented\");\n\t\t}\n\t\tif ($type==0x0002) { $value=$v1&0xffff; }\n\t\tif ($type==0x0003 || $type==0x0004 || $type==0x000a || $type==0x000b\n\t\t||  $type==0x000d || $type==0x001e || $type==0x001f || $type==0x0048\n\t\t||  $type==0x00FB || $type==0x00FD || $type==0x00FE || $type==0x0102) {\n\t\t\t$value=$v1;\n\t\t}\n\t\tif ($type==0x000d || $type==0x001E || $type==0x001F\n\t\t||  $type==0x0048 || $type==0x0102) {\n\t\t\tmy $streamname=Encode::encode(\"UCS2LE\",\n\t\t\t\tsprintf(\"__substg1.0_%08X\", $tag));\n\t\t\tmy $found=0;\n\t\t\tforeach $file (@{$dir->{Child}}) {\n\t\t\t\tif ($file->{Name} eq $streamname) {\n\t\t\t\t\t$found=1;\n\t\t\t\t\t$value=$file->{Data};\n\t\t\t\t\tif ($type == 0x1f) {\n\t\t\t\t\t\t$value=Encode::decode(\"UCS2LE\", $value);\n\t\t\t\t\t}\n\t\t\t\t\tlast;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdie \"stream for $tag not found\" unless $found;\n\t\t}\n\t\tif ($ptag & 0x8000) {\n\t\t\t$ptag=$namedProperties->LidForID($ptag);\n\t\t}\n\t\t$self->set($ptag, $value, $flags, $type);\n\t\t$data=substr($data, 16);\n\t}\n}",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/PropertyContainer.pm",
      "package" : "Mail::Exchange::PropertyContainer"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub fromMIME($) {\n\tmy $class=shift;\n\tmy $mime=shift;\n\n\tmy $self=$class->new;\n\n\tdie \"wrong object type\" if ref $mime ne \"Email::MIME\";\n\n\t$self->set(PidTagStoreSupportMask, 0x40000);\n\t$self->set(PidTagMessageFlags, 1);\n\t$self->set(PidTagTransportMessageHeaders,\n\t\t$mime->header_obj->as_string());\n\n\tmy (@from, @sender);\n\tif (@from=Email::Address->parse($mime->header('From'))) {\n\t    $self->set(PidTagSentRepresentingAddressType, \"SMTP\");\n\t    $self->set(PidTagSentRepresentingEmailAddress, $from[0]->address);\n\t    $self->set(PidTagSentRepresentingName, $from[0]->name);\n\t}\n\tif (!(@sender=Email::Address->parse($mime->header('Sender')))) {\n\t\t@sender=@from;\n\t}\n\tif ($sender[0]) {\n\t\t$self->set(PidTagSenderAddressType, \"SMTP\");\n\t\t$self->set(PidTagSenderEmailAddress, $sender[0]->address);\n\t\t$self->set(PidTagSenderSmtpAddress, $sender[0]->address);\n\t\t$self->set(PidTagSenderName, $sender[0]->name);\n\t}\n\n\tmy @headers=$mime->header_pairs;\n\tfor (my $i=0; $i<=$#headers; $i+=2) {\n\t\tmy $k=lc $headers[$i];\n\t\tmy $v=$headers[$i+1];\n\n\t\tif ($k eq \"cc\") {\n\t\t\t$self->set(PidTagDisplayCc, $v);\n\t\t} elsif ($k eq \"bcc\") {\n\t\t\t$self->set(PidTagDisplayBcc, $v);\n\t\t} elsif ($k eq \"to\") {\n\t\t\t$self->set(PidTagDisplayTo, $v);\n\t\t} elsif ($k eq \"date\") {\n\t\t} elsif ($k eq \"importance\") {\n\t\t\t$self->set(PidTagImportance, lc $v eq \"low\" ? 0 :\n\t\t\t\t\t\t     lc $v eq \"high\" ? 2 :\n\t\t\t\t\t\t     1);\n\t\t} elsif ($k eq \"in-reply-to\") {\n\t\t\t$self->set(PidTagInReplyToId, $v);\n\t\t} elsif ($k eq \"message-id\") {\n\t\t\t$self->set(PidTagInternetMessageId, $v);\n\t\t} elsif ($k eq \"subject\") {\n\t\t\t$self->setSubject($v);\n\t\t}\n\t}\n\n\tforeach my $type qw(To Cc Bcc) { if ($mime->header($type)) {\n\t\tforeach my $address (Email::Address->parse($mime->header($type))) {\n\t\t\tmy $recipient=Mail::Exchange::Recipient->new();\n\t\t\t$recipient->setRecipientType($type);\n\t\t\t$recipient->setDisplayName($address->name);\n\t\t\t$recipient->setEmailAddress($address->address);\n\t\t\t$self->addRecipient($recipient);\n\t\t}\n\t}}\n\n\n\tmy @parts=($mime);\n\twhile (my $part=pop @parts) {\n\t\tpush(@parts, $part->subparts);\n\t\tnext if ($part->{ct}{discrete} eq \"multipart\"\n\t\t     ||  $part->{ct}{discrete} eq \"message\");\n\n\t\tmy $filename;\n\t\tmy $attach;\n\t\tif ($filename=$part->filename()) {\n\t\t\t$attach=Mail::Exchange::Attachment->new();\n\t\t\t$attach->setFileName($filename);\n\t\t} elsif ($part->{ct}{discrete} eq \"text\"\n\t\t &&   ($part->{ct}{composite} eq 'plain')) {\n\t\t \t$self->setBody($part->body);\n\t\t\tnext;\n\t\t} elsif ($part->{ct}{discrete} eq \"text\"\n\t\t &&   ($part->{ct}{composite} eq 'html')) {\n\t\t \t$self->setHTMLBody($part->body);\n\t\t\tnext;\n\t\t} else {\n\t\t\t$attach=Mail::Exchange::Attachment->new();\n\t\t\t$attach->setFileName($part->invent_filename(\n\t\t\t\t\t$part->header(\"Content-type\")));\n\t\t}\n\t\t$attach->setString($part->body);\n\t\tif (my $cid=$part->header(\"Content-ID\")) {\n\t\t\t$attach->set(PidTagAttachContentId, $cid);\n\t\t}\n\t\t$self->addAttachment($attach);\n\t}\n\n\t$self;\n}",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/Message/Email.pm",
      "package" : "Mail::Exchange::Message::Email"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub mfUntrusted\t\t{ return 0x8000; }",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/Message/MessageFlags.pm",
      "package" : "Mail::Exchange::Message::MessageFlags"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub setColor {\n\tmy $self=shift;\n\tmy $color=shift;\n\t$color=$colors{lc $color} if defined $colors{lc $color};\n\t$self->set(PidLidNoteColor, $color);\n\t$self->set(PidTagIconIndex, $color+0x300);\n}",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/Message/StickyNote.pm",
      "package" : "Mail::Exchange::Message::StickyNote"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub recipOriginal\t\t{ return 0x0100; }",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/Message/RecipientFlags.pm",
      "package" : "Mail::Exchange::Message::RecipientFlags"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub setEnd {\n\tmy $self=shift;\n\tmy $time=shift;\n\t$self->set(PidTagEndDate, $time);\n\t$self->set(PidLidAppointmentEndWhole, $time);\n\t$self->set(PidLidClipEnd, $time);\n\t$self->set(PidLidCommonEnd, $time);\n\t$self->set(PidLidReminderTime, $time);\n}",
      "file" : "/var/tmp/arv_fjT7cd/Mail-Exchange-0.04/lib/Mail/Exchange/Message/Appointment.pm",
      "package" : "Mail::Exchange::Message::Appointment"
   }
]
