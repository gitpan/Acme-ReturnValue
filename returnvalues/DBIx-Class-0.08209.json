[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub produce\n{\n    my ($translator) = @_;\n    $DEBUG             = $translator->debug;\n    $WARN              = $translator->show_warnings;\n    my $no_comments    = $translator->no_comments;\n    my $add_drop_table = $translator->add_drop_table;\n    my $schema         = $translator->schema;\n    my $output         = '';\n\n    my $dbixschema     = $translator->producer_args()->{prefix} ||\n        $schema->name || 'My::Schema';\n    my $pkclass = $parser2PK{$translator->parser_type} || '';\n\n    my %tt_vars = ();\n    $tt_vars{dbixschema} = $dbixschema;\n    $tt_vars{pkclass} = $pkclass;\n\n    my $schemaoutput .= << \"DATA\";\n\n    my %tableoutput = ();\n    my %tableextras = ();\n    foreach my $table ($schema->get_tables)\n    {\n        my $tname = $table->name;\n        my $output .= qq{\n\npackage ${dbixschema}::${tname};\nuse base 'DBIx::Class';\nuse strict;\nuse warnings;\n\n__PACKAGE__->load_components(qw/${pkclass} Core/);\n__PACKAGE__->table('${tname}');\n\n};\n\n        my @fields = map\n        { { $_->name  => {\n            name              => $_->name,\n            is_auto_increment => $_->is_auto_increment,\n            is_foreign_key    => $_->is_foreign_key,\n            is_nullable       => $_->is_nullable,\n            default_value     => $_->default_value,\n            data_type         => $_->data_type,\n            size              => $_->size,\n        } }\n         } ($table->get_fields);\n\n        $output .= \"\\n__PACKAGE__->add_columns(\";\n        foreach my $f (@fields)\n        {\n            local $Data::Dumper::Terse = 1;\n            $output .= \"\\n    '\" . (keys %$f)[0] . \"' => \" ;\n            my $colinfo =\n                Data::Dumper->Dump([values %$f],\n                                   [''] \n                                   );\n            chomp($colinfo);\n            $output .= $colinfo . \",\";\n        }\n        $output .= \"\\n);\\n\";\n\n        my $pk = $table->primary_key;\n        if($pk)\n        {\n            my @pk = map { $_->name } ($pk->fields);\n            $output .= \"__PACKAGE__->set_primary_key(\";\n            $output .= \"'\" . join(\"', '\", @pk) . \"');\\n\";\n        }\n\n        foreach my $cont ($table->get_constraints)\n        {\n            if($cont->type =~ /foreign key/i)\n            {\n\n                $tableextras{$table->name} .= \"\\n__PACKAGE__->belongs_to('\" .\n                    $cont->fields->[0]->name . \"', '\" .\n                    \"${dbixschema}::\" . $cont->reference_table . \"');\\n\";\n\n                my $other = \"\\n__PACKAGE__->has_many('\" .\n                    \"get_\" . $table->name. \"', '\" .\n                    \"${dbixschema}::\" . $table->name. \"', '\" .\n                    $cont->fields->[0]->name . \"');\";\n                $tableextras{$cont->reference_table} .= $other;\n            }\n        }\n\n        $tableoutput{$table->name} .= $output;\n    }\n\n    foreach my $to (keys %tableoutput)\n    {\n        $output .= $tableoutput{$to};\n        $schemaoutput .= \"\\n__PACKAGE__->register_class('${to}', '${dbixschema}::${to}');\\n\";\n    }\n\n    foreach my $te (keys %tableextras)\n    {\n        $output .= \"\\npackage ${dbixschema}::$te;\\n\";\n        $output .= $tableextras{$te} . \"\\n\";\n    }\n\n    return \"${output}\\n\\n${schemaoutput}\\n1;\\n\";\n}",
      "file" : "/var/tmp/arv_hqGA2e/DBIx-Class-0.08209/lib/SQL/Translator/Producer/DBIx/Class/File.pm",
      "package" : "SQL::Translator::Producer::DBIx::Class::File"
   }
]
