[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "role {\n  my ($p)  = @_;\n\n  my $what      = $p->what;\n  my $ident     = $p->ident;\n  my $what_id   = $p->what_id;\n  my $getter    = $p->getter;\n  my $id_method = $p->id_method;\n  my $weak_ref  = $p->weak_ref;\n\n  my $w_pred    = \"has_initialized_$what\";\n  my $wi_pred   = \"has_initialized_$what_id\";\n  my $w_reader  = \"_$what\";\n  my $w_clearer = \"_clear_$what\";\n\n  confess \"cannot use weak references for $ident without a getter\"\n    if $weak_ref and not $getter;\n\n  has $what => (\n    is        => 'bare',\n    reader    => $w_reader,\n    isa       => $p->type,\n    lazy      => 1,\n    predicate => $w_pred,\n    clearer   => $w_clearer,\n    default   => sub {\n      confess \"cannot get a $what based on $what_id; no getter\" unless $getter;\n\n      $getter->( $_[0]->$what_id );\n    },\n  );\n\n  if ($weak_ref) {\n    method $what => sub {\n      my ($self) = @_;\n      my $value = $self->$w_reader;\n      return $value if defined $value;\n      $self->$w_clearer;\n      return $self->$w_reader;\n    };\n  } else {\n    my $reader = \"_$what\";\n    method $what => sub { $_[0]->$reader },\n  }\n\n  has $what_id => (\n    is   => 'ro',\n    isa  => $p->id_type,\n    lazy => 1,\n    predicate => $wi_pred,\n    default   => sub { $_[0]->$what->$id_method },\n  );\n\n  method BUILD => sub {};\n\n  after BUILD => sub {\n    my ($self) = @_;\n\n    unless ($self->$w_pred or $self->$wi_pred) {\n      confess \"neither $what nor $what_id given in constructing $ident\";\n    }\n\n    if (\n      $self->$w_pred and $self->$wi_pred\n      and $self->$what->$id_method ne $self->$what_id\n    ) {\n      confess \"the result of $what->$id_method is not equal to the $what_id\"\n    }\n\n    if ($self->$wi_pred and ! $self->$w_pred and ! $getter) {\n      confess \"can't build $ident with only $what_id; no getter\";\n    }\n\n    if ($weak_ref) {\n      $self->$what_id unless $self->$wi_pred;\n\n      Scalar::Util::weaken $self->{$what} if $self->$w_pred;\n    }\n  };\n\n  method \"for_$what\" => sub {\n    my ($class, $entity, $arg) = @_;\n    $arg ||= {};\n\n    $class->new({\n      %$arg,\n      $what => $entity,\n    });\n  };\n\n  if ($getter) {\n    method \"for_$what_id\" => sub {\n      my ($class, $id, $arg) = @_;\n      $arg ||= {};\n\n      $class->new({\n        %$arg,\n        $what_id => $id,\n      });\n    };\n  }\n}",
      "file" : "/var/tmp/arv_T1pkhf/Role-Subsystem-0.101340/lib/Role/Subsystem.pm",
      "package" : "Role::Subsystem"
   }
]
