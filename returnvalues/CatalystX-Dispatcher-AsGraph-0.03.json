[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "class CatalystX::Dispatcher::AsGraph {\n\n    use Graph::Easy;\n    with 'MooseX::Getopt';\n\n    has [qw/appname output/] => (is => 'ro', isa => 'Str', required => 1);\n\n    has graph => (\n        traits  => ['NoGetopt'],\n        is      => 'ro',\n        default => sub { Graph::Easy->new }\n    );\n    has app => (\n        traits  => ['NoGetopt'],\n        is      => 'rw',\n        isa     => 'Object',\n        lazy    => 1,\n        handles => [qw/dispatcher/],\n        default => sub {\n            my $self = shift;\n            Class::MOP::load_class($self->appname);\n            my $app = $self->appname->new;\n            $app;\n        }\n    );\n\n    method run{\n        my $routes = $self->dispatcher->_tree;\n        $self->_new_node($routes, '');\n    }\n\n    method _new_node($parent, $prefix) {\n        my $name = $prefix . $parent->getNodeValue || '';\n        my $node = $self->graph->add_node($name);\n\n        my $actions = $parent->getNodeValue->actions;\n        for my $action ( keys %{$actions} ) {\n            next if ( ( $action =~ /^_.*/ ) );\n            $self->graph->add_edge( $node, \"[action] \" . $action);\n        }\n        for my $child ( $parent->getAllChildren ) {\n            my $child_node = $self->_new_node( $child, $name . ' -> ' );\n            $self->graph->add_edge( $node, $child_node );\n        }\n        return $node;\n    }\n}\n\n1",
      "file" : "/var/tmp/arv_CWaNQm/CatalystX-Dispatcher-AsGraph-0.03/lib/CatalystX/Dispatcher/AsGraph.pm",
      "package" : "CatalystX::Dispatcher::AsGraph"
   }
]
