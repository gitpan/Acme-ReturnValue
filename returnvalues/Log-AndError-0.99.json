[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "DESTROY {\nmy $self = shift;\n\n}\n\nsub new {\n\tmy $proto = shift;\n\tmy $class = ref($proto) || $proto;\n\tmy $self  = {};\n\tbless($self, $class);\n\n\tforeach my $nomen (keys(%Deflt)){\n\t\t$self->{$nomen} = $Deflt{$nomen};\n\t}\n\tmy %Cfg = @_;\n        @{$self}{keys(%Cfg)} = values(%Cfg);\nreturn $self;\n}\n\n\nsub service_name {\nmy $self = shift;\nmy $key = 'LOG_SERVICE_NAME';\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\tif(@_){ \n\t\t$self->{$key} = $_[0]; \n\t}\n\nreturn($self->{$key});\n}\n\nsub debug_level {\nmy $self = shift;\nmy $key = 'LOG_DEBUG_LEVEL';\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\tif(@_){ \n\t\t$self->{$key} = $_[0]; \n\t}\n\nreturn($self->{$key});\n}\n\n\nsub info_level {\nmy $self = shift;\nmy $key = 'LOG_INFO_LEVEL';\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\tif(@_){ \n\t\t$self->{$key} = $_[0]; \n\t}\n\nreturn($self->{$key});\n}\n\n\nsub alwayslog_level {\nmy $self = shift;\nmy $key = 'LOG_ALWAYSLOG_LEVEL';\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\tif(@_){ \n\t\t$self->{$key} = $_[0]; \n\t}\nreturn($self->{$key});\n}\n\n\nsub template{\nmy $self = shift;\nmy($ok, $error) = (1, undef);\nmy $key = 'LOG_TEMPLATE';\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\n\tif(@_) {\n\t\tif(_template_check($_[0])){\n\t\t    $self->{$key} = $_[0];\n\t\t}\n\t\telse{\n\t\t\t($ok, $error) = (undef, 'Bad sprintf() Template');\n\t\t\t$self->{$key} = undef;\n\t\t}\n\t}\n\n$self->error($ok, $error);\nreturn($self->{$key});\n}\n\nsub error{\nmy $self = shift;\nmy ($code,$msg) = ($_[0], $_[1]);\n\t$self->error_code($code) if(@_);\n\t$self->error_msg($msg) if(@_);\nreturn($self->error_code(),$self->error_msg());\n}\n\n\nsub error_code{\nmy $self = shift;\nmy $key = 'LOG_ERROR_CODE';\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\tif(@_){\n\t\t$self->{$key} = $_[0]; \n\t}\nreturn($self->{$key});\n}\n\nsub error_msg{\n\nmy $self = shift;\nmy $key = 'LOG_ERROR_MSG';\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\tif(@_){ \n\t\t$self->{$key} = $_[0]; \n\t}\nreturn($self->{$key});\n}\n\nsub logger {\n\nmy $self = shift;\nmy($level,$msg) = ($_[0], $_[1]);\nmy($nok,$error) = (-1, 'ENTRY NOT LOGGED');\nmy $key = 'LOG_LOGGER';\n\n   \tif(!$self->{$key}){\n\t\t$self->{$key} = $Deflt{$key};\n\t}\n\tif(( ($level <= $self->debug_level) && ($level >= 0) ) || ($level == $self->info_level) || ($level == $self->alwayslog_level)) { \n\t\t$self->{$key}->(sprintf($self->template,$self->service_name,$level,$msg));\n\t\t($nok, $error) = (-1, 'ENTRY LOGGED'); \n\t}\nreturn($nok,$error);\n}\n\n\n\nsub _log {\nwarn(join(', ',@_));\n}\n\nsub _template_check {\nmy $temp = $_[0];\nreturn($temp =~ m/.*\\%s.*\\%d.*\\%s.*/gox);\n}\n\n\n1",
      "file" : "/var/tmp/arv_0IDmUf/Log-AndError-0.99/lib/Log/AndError.pm",
      "package" : "Log::AndError"
   }
]
