[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "role Filesystem::Fuse::Readable {\n    use MooseX::Types::Moose qw(HashRef ArrayRef Defined Int);\n    use MooseX::Types::Path::Class qw(File Dir);\n    use POSIX qw(ENOENT EISDIR);\n\n    require MooseX::Getopt;\n\n    has 'open_files' => (\n        traits    => ['NoGetopt'],\n        is        => 'ro',\n        isa       => HashRef[HashRef[Defined]],\n        default   => sub { {} },\n        required  => 1,\n    );\n\n    requires 'getattr';\n    requires 'readlink';\n    requires 'getdir';\n    requires 'read';\n    requires 'statfs';\n    requires 'file_exists';\n\n    method open(File $file does coerce, Int $flags){\n\treturn -ENOENT() unless $self->file_exists($file);\n\treturn -EISDIR() if [$self->getattr($file)]->[3] & 0040;\n        $self->open_files->{$file->stringify}{$flags} = 1;\n        return 0;\n    }\n\n    method flush(File $file does coerce) {\n        return 0;\n    }\n\n    method release(File $file does coerce, Int $flags){\n        delete $self->open_files->{$file->stringify}{$flags};\n        delete $self->open_files->{$file->stringify} if\n          keys %{$self->open_files->{$file->stringify}} < 1;\n        return 0;\n    }\n}\n\nrole Filesystem::Fuse::Writable with Filesystem::Fuse::Readable {\n    requires 'mknod';\n    requires 'mkdir';\n    requires 'unlink';\n    requires 'rmdir';\n    requires 'symlink';\n    requires 'rename';\n    requires 'link';\n    requires 'chmod';\n    requires 'chown';\n    requires 'truncate';\n    requires 'utime';\n    requires 'write';\n    requires 'fsync';\n}\n\nrole Filesystem::Fuse::Attributes::Readable {\n    requires 'getxattr';\n    requires 'listxattr';\n}\n\nrole Filesystem::Fuse::Attributes::Writable\n  with Filesystem::Fuse::Attributes::Readable {\n    requires 'setxattr';\n    requires 'removexattr';\n}\n\nrole MooseX::Runnable::Fuse with MooseX::Getopt with MooseX::Runnable {\n\n    use MooseX::Types::Moose qw(Bool Str);\n    use MooseX::Types::Path::Class qw(Dir);\n\n    has 'mountpoint' => (\n        is       => 'ro',\n        isa      => Dir,\n        required => 1,\n        coerce   => 1,\n    );\n\n    has 'mountopts' => (\n        is       => 'ro',\n        isa      => Str,\n        default  => sub { \"\" },\n        required => 0,\n    );\n\n    has 'debug' => (\n        init_arg => 'debug',\n        reader   => 'is_debug',\n        isa      => Bool,\n        default  => sub { 0 },\n        required => 1,\n    );\n\n    method run {\n        my $class = $self->meta;\n        my @method_map;\n\n        my $subify = sub {\n            my $method = shift;\n            return sub { $self->$method(@_) };\n        };\n\n        if($class->does_role('Filesystem::Fuse::Readable')){\n            push @method_map, map { $_ => $subify->($_) } qw{\n                getattr readlink getdir open read\n                release statfs flush\n            };\n        }\n\n        if($class->does_role('Filesystem::Fuse::Writable')){\n            push @method_map, map { $_ => $subify->($_) } qw{\n                mknod mkdir unlink rmdir symlink rename link\n                chmod chown truncate utime write fsync\n            };\n        }\n\n        if($class->does_role('Filesystem::Fuse::Attributes::Readable')){\n            push @method_map, map { $_ => $subify->($_) } qw{\n                getxattr listxattr\n            };\n        }\n\n        if($class->does_role('Filesystem::Fuse::Attributes::Writable')){\n            push @method_map, map { $_ => $subify->($_) } qw{\n                setxattr removexattr\n            };\n        }\n\n        return Fuse::main( \n            debug      => $self->is_debug ? 1 : 0,\n            mountpoint => $self->mountpoint->stringify,\n            mountopts  => $self->mountopts,\n            @method_map,\n        ) || 0;\n\n    }\n}\n\n1",
      "file" : "/var/tmp/arv_6PUxi3/MooseX-Runnable-Fuse-0.02/lib/MooseX/Runnable/Fuse.pm",
      "package" : "MooseX::Runnable::Fuse"
   }
]
