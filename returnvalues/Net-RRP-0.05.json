[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub handler\n{\n    my $this = shift;\n\n    my $socket = $this->socket();\n    $this->Log ( 'notice', \"$$: connecttion from: %s\", $socket->peerhost );\n\n    $this->setStates ();\n\n    my $protocol   = new Net::RRP::Protocol ( socket => $socket );\n    $protocol->sendHello ( $this->getHelloInfo() );\n\t\n    my $state  = INIT_STATE;\n    my $states = $this->getStates ();\n\n    $this->{protocol} = $protocol;\n\n    while ( 1 )\n    {\n\tmy $response;\n\n\t$this->Log ( 'debug', \"$$: rrp state at start: $state\" );\n\n\ttry\n\t{\n            my $subState = undef;\n            my $request  = undef;\n\t    my $prevState;\n\n\t    try\n\t    {\n\t\t$prevState = $state;\n\n \t\tmy $requestBuffer = $protocol->_getLinesFromSocket();\n\t\t$request = $protocol->{codec}->decodeRequest ( $requestBuffer );\n\t\t$this->Debug ( \"rrp request buffer is\\n$requestBuffer\" );\n\n\t\tmy $requestName = $request->getName();\n\t\t$this->Log ( 'notice', \"$$: get %s request\", $requestName );\n                $subState = $states->{ $state }->{ $requestName };\n\t\tthrow Net::RRP::Exception::InvalidCommandSequence () unless $subState;\n\t\t$state = 'EXE';\n\t\t$response = $this->execute ( $request );\n\t\t$state = $subState->{ $request->isSuccessResponse ( $response ) || 0 };\n\t    }\n\t    catch Net::RRP::Exception with\n\t    {\n\t\tmy $exception = shift;\n\t\t$this->_logException ( $exception );\n\t\tlast if ( $exception->isa ( 'Net::RRP::Exception::IOError') );\n\t\t$response = Net::RRP::Response->newFromException ( $exception );\n                $this->Log ( 'debug',  \"$$: rrp state before exception: $state\" );\n\t\tif ( $subState )\n\t\t{\n\t\t    $state = $subState->{ $request->isSuccessResponse ( $response ) || 0 };\n\t\t}\n\t\telse\n\t\t{\n\t\t    my $checkState = EXCEPTION_STATES->{ $prevState };\n\t\t    $state = $checkState ? $checkState : $prevState;\n\t\t}\n                $this->Log ( 'debug',  \"$$: rrp state after exception: $state\" );\n\t    };\n\n\t}\n\totherwise\n\t{\n\t    my $exception = shift;\n            $this->_logException ( $exception );\n\t    $response = new Net::RRP::Response::n420;\n\t    $response->setDescription ( 'internal server error' );\n\t    $state = DONE_STATE;\n\t};\n\n\t$this->Log ( 'notice', \"$$: send response: %s\", $response->getCode );\n\t$this->Log ( 'debug',  \"$$: rrp state at end: $state\" );\n\n\t$protocol->sendResponse ( $response );\n\n\tlast if $state eq DONE_STATE;\n    }\n\n    $this->Log ( 'notice', \"$$: done connection\" );\n}",
      "file" : "/var/tmp/arv_Lt1cFK/Net-RRP-0.05/lib/Net/RRP/Server.pm",
      "package" : "Net::RRP::Request::Timeout"
   }
]
