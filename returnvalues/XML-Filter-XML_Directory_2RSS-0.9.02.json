[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\npackage XML::Filter::XML_Directory_2RSS;\nuse strict;\n\nuse base qw (XML::Filter::XML_Directory_2RSS::Base);\nuse XML::Filter::XML_Directory_2RSS::Items;\n\nuse Carp;\n\n$XML::Filter::XML_Directory_2RSS::VERSION = '0.9.02';\n\n\nsub encoding {\n  my $self = shift;\n  $self->{'__encoding'} = $_[0];\n}\n\n\nsub uri {\n  my $self = shift;\n  $self->{'__uri'} = $_[0];\n}\n\n\nsub channel_data {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    return undef;\n  }\n\n  foreach (keys %$args) {\n    unless ($_ =~ /^(title|link|subject|description|dc:publisher|dc:rights|dc:creator|dc:language)$/) {\n      carp \"'$_' is an unknown element. Skipping.\\n\";\n      delete $args->{$_}; \n    }\n  } \n  \n  if (($args->{'dc:language'}) && (ref($args->{'dc:language'}) ne \"ARRAY\")) {\n    carp \"dc:language mus be passed as an array reference. Skipping.\\n\";\n    delete $args->{'dc:language'};\n  }\n\n  $self->{'__channel'} = $args;\n  return 1;\n}\n\n\nsub image {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    return undef;\n  }\n\n  foreach (keys %$args) {\n    unless ($_ =~ /^(title|url|link)$/) {\n      carp \"'$_' is an unknown element. Skipping.\\n\";\n      delete $args->{$_};\n    }\n  }\n\n  $self->{'__image'} = $args;\n  return 1;\n}\n\n\nsub textinput {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    return undef;\n  }\n\n  foreach (keys %$args) {\n    unless ($_ =~ /^(title|descripion|name|link)$/) {\n      carp \"'$_' is an unknown element. Skipping.\\n\";\n      delete $args->{$_};\n    }\n  }\n\n  $self->{'__textinput'} = $args;\n\n}\n\n\nsub generator {\n  my $self = shift;\n  $self->{'__generator'} = $_[0];\n}\n\n\n\n\n\nsub start_document {\n  my $self = shift;\n\n  $self->SUPER::start_document();\n  $self->SUPER::xml_decl({Version  => \"1.0\",\n\t\t\t  Encoding => ($self->{'__encoding'} || \"UTF-8\")});\n\n  $self->start_default_namespaces();\n  $self->SUPER::start_element({Name=>\"rdf:RDF\"});\n\n  return 1;\n}\n\nsub end_document {\n  my $self = shift;\n\n  $self->add_textinput();\n  $self->SUPER::end_element({Name=>\"rdf:RDF\"});\n  $self->end_default_namespaces();\n  $self->SUPER::end_document();\n\n  return 1;\n}\n\nsub start_element {\n  my $self = shift;\n  my $data = shift;\n\n  $self->on_enter_start_element($data) || return;\n\n  if ($data->{Name} =~ /^(file|directory)$/) {\n\n    $self->{'__dlevel'} ++;\n\n    if (! $self->{'__dlevel'}) {\n      return 1;\n    }\n\n    elsif ($self->{'__dlevel'} == 1) {\n\n      $self->SUPER::start_element({Name       => \"item\",\n\t\t\t\t   Attributes => $self->rdf_about($self->make_link($data))});\n\n\n      $self->SUPER::start_element({Name=>\"title\"});\n\n      if ($self->{'__handlers'}{'title'}) {\n\t$self->{'__handlers'}{'description'}->parse_uri($self->build_uri());\n      }\n      \n      elsif ($self->{'__callbacks'}{'title'}) {\n\t$self->SUPER::characters({Data=>&{$self->{'__callbacks'}{'title'}}($self->build_uri(),$data->{Attributes}->{'{}name'}->{Value})});\n      }\n      \n      else {\n\t$self->SUPER::characters({Data=>$data->{Attributes}->{'{}name'}->{Value}});\n      }\n\n      $self->SUPER::end_element({Name=>\"title\"});\n\n\n      $self->SUPER::start_element({Name=>\"link\"});\n      $self->SUPER::characters({Data=>$self->make_link($data)});\n      $self->SUPER::end_element({Name=>\"link\"});\n\n\n      $self->SUPER::start_element({Name=>\"description\"});\n\n      if ($self->{'__handlers'}{'description'}) {\n\t$self->{'__handlers'}{'description'}->parse_uri($self->build_uri());\n      }\n      \n      elsif ($self->{'__callbacks'}{'description'}) {\n\t$self->SUPER::characters({Data=>&{$self->{'__callbacks'}{'description'}}($self->build_uri())});\n      }\n\n      else { }\n\n      $self->SUPER::end_element({Name=>\"description\"});\n\n\n      if ($data->{Name} eq \"directory\") {\n\t$self->SUPER::start_element({Name=>\"thr:children\"});\n\t$self->SUPER::start_element({Name=>\"rdf:Seq\"});\n      }\n\n    }\n\n    elsif ($self->{'__dlevel'} == 2) {\n      $self->SUPER::start_element({Name       => \"rdf:li\",\n\t\t\t\t   Attributes => $self->rdf_resource($self->make_link($data))});\n      $self->SUPER::end_element({Name=>\"rdf:li\"});\n    }\n\n    else {\n      carp \"Depth of directory listing exceeds limit. Skipping \".$self->build_uri($data).\"\\n\";\n    }\n  }\n  \n}\n\nsub end_element {\n  my $self = shift;\n  my $data = shift;\n\n  $self->on_enter_end_element($data);\n\n  if ($data->{Name} eq \"head\") {\n    $self->add_meta_data();\n  }\n\n  if (($self->{'__start'}) && (! $self->{'__skip'})) {\n    if ($data->{Name} =~ /^(file|directory)$/) {\n\n      $self->prune_cwd($data);\n      \t\n      if ($self->{'__dlevel'} == 1) {\n\n\tif ($data->{Name} eq \"directory\") {\n\t  $self->SUPER::end_element({Name=>\"rdf:Seq\"});\n\t  $self->SUPER::end_element({Name=>\"thr:children\"});\n\t}\n\t\n\t$self->SUPER::end_element({Name=>\"item\"});\n      }\n\n      if ($self->{'__dlevel'}) {\n\t$self->{'__dlevel'} --;\n      }\n    }\n  }\n\n  $self->on_exit_end_element($data);\n}\n\nsub characters {\n  my $self = shift;\n  my $data = shift;\n\n  $self->on_characters($data);\n}\n\nsub add_meta_data {\n  my $self = shift;\n\n  $self->SUPER::start_element({Name       => \"channel\",\n\t\t\t       Attributes => $self->rdf_about($self->{'__uri'})});\n\n  foreach my $el (\"title\",\"link\",\"subject\",\"description\") {\n    next if (! defined($self->{'__channel'}{$_}));\n\n    $self->SUPER::start_element({Name=>$_});\n    $self->SUPER::characters({Data=>$self->{'__channel'}{$_}});\n    $self->SUPER::end_element({Name=>$_});\n  }\n \n  if ($self->{'__generator'}) {\n    \n    $self->SUPER::start_prefix_mapping({Prefix=>\"admin\",NamespaceURI=>$self->ns_map(\"admin\")});\n\n    $self->SUPER::start_element({Name       => \"admin:generatorAgent\",\n\t\t\t\t Attributes => $self->rdf_resource($self->{'__generator'})});\n    $self->SUPER::end_element({Name=> \"admin:generatorAgent\"});\n\n    $self->SUPER::end_prefix_mapping({Prefix=>\"admin\"});\n  }\n\n\n  foreach my $el (\"rights\",\"publisher\",\"creator\") {\n    next if (! defined($self->{'__channel'}{$_}));\n\n    $self->SUPER::start_element({Name=>\"dc:$_\"});\n    $self->SUPER::characters({Data=>$self->{'__channel'}{\"dc:$_\"}});\n    $self->SUPER::end_element({Name=>\"dc:$_\"});\n  }\n\n  if (ref($self->{'__channel'}{'dc:language'}) eq \"ARRAY\") {\n    foreach my $lang (@{$self->{'__channel'}{'dc:language'}}) {\n\n      $self->SUPER::start_element({Name=>\"dc:language\"});\n      $self->SUPER::characters({Data=>$lang});\n      $self->SUPER::end_element({Name=>\"dc:language\"});\n    }\n  }\n\n\n  $self->add_channel_items();\n\n\n  if (ref($self->{'__image'}) eq \"HASH\") {\n    $self->SUPER::start_element({\n\t\t\t\t Name       => \"image\",\n\t\t\t\t Attributes => $self->rdf_resource($self->{'__image'}{'url'}),\n\t\t\t\t});\n    $self->SUPER::end_element({Name=>\"image\"});\n  }\n\n  $self->SUPER::end_element({Name=>\"channel\"});\n\n  $self->add_image();\n\n  return 1;\n}\n\nsub add_channel_items {\n  my $self = shift;\n\n  $self->SUPER::start_element({Name=>\"items\"});\n  $self->SUPER::start_element({Name=>\"rdf:Seq\"});\n\n  my $items = XML::Filter::XML_Directory_2RSS::Items->new(Handler=>$self->{Handler});\n\n  my %exclude = ();\n  my %include = ();\n  \n  if (defined($self->{'__exclude'}))          { $exclude{'exclude'}     = $self->{'__exclude'}; }\n  if (defined($self->{'__exclude_starting'})) { $exclude{'starting'}    = $self->{'__exclude_starting'}; }\n  if (defined($self->{'__exclude_ending'}))   { $exclude{'ending'}      = $self->{'__exclude_ending'}; }\n  if (defined($self->{'__exclude_matching'})) { $exclude{'matching'}    = $self->{'__exclude_matching'}; }\n  if (defined($self->{'__exclude_subdirs'}))  { $exclude{'directories'} = $self->{'__exclude_subdirs'}; }\n  if (defined($self->{'__exclude_files'}))    { $exclude{'files'}       = $self->{'__exclude_subdirs'}; }\n  \n  if (defined($self->{'__include'}))          { $include{'include'}     = $self->{'__include'}; }\n  if (defined($self->{'__include_starting'})) { $include{'starting'}    = $self->{'__include_starting'}; }\n  if (defined($self->{'__include_ending'}))   { $include{'ending'}      = $self->{'__include_ending'}; }\n  if (defined($self->{'__include_matching'})) { $include{'matching'}    = $self->{'__include_matching'}; }\n  if (defined($self->{'__include_subdirs'}))  { $include{'directories'} = $self->{'__include_subdirs'}; }\n  if (defined($self->{'__include_files'}))    { $include{'files'}       = $self->{'__include_subdirs'}; }\n  \n  if (keys %exclude) { $items->exclude(%exclude); }\n  if (keys %include) { $items->include(%include); }\n\n  if ($self->{'__callbacks'}{'link'}) {\n    $items->callbacks({link=>$self->{'__callbacks'}->{'link'}});\n  }\n\n  my $xml_directory = XML::Directory::SAX->new(Handler => $items,\n\t\t\t\t\t       depth   => $self->{'__depth'},\n\t\t\t\t\t       detail  => $self->{'__detail'});\n  \n  $xml_directory->order_by(\"a\");\n  $xml_directory->parse_dir($self->{'__path'});\n\n  $self->SUPER::end_element({Name=>\"rdf:Seq\"});\n  $self->SUPER::end_element({Name=>\"items\"});\n}\n\nsub add_image {\n  my $self = shift;\n\n  if (ref($self->{'__image'}) ne \"HASH\") {\n    return 0;\n  }\n\n  $self->SUPER::start_element({\n\t\t\t       Name       => \"image\",\n\t\t\t       Attributes => $self->rdf_about($self->{'__image'}{'url'}),\n\t\t\t      });\n  \n  foreach my $el (\"title\",\"url\",\"link\") {\n    next if (! defined($self->{'__channel'}{$_}));\n\n    $self->SUPER::start_element({Name=>$_});\n    $self->SUPER::characters({Data=>$self->{'__image'}{$_}});\n    $self->SUPER::end_element({Name=>$_});\n  }\n  \n  $self->SUPER::end_element({Name=>\"image\"});\n  \n  return 1;\n}\n\nsub add_textinput {\n  my $self = shift;\n\n  if (ref($self->{'__textinput'}) ne \"HASH\") {\n    return undef;\n  }\n\n  $self->SUPER::start_element({Name=>\"textinput\"});\n\n  foreach my $el (\"title\",\"description\",\"name\",\"link\") {\n    next if (! defined($self->{'__textinput'}{$_}));\n\n    $self->SUPER::start_element({Name=>$_});\n    $self->SUPER::characters({Data=>$self->{'__textinput'}{$_}});\n    $self->SUPER::end_element({Name=>$_});\n  }\n\n\n  $self->SUPER::end_element({Name=>\"textinput\"});\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv_yvSyyz/XML-Filter-XML_Directory_2RSS-0.9.02/lib/XML/Filter/XML_Directory_2RSS.pm",
      "package" : "XML::Filter::XML_Directory_2RSS"
   },
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\npackage XML::Filter::XML_Directory_2RSS::Base;\nuse strict;\n\n$XML::Filter::XML_Directory_2RSS::Base::VERSION = 0.9;\n\nuse Carp;\n\nuse base qw (XML::Filter::XML_Directory_Pruner);\n\nuse constant DEFAULT_NS => ( \"\",\"rdf\",\"dc\",\"thr\" );\n\nuse constant NS => {\n\t\t    \"\"      => \"http://purl.org/rss/1.0/\", \n\t\t    \"admin\" => \"http://webns.net/mvcb/\",\n\t\t    \"dc\"    => \"http://purl.org/dc/elements/1.1/\", \n\t\t    \"rdf\"   => \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n\t\t    \"sy\"    => \"http://purl.org/rss/1.0/modules/syndication/\",\n\t\t    \"ti\"    => \"http://purl.org/rss/1.0/modules/textinput/\",\n\t\t    \"thr\"   => \"http://purl.org/rss/1.0/modules/threading/\",\n\t\t   };\n\nsub start_default_namespaces {\n  my $self = shift;\n  foreach my $prefix (DEFAULT_NS) {\n    $self->SUPER::start_prefix_mapping({\n\t\t\t\t\tPrefix       => $prefix,\n\t\t\t\t\tNamespaceURI => NS->{$prefix},\n\t\t\t\t       });\n  }\n\n  return 1;\n}\n\nsub end_default_namespaces {\n  my $self = shift;\n  foreach my $prefix (DEFAULT_NS) {\n    $self->SUPER::end_prefix_mapping({Prefix => $prefix});\n  }\n\n  return 1;\n}\n\nsub handlers {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    return undef;\n  }\n\n  foreach (\"title\",\"description\") {\n    next if (! $args->{$_});\n\n    if (! UNIVERSAL::isa($args->{$_},\"XML::SAX::Base\")) {\n      carp \"Handler must be derived from XML::SAX::Base\";\n      next;\n    }\n\n    if (! UNIVERSAL::can($args->{$_},\"parse_uri\")) {\n      carp \"Handler must define a 'parse_uri' method.\\n\";\n      next;\n    }\n\n    $self->{'__handlers'}{$_} = $args->{$_};\n  }\n\n  return 1;\n}\n\nsub callbacks {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    return undef;\n  }\n\n  foreach (\"title\",\"link\",\"description\") {\n    next if (! $args->{$_});\n\n    if (ref($args->{$_}) ne \"CODE\") {\n      carp \"Not a CODE reference\";\n      return undef;\n    }\n\n    $self->{'__callbacks'}{$_} = $args->{$_};\n  }\n\n  return 1;\n}\n\nsub on_enter_start_element {\n  my $self = shift;\n  my $data = shift;\n\n  $self->{'__level'} ++;\n  $self->{'__last'} = $data->{Name};\n\n  if ($data->{Name} eq \"head\") {\n      $self->{'__head'} = 1;\n  }\n\n  if ((! $self->{'__start'}) && ($data->{Name} eq \"directory\")) {\n    $self->{'__start'} = 1;\n    return;\n  }\n  \n  return unless $self->{'__start'};\n\n\n  if (($data->{'Name'} =~ /^(file|directory)$/) && (! $self->{'__skip'})) {\n    $self->{'__ima'} = $1;\n    $self->_compare($data->{Attributes}->{'{}name'}->{Value});\n  }\n\n  if ($self->{'__skip'}) {\n    return 0;\n  }\n\n  $self->grow_cwd($data);\n\n  return 1;\n}\n\nsub on_enter_end_element {\n  my $self = shift;\n  my $data = shift;\n\n  if ($data->{Name} eq \"head\") {\n    $self->{'__head'} = 0;\n  }\n\n  return 1;\n}\n\nsub on_exit_end_element {\n  my $self = shift;\n  my $data = shift;\n\n\n  if ($self->{'__skip'} == $self->{'__level'}) {\n    $self->{'__skip'} = 0;\n  }\n\n  $self->{'__level'} --;\n\n  return 1;\n}\n\nsub on_characters {\n  my $self = shift;\n  my $data = shift;\n\n  if ($self->{'__head'}) {\n      $self->{ '__'.$self->{'__last'} } = $data->{Data};\n  }\n\n  return 1;\n}\n\nsub grow_cwd {\n  my $self = shift;\n  my $data = shift;\n\n  if ($data->{Name} eq \"directory\") {\n    $self->{'__cwd'} .= \"/$data->{Attributes}->{'{}name'}->{Value}\";\n  }\n\n  return 1;\n}\n\nsub prune_cwd {\n  my $self = shift;\n  my $data = shift;\n\n  if ($data->{Name} eq \"directory\") {\n    $self->{'__cwd'} =~ s/^(.*)\\/([^\\/]+)$/$1/;\n  }\n\n  return 1;\n}\n\nsub build_uri {\n  my $self = shift;\n  my $data = shift;\n\n  my $uri = $self->{'__path'}.$self->{'__cwd'};\n  \n  if ($data->{Name} eq \"file\") {\n    $uri .= \"/$data->{Attributes}->{'{}name'}->{Value}\";\n  }\n\n  return $uri;\n}\n\nsub make_link {\n  my $self = shift;\n  my $data = shift;\n\n  my $link = $self->build_uri($data);\n  \n  if ($self->{'__callbacks'}{'link'}) {\n    $link = &{$self->{'__callbacks'}{'link'}}($link);\n  }\n  \n  return $link;\n}\n\nsub ns_map {\n  my $self   = shift;\n  my $prefix = shift;\n  return NS->{$prefix};\n}\n\nsub rdf_resource {\n    my $self     = shift;\n    my $resource = shift;\n\n    my $ns = NS->{\"rdf\"};\n\n    return {\"{$ns}rdf:resource\" => {\n\tName         => \"rdf:resource\",\n\tValue        => $resource,\n\tPrefix       => \"rdf\",\n\tLocalName    => \"resource\",\n\tNamespaceURI => $ns,\n    }};\n}\n\nsub rdf_about {\n    my $self    = shift;\n    my $subject = shift;\n    \n    my $ns = NS->{\"rdf\"};\n\n    return {\"{$ns}rdf:about\" => {\n\tName         => \"rdf:about\",\n\tValue        => $subject,\n\tPrefix       => \"rdf\",\n\tLocalName    => \"about\",\n\tNamespaceURI => $ns,\n    }};\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv_yvSyyz/XML-Filter-XML_Directory_2RSS-0.9.02/lib/XML/Filter/XML_Directory_2RSS/Base.pm",
      "package" : "XML::Filter::XML_Directory_2RSS::Base"
   },
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\npackage XML::Filter::XML_Directory_2RSS::Items;\nuse strict;\n\nuse base qw (XML::Filter::XML_Directory_2RSS::Base);\n\n$XML::Filter::XML_Directory_2RSS::Items::VERSION = 1.0;\n\nsub start_document {}\nsub end_document {}\n\nsub start_element {\n  my $self = shift;\n  my $data = shift;\n\n  $self->on_enter_start_element($data) || return;\n\n  if ($data->{Name} =~ /^(file|directory)$/) {\n\n    $self->{'__dlevel'} ++;\n\n    if ($self->{'__dlevel'} == 1) {\n      $self->SUPER::start_element({\n\t\t\t\t   Name       => \"rdf:li\",\n\t\t\t\t   Attributes => $self->rdf_resource($self->make_link($data)),\n\t\t\t\t   });\n      $self->SUPER::end_element({Name=>\"rdf:li\"});\n    }\n  }\n\n  return 1;\n}\n\nsub end_element {\n  my $self = shift;\n  my $data = shift;  \n\n  $self->on_enter_end_element($data);\n\n  if (($self->{'__start'}) && (! $self->{'__skip'})) {\n    if ($data->{Name} =~ /^(file|directory)$/) {\n\n      $self->prune_cwd($data);\n\n      if ($self->{'__dlevel'}) {\n\t$self->{'__dlevel'} --;\n      }\n    }\n  }\n\n  $self->on_exit_end_element();\n  return 1;\n}\n\nsub characters {\n  my $self = shift;\n  my $data = shift;\n  $self->on_characters($data);\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv_yvSyyz/XML-Filter-XML_Directory_2RSS-0.9.02/lib/XML/Filter/XML_Directory_2RSS/Items.pm",
      "package" : "XML::Filter::XML_Directory_2RSS::Items"
   }
]
