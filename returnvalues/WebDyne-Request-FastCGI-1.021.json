[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub env {\n\n    return \\%Dir_config_env;\n    \n}",
      "file" : "/var/tmp/arv_jGiVbh/WebDyne-Request-FastCGI-1.021/lib/WebDyne/Request/FastCGI.pm",
      "package" : "WebDyne::Request::FastCGI"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$_=\\%Constant",
      "file" : "/var/tmp/arv_jGiVbh/WebDyne-Request-FastCGI-1.021/lib/WebDyne/Request/FastCGI/Constant.pm",
      "package" : "WebDyne::Request::FastCGI::Constant"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub run {\n\n    my ($r, $self)=@_;\n    my $fn=$r->filename();\n    if (!-f $fn) {\n\twarn(\"file '$fn' not found\");\n\treturn $r->status(RC_NOT_FOUND);\n    }\n    elsif (my $fh=IO::File->new($fn, O_RDONLY)) {\n\tmy $hr=$r->headers_out();\n\tmy $size=(stat($fn))[7];\n\t$hr->{'Content-Length'}=$size;\n\t$r->send_http_header();\n\twhile (<$fh>) { $r->print($_) }\n\t$fh->close();\n\treturn &Apache::OK\n    }\n    else {\n\twarn(\"unable to open file '$fn', $!\");\n\treturn $r->status(RC_INTERNAL_SERVER_ERROR);\n    }\n\n}",
      "file" : "/var/tmp/arv_jGiVbh/WebDyne-Request-FastCGI-1.021/lib/WebDyne/Request/FastCGI/Static.pm",
      "package" : "WebDyne::Request::FastCGI::Static"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub start {\n\n\n    my ($class, $socket_fn, $backlog)=@_;\n    my $socket_fh=$socket_fn && do {\n\t$backlog ||=  WEBDYNE_FASTCGI_BACKLOG;\n\tFCGI::OpenSocket($socket_fn, $backlog) ||\n\t    die (\"could not open socket $socket_fn, $!\");\n    };\n    \n    \n    my %env=%ENV;\n    *ENV=\\*env;\n\n\n    my ($handler, %handler);\n\n\n    my $fcgi_r=$socket_fh ?\n\tFCGI::Request(\\*STDIN, \\*STDOUT, \\*STDERR, \\%ENV, $socket_fh) : FCGI::Request();\n    my ($busy, $exit);\n    \n    \n    while($busy=($fcgi_r->Accept() >= 0)) {\n\n\n    \tmy $r=WebDyne::Request::FastCGI->new() ||\n\t    goto RENDER_ERROR;\n\t    \n\t    \n        unless ($handler=$handler{my $location=$r->location()}) {\n            my $handler_package=\n                $r->dir_config('WebDyneHandler') || $ENV{'WebDyneHandler'};\n            if ($handler_package) {\n                local $SIG{'__DIE__'};\n                unless (eval(\"require $handler_package\")) {\n                    $handler='WebDyne';\n                }\n                else {\n                    $handler=$handler{$location}=$handler_package;\n                }\n            }\n            else {\n                $handler=$handler{$location}='WebDyne';\n            }\n        }\n\n\n\tmy $status=eval { $handler->handler($r) } if $handler;\n\tif (!defined($status)) {\n\t    if (($status=$r->status) ne RC_INTERNAL_SERVER_ERROR) {\n\t\tmy $error=errdump() || $@; errclr();\n\t\t$r->custom_response(\n\t\t    $r->status($status=RC_INTERNAL_SERVER_ERROR),\n\t\t    $r->err_html($status, $error)\n\t\t);\n\t    }\n\t}\n\telsif (($status < 0) && !(-f (my $fn=$r->filename()))) {\n\t    $r->status($status=RC_NOT_FOUND);\n\t    warn(\"file $fn not found\") if $WEBDYNE_FASTCGI_WARN_ON_ERROR;\n\t}\n\telsif ($status < 0) {\n\t    $r->custom_response(\n\t\t$r->status($status=RC_INTERNAL_SERVER_ERROR),\n\t\t$r->err_html($status, \"Unexpected return ($status) from handler $handler\")\n\t       );\n\t}\n\tdebug(\"handler status was $status\");\n\n\n\t$status && $r->send_error_response();\n\n\n\t$r->DESTROY;\n\n\n\tnext;\n\n\n\tRENDER_ERROR:\n\trequire CGI;\n\tmy $error=errdump() || 'unknown error'; errclr();\n\tCORE::print \n\t    sprintf(\"Status: %s\\r\\n\", RC_INTERNAL_SERVER_ERROR),\n\t    \"Content-Type: text\\html\\r\\n\\r\\n\",\n\t\tWebDyne::Request::FastCGI->err_html(RC_INTERNAL_SERVER_ERROR, CGI->pre($error));\n\n    };\n\n\n}",
      "file" : "/var/tmp/arv_jGiVbh/WebDyne-Request-FastCGI-1.021/lib/WebDyne/Request/FastCGI/Run.pm",
      "package" : "WebDyne::Request::FastCGI::Run"
   }
]
