[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\npackage Spreadsheet::TieExcel::Hash;\n\nuse strict;\nuse Carp;\n\nuse Spreadsheet::TieExcel;\n\nsub TIEHASH {\n    my $class = shift;\n\n    my $wb = Spreadsheet::TieExcel::getBook;\n    my $self = bless {\n\tbook => $wb,\n\tlist => {}\n    }, $class;\n\n    for (1..$self->{book}->Names->Count) {\n\tmy $name = $self->{book}->Names($_)->Name;\n\t$self->{list}->{$name} = $self->{book}->Names($_)->RefersToRange;\n    }\n    return $self;\n}\n\nsub FETCH {\n    my $self = shift;\n    my $name = shift;\n    if ($self->exists($name)) {\n\treturn $self->names($name)->{Value};\n    } else {\n    }\n}\n\nsub STORE {\n    my $self = shift;\n    my ($name, $value) = @_;\n\n    if ($self->exists($name)) {\n\t$self->names($name)->{Value} = $value;\n    } else {\n \tmy $range = Spreadsheet::TieExcel::getRange($value);\n\t$self->add($name, $range);\n    }\n}\n\nsub DELETE {\n    my $self = shift;\n    my $name = shift;\n    return $self->delete($name);\n}\n\nsub CLEAR {\n}\n\nsub EXISTS {\n    return shift->exists(shift);\n}\n\nsub FIRSTKEY {\n    my $self = shift;\n\n    $a = keys %{ $self->names };\n    return each %{ $self->names }\n}\n\nsub NEXTKEY {\n    my $self = shift;\n    return each %{ $self->names }\n}\n\nsub exists {\n    my $self = shift;\n    my $name = shift;\n    return $self->names->{$name}\n}\n\nsub length {\n    return scalar keys %{ shift->names };\n}\n\nsub names {\n    my $self = shift;\n    my $name = shift;\n    for (1..$self->{book}->Names->Count) {\n\tmy $name = $self->{book}->Names($_)->Name;\n\t$self->{list}->{$name} = $self->{book}->Names($_)->RefersToRange;\n\t$self->{book}->Names($_)->RefersToRange;\n    }\n    return $name ? $self->{list}->{$name} : $self->{list};\n}\n\nsub delete {\n    my $self = shift;\n    my $name = shift;\n\n    if ($self->exists($name)) {\n\tdelete $self->names->{$name};\n\treturn $self->{book}->Names($name)->Delete;\n    }\n}\n\nsub add {\n    my $self = shift;\n    my ($name, $range, $value) = @_;\n\n    my $address = $range->Address(1, 1, 1, 1);\n    $address =~ /\\](.+)/; $address = $1;\n    if (eval { $self->{book}->Names->Add({Name => $name, RefersTo => \"=$address\"}) }) {\n\t$self->names->{$name} = $range;\n    } else {\n\tcarp \"Could not add name referring to range $address\";\n    }\n\n}\n\n1\n\n}",
      "file" : "/var/tmp/arv_18PE35/Spreadsheet-TieExcel-0.75/TieExcel.pm",
      "package" : "Spreadsheet::TieExcel"
   }
]
