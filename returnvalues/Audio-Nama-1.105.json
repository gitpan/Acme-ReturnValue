[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "format STDOUT_TOP =\nTrack Name      Ver. Setting  Status   Source           Send        Vol  Pan \n=============================================================================\n.\nformat STDOUT =\n@>>   @<<<<<<<<< @>    @<<     @<< @|||||||||||||| @||||||||||||||  @>>  @>> ~~\nsplice @{$text->{format_fields}}, 0, 9\n.\n\n\n\nsub t_load_project {\n\tpackage Audio::Nama;\n\treturn if engine_running() and Audio::Nama::ChainSetup::really_recording();\n\tmy $name = shift;\n\tprint \"input name: $name\\n\";\n\tmy $newname = remove_spaces($name);\n\t$newname =~ s(/$)(); \n\tprint(\"Project $newname does not exist\\n\"), return\n\t\tunless -d join_path(project_root(), $newname);\n\tstop_transport();\n\tload_project( name => $newname );\n\tprint \"loaded project: $project->{name}\\n\";\n\tlogpkg(__FILE__,__LINE__,'debug',\"load hook: $config->{execute_on_project_load}\");\n\tAudio::Nama::process_command($config->{execute_on_project_load});\n}\nsub t_create_project {\n\tpackage Audio::Nama;\n\tmy $name = shift;\n\tload_project( \n\t\tname => remove_spaces($name),\n\t\tcreate => 1,\n\t);\n\tprint \"created project: $project->{name}\\n\";\n\n}\nsub mixdown {\n\tmy $quiet = shift;\n\tpager3(\"Enabling mixdown to file\") if ! $quiet;\n\t$tn{Mixdown}->set(rw => 'REC'); \n\t$tn{Master}->set(rw => 'OFF'); \n\t$bn{Main}->set(rw => 'REC');\n}\nsub mixplay { \n\tmy $quiet = shift;\n\tpager3(\"Setting mixdown playback mode.\") if ! $quiet;\n\t$tn{Mixdown}->set(rw => 'MON');\n\t$tn{Master}->set(rw => 'MON'); \n\t$bn{Main}->set(rw => 'OFF');\n}\nsub mixoff { \n\tmy $quiet = shift;\n\tpager3(\"Leaving mixdown mode.\") if ! $quiet;\n\t$tn{Mixdown}->set(rw => 'OFF');\n\t$tn{Master}->set(rw => 'MON'); \n\t$bn{Main}->set(rw => 'REC') if $bn{Main}->rw eq 'OFF';\n}\nsub remove_fade {\n\tmy $i = shift;\n\tmy $fade = $Audio::Nama::Fade::by_index{$i}\n\t\tor print(\"fade index $i not found. Aborting.\"), return 1;\n\tprint \"removing fade $i from track \" .$fade->track .\"\\n\"; \n\t$fade->remove;\n}\nsub import_audio {\n\n\tmy ($track, $path, $frequency) = @_;\n\t\n\t$track->import_audio($path, $frequency);\n\n\n\t$track->set(rw => 'MON');\n\n}\nsub destroy_current_wav {\n\tcarp($this_track->name.\": must be set to MON.\"), return\n\t\tunless $this_track->rec_status eq 'MON';\n\t$this_track->current_version or\n\t\tsay($this_track->name, \n\t\t\t\": No current version (track set to OFF?) Skipping.\"), return;\n\tmy $wav = $this_track->full_path;\n\tmy $reply = $text->{term}->readline(\"delete WAV file $wav? [n] \");\n\tif ( $reply =~ /y/i ){\n\t\tdelete $this_track->{version_comment}{$this_track->current_version};\n\t\tprint \"Unlinking.\\n\";\n\t\tunlink $wav or warn \"couldn't unlink $wav: $!\\n\";\n\t\trestart_wav_memoize();\n\t}\n\t$text->{term}->remove_history($text->{term}->where_history);\n\t$this_track->set(version => 0);  \n\t$this_track->set(version => $this_track->current_version); \n\t1;\n}\n\nsub pan_check {\n\tmy ($track, $new_position) = @_;\n\tmy $current = $fx->{params}->{ $track->pan }->[0];\n\t$track->set(old_pan_level => $current)\n\t\tunless defined $track->old_pan_level;\n\teffect_update_copp_set(\n\t\t$track->pan,\t\n\t\t0, \t\t\t\t\t\n\t\t$new_position,\t\t\n\t);\n}\n\nsub remove_track_cmd {\n\tmy ($track, $quiet) = @_;\n\t\n \tAudio::Nama::ChainSetup::remove_temporary_tracks();\n \t\n\t\tif ( \t! $quiet \n\t\t\tand ! $config->{quietly_remove_tracks}) \n\t\t{\n\t\t\tmy $name = $track->name; \n\t\t\tmy $reply = $text->{term}->readline(\"remove track $name? [n] \");\n\t\t\t$reply =~ /y/i or return\n\t\t\tpager2( \"Removing track. All WAV files will be kept.\")\n\t\t}\n\t\t$track->remove;\n\t\t1\n}\nsub unity {\n\tmy ($track, $save_level) = @_;\n\tif ($save_level){\n\t\t$track->set(old_vol_level => params($track->vol)->[0]);\n\t}\n\teffect_update_copp_set( \n\t\t$track->vol, \n\t\t0, \n\t\t$config->{unity_level}->{type($track->vol)}\n\t);\n}\nsub vol_back {\n\tmy $track = shift;\n\tmy $old = $track->old_vol_level;\n\tif (defined $old){\n\t\teffect_update_copp_set(\n\t\t\t$track->vol,\t\n\t\t\t0, \t\t\t\t\t\n\t\t\t$old,\t\t\t\t\n\t\t);\n\t\t$track->set(old_vol_level => undef);\n\t}\n}\n\t\nsub pan_back {\n\tmy $track = shift;\n\tmy $old = $track->old_pan_level;\n\tif (defined $old){\n\t\teffect_update_copp_set(\n\t\t\t$track->pan,\t\n\t\t\t0, \t\t\t\t\t\n\t\t\t$old,\t\t\t\t\n\t\t);\n\t\t$track->set(old_pan_level => undef);\n\t}\n}",
      "file" : "/var/tmp/arv_ARIh_t/Audio-Nama-1.105/lib/Audio/Nama/Grammar.pm",
      "package" : "Audio::Nama"
   }
]
