[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub unpack {\n    my $self    = shift;\n    my $counter = 0;\n\n    my $cpan = $self->cpan;\n    die \"No $cpan\" unless -d $cpan;\n\n    my $destination = $self->destination;\n    mkdir $destination;\n    die \"No $destination\" unless -d $destination;\n\n    my $packages_filename = \"$cpan/modules/02packages.details.txt.gz\";\n    die \"No packages at $packages_filename\" unless -f $packages_filename;\n\n    my %unpacked_versions;\n    if ( -e \"$destination/unpacked_versions.yml\" ) {\n        local $/;\n        open( my $fh, \"<\", \"$destination/unpacked_versions.yml\" );\n        %unpacked_versions = %{ YAML::Any::Load(<$fh>) };\n        close $fh;\n    }\n\n    sub fixme {\n        my $path = $_;\n        my $mode = ( stat($path) )[2];\n        if ( S_ISDIR($mode) ) {\n            chmod( ( S_IMODE($mode) | S_IRWXU ), $path )\n                unless ( ( $mode & S_IRWXU ) == S_IRWXU );\n        }\n    }\n    my $p = Parse::CPAN::Packages::Fast->new($packages_filename);\n    foreach my $distribution ( $p->latest_distributions ) {\n        $counter++;\n        my $want             = \"$destination/\" . $distribution->dist;\n        my $archive_filename = \"$cpan/authors/id/\" . $distribution->prefix;\n\n        unless ( -f $archive_filename ) {\n            warn \"Archive $archive_filename not found\";\n            next;\n        }\n\n        my $unpacked = $unpacked_versions{ $distribution->dist };\n\n        if ( !defined( $distribution->version ) ) {\n\n            $unpacked_versions{ $distribution->dist }\n                = \"x\" . ( stat $archive_filename )[9];\n        } else {\n            $unpacked_versions{ $distribution->dist }\n                = \"x\" . $distribution->version;\n        }\n\n        if ( defined($unpacked)\n            && $unpacked eq $unpacked_versions{ $distribution->dist } \n            && -d $want )\n        {\n            next;\n        }\n\n        if ( -d $want ) {\n            print \"Deleting old version of \" . $distribution->dist . \"\\n\"\n                unless $self->quiet;\n            rmtree $want;\n        }\n\n        print \"Unpacking \" . $distribution->prefix . \" ($counter)\\n\"\n            unless $self->quiet;\n\n        my $extract = Archive::Extract->new( archive => $archive_filename );\n        my $to = \"$destination/test\";\n        rmtree($to);\n        mkdir($to);\n        $extract->extract( to => $to );\n\n        File::Find::find( { wanted => \\&fixme, follow => 0, no_chdir => 1 },\n            $to );\n\n        my @files = <$to/*>;\n        my $files = @files;\n        if ( $files == 1 ) {\n            my $file = $files[0];\n            if ( S_ISDIR( ( stat( $file ) )[2] ) ) {\n                rename $file, $want;\n            } else {\n                mkdir $want;\n                rename $file, \"$want/\" . basename($file);\n            }\n            rmdir $to;\n        } else {\n            rename $to, $want;\n        }\n\n        unless ( $counter % 500 ) {\n\n            open( my $fh, \">\", \"$destination/unpacked_versions.yml.tmp\" );\n            print $fh YAML::Any::Dump( \\%unpacked_versions );\n            close $fh;\n            rename \"$destination/unpacked_versions.yml.tmp\",\n                \"$destination/unpacked_versions.yml\";\n        }\n    }\n\n    open( my $fh, \">\", \"$destination/unpacked_versions.yml.tmp\" );\n    print $fh YAML::Any::Dump( \\%unpacked_versions );\n    close $fh;\n    rename \"$destination/unpacked_versions.yml.tmp\",\n        \"$destination/unpacked_versions.yml\";\n}",
      "file" : "/var/tmp/arv_J_QkXj/CPAN-Unpack-0.31/lib/CPAN/Unpack.pm",
      "package" : "CPAN::Unpack"
   }
]
