[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "with 'WWW::Phanfare::Class::Role::Attributes'",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Album.pm",
      "package" : "WWW::Phanfare::Class::Album"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method _idnames {\n  my $albumlist =\n    $self->api->GetAlbumList(target_uid=>$self->uid)->{albums}{album};\n  $albumlist = [ $albumlist ] unless ref $albumlist eq 'ARRAY';\n\n  my %year;\n  for my $album ( @$albumlist ) {\n    my $num = substr $album->{album_start_date}, 0, 4;\n    ++$year{$num};\n  }\n  return [ map {{ id=>$_, name=>$_ }} keys %year ];\n}\n\nwith 'WWW::Phanfare::Class::Role::Branch'",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Site.pm",
      "package" : "WWW::Phanfare::Class::Site"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "with 'WWW::Phanfare::Class::Role::Attributes'",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Image.pm",
      "package" : "WWW::Phanfare::Class::Image"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method _idnames {\n  my $imageinfo = $self->parent->_info->{images}{imageinfo};\n  return [] unless $imageinfo;\n  $imageinfo = [ $imageinfo ] unless ref $imageinfo eq 'ARRAY';\n\n  my @images;\n  for my $image ( @$imageinfo ) {\n    $image = {\n      %$image,\n      %{\n        $self->_treesearch(\n          $image->{renditions}{rendition},\n          [ { rendition_type => $self->name } ]\n        )\n      }\n    };\n    push @images, $image;\n  }\n\n  return [\n    map {{\n      id   => $_->{image_id},\n      name => $self->_basename( $_->{filename} ),\n      attr  => $_,\n    }}\n    @images\n  ];\n}\n\nwith 'WWW::Phanfare::Class::Role::Branch'",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Rendition.pm",
      "package" : "WWW::Phanfare::Class::Rendition"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method _idnames {\n  my $albumlist = $self->api->GetAlbumList(target_uid=>$self->uid);\n  $self->_idnamepair(\n    $albumlist->{albums}{album},\n    'album',\n    { album_start_date=>$self->name },\n  );\n}\n\nmethod _delete {\n  return if $self->list;\n  return 1;\n}\n\nmethod start_date { sprintf(\"%04s-01-01T00:00:00\", $self->name) }\nmethod end_date   { sprintf(\"%04s-12-31T23:59:59\", $self->name) }\n\nwith 'WWW::Phanfare::Class::Role::Branch'",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Year.pm",
      "package" : "WWW::Phanfare::Class::Year"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "with 'WWW::Phanfare::Class::Role::Attributes'",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Section.pm",
      "package" : "WWW::Phanfare::Class::Section"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method setattributes ( HashRef $data ) {\n  my %attr = map {\n    ref $data->{$_}\n      ? ()\n      : ( $_ => $data->{$_} )\n  } keys %$data;\n  $self->_set_attr( %attr );\n}\n\nmethod attribute ( Str $key, Str $value? ) {\n  return $self->_attr->{$key} unless defined $value;\n\n  if ( $self->can('_update') ) {\n    defined $self->_update( $key => $value ) or return undef;\n    $self->_set_attr( $key => $value );\n  } else {\n    return undef;\n  }\n}\n\n\n\n1",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Role/Attributes.pm",
      "package" : "WWW::Phanfare::Class::Role::Attributes"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method uid   { $self->parent->uid   }\nmethod api { $self->parent->api }\n\nmethod _treesearch ( Ref $tree, ArrayRef $path ) {\n  my @part = @$path;\n  my $node = $tree;\n  for my $part ( @$path ) {\n    if ( ref $part eq 'HASH' ) {\n      my($key,$value) = each %$part;\n      $node = [ $node ] unless ref $node eq 'ARRAY';\n      my $notfound = {};\n      for my $subnode ( @$node ) {\n        my $treevalue = $subnode->{$key};\n        $treevalue = $self->_basename($treevalue) if $key eq 'filename';\n        $treevalue = substr $treevalue, 0, length $value;\n        if ( $value eq $treevalue ) {\n          $node = $subnode;\n          undef $notfound;\n          last;\n        }\n      }\n      $node = $notfound if $notfound;\n    } else {\n      $node = $node->{$part};\n    }\n  }\n  return $node;\n}\n\nmethod _basename ( Str $filename ) {\n  my $basename = ( split /[\\/\\\\]/, $filename)[-1]; \n  if ( $self->name eq 'Caption' ) {\n    $basename =~ s/(.*)\\..+?$/$1\\.txt/ or $basename .= '.txt';\n  }\n  return $basename;\n}\n\nmethod _phanfaretime ( Int $sec ) {\n  my @t = gmtime $sec;\n  sprintf \"%04s-02%-%02sT%02s:%02s:%02\",\n    $t[5]+1900, $t[4]+1, $t[3],\n    $t[2], $t[1], $t[0];\n}\n\n\n\n1",
      "file" : "/var/tmp/arv_RWC7S0/WWW-Phanfare-Class-0.03/lib/WWW/Phanfare/Class/Role/Node.pm",
      "package" : "WWW::Phanfare::Class::Role::Node"
   }
]
