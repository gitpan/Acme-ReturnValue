[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub is_alive() {\n  my $DEBUG = 0;\n  my $self = attr shift;\n  my $t    = new Proc::ProcessTable;\n\n  for ( @{$t->table} ) {\n    my $cmndline = $_->cmndline;\n    print STDERR \"\\$cmndline = $cmndline\\n\" if $DEBUG;\n    return 1 if defined($cmndline) && $cmndline =~ /$PSTRING/;\n  }\n  return 0;\n}",
      "file" : "/var/tmp/arv_L0cB8x/Watchdog-0.10/Process.pm",
      "package" : "Watchdog::Process"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub is_alive() {\n  my $DEBUG = 0;\n  my $self = attr shift;\n  print STDERR \"Mysql::is_alive()\\n\" if $DEBUG;\n  print STDERR \"\\$DB = $DB\\n\" if $DEBUG;\n\n  my $dsn = \"DBI:mysql:database=$DB;host=$HOST\";\n  $dsn .= \";port=$PORT\" if defined($PORT);\n  print STDERR \"\\$dsn = $dsn\\n\" if $DEBUG;\n  my $dbh = DBI->connect($dsn,undef,undef,{ PrintError => 0 } );\n  \n  my($alive,$error);\n  if ( defined($dbh) ) {\n    ($alive,$error) = ($dbh->ping,$dbh->errstr);\n    $dbh->disconnect;\n  } else {\n    ($alive,$error) = (0,$DBI::errstr);\n  }\n\n  return($alive,$error);\n}",
      "file" : "/var/tmp/arv_L0cB8x/Watchdog-0.10/Mysql.pm",
      "package" : "Watchdog::Mysql"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub id() {\n  my $self = attr shift;\n  my $id = \"$NAME\\@$HOST\";\n  $id .= \":$PORT\" if defined($PORT);\n  $id .= \"/$FILE\" if ($FILE eq '');\n  return $id;\n}",
      "file" : "/var/tmp/arv_L0cB8x/Watchdog-0.10/Base.pm",
      "package" : "Watchdog::Base"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub is_alive() {\n  my $self = attr shift;\n  my $request  = new HTTP::Request(GET => \"http://$HOST:$PORT/$FILE\");\n  my $ua       = new LWP::UserAgent;\n  my $response = $ua->request($request);\n  return $response->is_success ? 1 : 0;\n}",
      "file" : "/var/tmp/arv_L0cB8x/Watchdog-0.10/HTTP.pm",
      "package" : "Watchdog::HTTP"
   }
]
