[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method cache () {\n    return $self->current_comp_class->cache(@_);\n}\n\n1",
      "file" : "/var/tmp/arv_BRF0Q5/Mason-Plugin-Cache-0.05/lib/Mason/Plugin/Cache/Request.pm",
      "package" : "Mason::Plugin::Cache::Request"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method Cache ( $key, $set_options, %cache_options ) {\n    $key = 'Default' if !defined($key);\n    Mason::DynamicFilter->new(\n        filter => sub {\n            $self->cache(%cache_options)->compute( $key, $_[0], $set_options );\n        }\n    );\n}\n\n1",
      "file" : "/var/tmp/arv_BRF0Q5/Mason-Plugin-Cache-0.05/lib/Mason/Plugin/Cache/Filters.pm",
      "package" : "Mason::Plugin::Cache::Filters"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method cache_memoized ($class:) {\n    $class = ref($class) || $class;\n    if (@_) { $memoized{$class} = $_[0] }\n    return $memoized{$class};\n}\n\nmethod cache_defaults ($class:)   { $class->cmeta->interp->cache_defaults }\nmethod cache_root_class ($class:) { $class->cmeta->interp->cache_root_class }\nmethod cache_namespace ($class:)  { $class->cmeta->path }\n\nmethod cache ($class:) {\n    if ( !@_ && $class->cache_memoized ) {\n        return $class->cache_memoized;\n    }\n    my $cache_root_class = $class->cache_root_class;\n    my %options = ( %{ $class->cache_defaults }, @_ );\n    if ( !exists( $options{namespace} ) ) {\n        $options{namespace} = $class->cache_namespace;\n    }\n    my $cache = $cache_root_class->new(%options);\n    if ( !@_ ) {\n        $class->cache_memoized($cache);\n    }\n    return $cache;\n}\n\n1",
      "file" : "/var/tmp/arv_BRF0Q5/Mason-Plugin-Cache-0.05/lib/Mason/Plugin/Cache/Component.pm",
      "package" : "Mason::Plugin::Cache::Component"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method _build_cache_defaults () {\n    return {\n        driver   => 'File',\n        root_dir => catdir( $self->data_dir, 'cache' )\n    };\n}\n\n1",
      "file" : "/var/tmp/arv_BRF0Q5/Mason-Plugin-Cache-0.05/lib/Mason/Plugin/Cache/Interp.pm",
      "package" : "Mason::Plugin::Cache::Interp"
   }
]
