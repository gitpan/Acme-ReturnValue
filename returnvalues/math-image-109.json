[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub next {\n  my ($self) = @_;\n  my $quad = $self->{'quad'};\n  my $x = $self->{'x'};\n  my $y = $self->{'y'};\n\n  for (;;) {\n    if ($quad == 1) {\n      $x--;\n      $y++;\n      if ($x >= 0 && $x >= $self->{'x_min'} && $y <= $self->{'y_max'}) {\n        last;\n      }\n\n      $quad = $self->{'quad'} = 2;\n      $x = min (0,\n                $self->{'x_max'} + 1,\n                $self->{'y_max'} - $self->{'d'} + 1);\n      $y = $self->{'d'} + $x;\n    }\n\n    if ($quad == 2) {\n      $x--;\n      $y--;\n      if ($y >= 0 && $x >= $self->{'x_min'} && $y >= $self->{'y_min'}) {\n        last;\n      }\n\n      $quad = $self->{'quad'} = 3;\n      $y = min (0,\n                $self->{'y_max'} + 1,\n                - $self->{'d'} - $self->{'x_min'} + 1);  \n      $x = - $self->{'d'} - $y;\n    }\n\n    if ($quad == 3) {\n      $x++;\n      $y--;\n      if ($x < 0 && $x <= $self->{'x_max'} && $y >= $self->{'y_min'}) {\n        last;\n      }\n\n      $quad = $self->{'quad'} = 4;\n      $x = max (-1,\n                $self->{'x_min'} - 1,\n                $self->{'d'} + $self->{'y_min'} - 1);  \n      $y = $x - $self->{'d'};\n    }\n\n    if ($quad == 4) {\n      $x++;\n      $y++;\n      if ($y < 0 && $x <= $self->{'x_max'} && $y <= $self->{'y_max'}) {\n        last;\n      }\n\n      $quad = $self->{'quad'} = 1;\n      if (++$self->{'d'} > $self->{'d_max'}) {\n        return;\n      }\n\n      $quad = $self->{'quad'} = 1;\n      $y = max (-1,\n                $self->{'y_min'}-1,\n                $self->{'d'}-$self->{'x_max'}-1);\n      $x = $self->{'d'} - $y;\n    }\n  }\n\n  return ($self->{'x'} = $x,\n          $self->{'y'} = $y);\n}",
      "file" : "/var/tmp/arv_qste9z/math-image-109/lib/App/MathImage/RectByXY.pm",
      "package" : "App::MathImage::RectByXY"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub command_line {\n  my ($class, $mathimage) = @_;\n\n\n  my $gen_options = $mathimage->{'gen_options'};\n  my $width = delete $gen_options->{'width'};\n  my $height = delete $gen_options->{'height'};\n\n\n  my $self = $class->new\n    (fullscreen => (delete $mathimage->{'gui_options'}->{'fullscreen'})||0);\n  $self->signal_connect (destroy => sub { Gtk->main_quit });\n\n  my $draw = $self->{'draw'};\n  if (defined $width) {\n    App::MathImage::Gtk1::Ex::WidgetBits::set_usize_until_mapped\n        ($draw, $width,$height);\n  } else {\n    $self->set_default_size (Gtk::Gdk->screen_width() * .8,\n                             Gtk::Gdk->screen_height() * .8);\n  }\n\n  my $rcstyle = Gtk::RcStyle->new;\n  $rcstyle->modify_color (1,  \n                          'normal',\n                          Gtk::Gdk::Color->parse_color\n                          (delete $gen_options->{'foreground'}));\n  $rcstyle->modify_color (2,  \n                          'normal',\n                          Gtk::Gdk::Color->parse_color\n                          (delete $gen_options->{'background'}));\n  $draw->modify_style ($rcstyle);\n\n  my $path_parameters = delete $gen_options->{'path_parameters'};\n  my $values_parameters = delete $gen_options->{'values_parameters'};\n  $draw->{'path-parameters'} = $path_parameters || {};\n  $draw->{'values-parameters'} = $values_parameters || {};\n\n  $self->show;\n  Gtk->main;\n  return 0;\n}",
      "file" : "/var/tmp/arv_qste9z/math-image-109/lib/App/MathImage/Gtk1/Main.pm",
      "package" : "App::MathImage::Gtk1::Main"
   }
]
