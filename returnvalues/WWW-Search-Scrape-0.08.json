[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub search($$;$)\n{\n    my ($keyword, $results_num, $content) = @_;\n\n    my $num = 0;\n\n    if ($results_num > 100) {\n        carp 'WWW::Search::Scrape::Yahoo can not process results more than 100.';\n        return undef;\n    }\n\n    my @res;\n\n    unless ($content)\n    {\n\t    my $yahoo_result_num;\n\t    if ($results_num < 10) {\n\t\t    $yahoo_result_num = 10;\n\t    } elsif ($results_num < 15) {\n\t\t    $yahoo_result_num = 15;\n\t    } elsif ($results_num < 20) {\n\t\t    $yahoo_result_num = 20;\n\t    } elsif ($results_num < 30) {\n\t\t    $yahoo_result_num = 30;\n\t    } elsif ($results_num < 40) {\n\t\t    $yahoo_result_num = 40;\n\t    } elsif ($results_num < 100) {\n\t\t    $yahoo_result_num = 100;\n\t    }\n\n\t    my $mech = WWW::Mechanize->new(cookie_jar => {});\n\t    $mech->agent_alias('Windows Mozilla');\n\t    $mech->get('http://search.yahoo.com/');\n\t    $mech->submit_form(\n\t\t\t    form_number => 1,\n\t\t\t    fields => {\n\t\t\t    p => $keyword,\n\t\t\t    'sb-top' => 'fr2',\n\t\t\t    ei => 'UTF-8',\n\t\t\t    n => $yahoo_result_num,                                      \n\t\t\t    });\n\t    if ($mech->success) {                                      \n\t\t    $content = $mech->response->decoded_content;\n\t    }\n    }\n    \n    my $tree = HTML::TreeBuilder->new;\n    $tree->parse($content);\n    $tree->eof;\n\n    \n    my @x = $tree->look_down('_tag', 'h3');\n\n    foreach (@x) {\n\t    my ($link) = $_->look_down('_tag', 'a');\n\t    if ($link) {\n\t\t    my $obfuscatedHref = $link->attr('href');\n\t\t    if ($obfuscatedHref =~ /.*\\*\\*(.*)/) {\n\t\t\t    push @res, uri_unescape($1);\n\n\t\t\t    last if (scalar(@res) >= $results_num);\n\n\t\t    }\n\t    }\n    }\n\n    return {num => $num, results => \\@res};\n}",
      "file" : "/var/tmp/arv_xWA5qA/WWW-Search-Scrape-0.08/lib/WWW/Search/Scrape/Yahoo.pm",
      "package" : "WWW::Search::Scrape::Yahoo"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub search($$;$)\n{\n    my ($keyword, $results_num, $content) = @_;\n\n    my $num = 0;\n\n    if ($results_num > 50) {\n        carp 'WWW::Search::Scrape::Bing can not process results more than 50.';\n        return undef;\n    }\n\n    my @res;\n\n    unless ($content)\n    {\n        my $mech = WWW::Mechanize->new(cookie_jar => {});\n        $mech->agent_alias('Windows IE 6');\n        $mech->get('http://www.bing.com/?mkt=en-us');\n        $mech->follow_link(url_regex => qr/^\\/settings.aspx/);\n        $mech->submit_form(\n                           form_number => 1,\n                           fields => {\n                                      rpp => '50',\n                                      sl => '40',\n                                      setplang => 'en-US',\n                                      langall => '0',\n                                      });\n        $mech->submit_form(form_number => 1,\n                           fields => {\n                                      q => $keyword,\n                                      });\n        $content = $mech->response->decoded_content;\n    }\n    \n    my $tree = HTML::TreeBuilder->new;\n    $tree->parse($content);\n    $tree->eof;\n\n    {\n        my ($xx) = $tree->look_down('_tag', 'span',\n                                    sub\n                                    {\n                                        return unless $_[0]->attr('class') && $_[0]->attr('class') eq 'sb_count';\n                                    });\n        return {num => 0, results => undef} unless $xx;\n\n        my @r = $xx->content_list;\n        my ($number) = $r[0] =~ /of ([\\d,]+) res/;\n        $num = join('', split(',', $number));\n    }\n\n    my @x = $tree->look_down('_tag', 'h3');\n\n    foreach (@x) {\n        my ($link) = $_->look_down('_tag', 'a');\n\n        if ($link) {\n            push @res, $link->attr('href') unless $link->attr('href') =~ /^\\//;\n        }\n    }\n\n    return {num => $num, results => \\@res};\n}",
      "file" : "/var/tmp/arv_xWA5qA/WWW-Search-Scrape-0.08/lib/WWW/Search/Scrape/Bing.pm",
      "package" : "WWW::Search::Scrape::Bing"
   }
]
