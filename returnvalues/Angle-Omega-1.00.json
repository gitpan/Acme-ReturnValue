[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub omega {\nmy $input=$_[0];\nopen(ID,\"$input\")or die \"Could not open $input: $!\";\nmy @N;my @CA;my @C;\nwhile(<ID>)\n{\nif($_=~/^ATOM/)\n{\nmy $c=substr($_,13,4);$c=~s/\\s//g;\n\tif ($c eq 'N')\t{ push(@N,$_);}\n\tif ($c eq 'CA')\t{ push(@CA,$_);}\n\tif ($c eq 'C')\t{ push(@C,$_);}\n}\nif ($_=~/^ENDMDL/) {last;}\n}\nmy $k=0;\nprint \"###RESIDUE_NAME\tCHAIN\tOMEGA (in degrees)###\\n\";\nforeach(@N)\n{\nmy $d4=substr($N[$k-1],17,3);$d4=~s/\\s//g;\nmy $ud =find_omega(substr($CA[$k-1],30,8),substr($CA[$k-1],38,8),substr($CA[$k-1],46,8),substr($C[$k-1],30,8),substr($C[$k-1],38,8),substr($C[$k-1],46,8),substr($N[$k],30,8),substr($N[$k],38,8),substr($N[$k],46,8),substr($CA[$k],30,8),substr($CA[$k],38,8),substr($CA[$k],46,8));\n$ud=sprintf(\"%0.1f\", $ud);\nif(substr($N[$k-1],21,1) ne substr($N[$k],21,1)) {$ud=360.0;}\nif ($k>0) {print \"$d4\\t\".substr($N[$k-1],21,1).\"\\t$ud\\n\";}\nif ($k == $#N) { print substr($N[$#N],17,3).\"\\t\".substr($N[$#N],21,1).\"\\t360.0\\n\";}\n$k++;\n}\n\n sub find_omega\n {\n use Math::Trig;\n my $answer=10000;\n my  $x1 = $_[3]-$_[0];\n my  $y1 = $_[4]-$_[1];\n my  $z1 = $_[5]-$_[2];\n my  $x2 = $_[3]-$_[6];\n my  $y2 = $_[4]-$_[7];\n my  $z2 = $_[5]-$_[8];\n my  $x3 = $_[6]-$_[9];\n my  $y3 = $_[7]-$_[10];\n my  $z3 = $_[8]-$_[11];\n\n my  $axbbxc = ((($y1*$z2-$z1*$y2)*($y2*$z3-$z2*$y3))+\n          (($x2*$z1-$x1*$z2)*($x3*$z2-$x2*$z3))+\n          (($x1*$y2-$x2*$y1)*($x2*$y3-$x3*$y2)));\n my  $vaxb = ((($y1*$z2-$z1*$y2)*($y1*$z2-$z1*$y2))+\n        (($x2*$z1-$x1*$z2)*($x2*$z1-$x1*$z2))+\n        (($x1*$y2-$x2*$y1)*($x1*$y2-$x2*$y1)));\n my  $vbxc = ((($y2*$z3-$z2*$y3)*($y2*$z3-$z2*$y3))+\n        (($x3*$z2-$x2*$z3)*($x3*$z2-$x2*$z3))+\n        (($x2*$y3-$x3*$y2)*($x2*$y3-$x3*$y2)));\n $answer = ($axbbxc/sqrt($vaxb*$vbxc));\n $answer = (180*(acos($answer)/3.14));\n my $sign = (($x1*($y2*$z3-$y3*$z2))-($y1*($x2*$z3-$x3*$z2))+($z1*($x2*$y3-$x3*$y2)));\n if($sign>=0)\n {\n  if ($answer>0){ $answer=$answer};\n  if ($answer<0) {$answer=-$answer};\n }\n if($sign<0)\n {\n  if ($answer>=0) {$answer=-$answer};\n  if ($answer<0) {$answer=$answer};\n }\nif($answer>0){\n$answer=180-$answer;\n$answer*=(-1);}\nelse{$answer=180+$answer;}\nif($answer<0){$answer*=(-1);}\nelse{$answer*=(-1);}\n return($answer);\n}\n\n}",
      "file" : "/var/tmp/arv_sx0PSe/Angle-Omega-1.00/lib/Angle/Omega.pm",
      "package" : "Angle::Omega"
   }
]
