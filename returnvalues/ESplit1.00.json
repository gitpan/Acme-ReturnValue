[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub e_split {\n\t\tlocal $^W = 0;\n    \tmy ($sep, $str, $stop_at, $flags) \t= @_;\n\t\t$sep \t\t\t\t\t\t\t\t= '\\s+'\tunless defined $sep;\n    \t$str \t\t\t\t\t\t\t\t= $_\tunless defined $str;\n    \t$str \t\t\t\t\t\t\t\t= ${$str}\n    \t\tif (ref $str eq 'SCALAR');\n\n    \t($stop_at, my $from_end)\t\t\t= $stop_at < 0 ? (0, abs ($stop_at)) : (abs ($stop_at), 0);\n    \t$stop_at ++ \t\t\t\t\t\tif $stop_at \t== 1;\n    \t$from_end++\t\t\t\t\t\t\tif $from_end\t== 1;\n    \t\n    \t$flags\t\t\t\t\t\t\t\t= 0\t\tunless defined $flags;\n    \tmy $include_sep \t\t\t\t\t= ($sep =~ s/^\\(// && $sep =~s/\\)$//);\n\n    \tmy $elems_found\t\t\t\t\t\t= 1;\n    \tmy $remainder\t\t\t\t\t\t= 0;\n    \tmy @vals;\n\t\tmy $l_end;\n\n\t\tif (($sep eq '.') || ($sep eq '.*')) {\n\t\t\treturn wantarray ? @vals : \\@vals;\n\t\t}\n    \tif ($sep eq '') {\n\t\t\t@vals = $include_sep ?  $str =~ /((.))/g \n\t\t\t\t\t\t\t\t :  $str =~/(.)/g;\n\t\t\treturn \twantarray\t ? @vals : \\@vals;\n\t\t}\n\n\t\tstudy ($str) if ($flags & 2);\n\t\tif ($include_sep) {\n\t\t\twhile ($str =~ s/(?:(([\"']).*?(?<!\\\\)(?>\\\\{2})*\\2)($sep|$))|(?:(.*?(?<!\\\\)(?>\\\\{2})*)($sep))//s) {\n\t\t\t\t$l_end = (length $3) || (length $5);\n\t\t\t\tpush @vals, defined $3 ? ($1, $3) : ($4, $5);\n\t\t\t\tunless (++$elems_found ^ $stop_at) {\n\t\t\t\t\t$remainder = length $str;last;\n\t\t\t\t}\n\t\t\t}\n\t\t}else {\n\t\t\twhile ($str =~ s/(?:(([\"']).*?(?<!\\\\)(?>\\\\{2})*\\2)($sep|$))|(?:(.*?(?<!\\\\)(?>\\\\{2})*)($sep))//s) {\n\t\t\t\t$l_end = (length $3) || (length $5);\n\t\t\t\tpush @vals, defined $3 ? $1 : $4;\n\t\t\t\tif (++$elems_found == $stop_at) {\n\t\t\t\t\t$remainder = length $str;last;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($l_end) {\n\t\t\tpush @vals, $str;\n\t\t}elsif ($include_sep){\n\t\t\tpop @vals;\n\t\t}\n\n\t\tmy $m_elem\t\t= $stop_at  || $from_end || $elems_found;\n\t\t$m_elem\t\t\t= $m_elem * 2\t\t\t\t\tif $include_sep;\n\t\t$m_elem\t\t\t= @vals \t+ $include_sep + 1\tif $m_elem  >= @vals;\n\t\t$m_elem\t\t\t= $m_elem\t- $include_sep - 1\tif $m_elem;\n\n\t\tmy ($l_index, $r_index);\n\t\tif ($from_end) {\n\t\t\t$l_index = @vals - $m_elem;\n\t\t\t$r_index = $#vals\n\t\t}else{\n\t\t\t$l_index = 0;\n\t\t\t$r_index = $m_elem - ($remainder > 0) - 1;\n\t\t}\n\t\t\n\t\tunless ($flags & 1) {\n\t\t\tforeach my $item (@vals[$l_index..$r_index]) {\n\t\t\t\tif ($item =~ /^([\"'])/ && $item =~ /(?<!\\\\)$1$/) {\n\t\t\t\t\t$item =~ s/^([\"'])//;\n\t\t\t\t\t$item =~ s/\\\\($1)/$1/g;\n\t\t\t\t\t$item =~ s/$1$//;\n\t\t\t\t}else{\n\t\t\t\t\t$item =~ s/\\\\((?>\\\\{2})*$sep)/$1/g;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($from_end && $l_index) {\n\t\t\tsplice @vals, 0, $l_index, join $include_sep ? '' : $sep, @vals[0..$l_index-1]; \n\t\t}\n\n\t\treturn wantarray ? @vals : \\@vals;\n\t}",
      "file" : "/var/tmp/arv_3rx3di/ESplit.pm",
      "package" : "ESplit"
   }
]
