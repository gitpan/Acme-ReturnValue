[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method redirect () {\n    $self->res->redirect(@_);\n    $self->clear_and_abort();\n}\n\nmethod not_found () {\n    $self->res->status(404);\n    $self->clear_and_abort();\n}\n\n1",
      "file" : "/var/tmp/arv_G9ldpX/Mason-Plugin-PSGIHandler-0.06/lib/Mason/Plugin/PSGIHandler/Request.pm",
      "package" : "Mason::Plugin::PSGIHandler::Request"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method handle_psgi ($env) {\n\n    my $req      = Mason::Plack::Request->new($env);\n    my $response = try {\n        $self->run( { req => $req }, $self->psgi_comp_path($req), $self->psgi_parameters($req) )\n          ->plack_response;\n    }\n    catch {\n        my $err = $_;\n        if ( blessed($err) && $err->isa('Mason::Exception::TopLevelNotFound') ) {\n            Mason::Plack::Response->new(404);\n        }\n        else {\n            local $SIG{__DIE__} = undef;\n            die $err;\n        }\n    };\n    return $response->finalize;\n}\n\nmethod psgi_comp_path ($req) {\n    my $comp_path = $req->path;\n    $comp_path = \"/$comp_path\" if substr( $comp_path, 0, 1 ) ne '/';\n    return $comp_path;\n}\n\nmethod psgi_parameters ($req) {\n    return $req->parameters;\n}\n\n1",
      "file" : "/var/tmp/arv_G9ldpX/Mason-Plugin-PSGIHandler-0.06/lib/Mason/Plugin/PSGIHandler/Interp.pm",
      "package" : "Mason::Plugin::PSGIHandler::Interp"
   }
]
