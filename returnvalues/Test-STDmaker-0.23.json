[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "AUTOLOAD\n{\n    our $AUTOLOAD;\n    return '' if $AUTOLOAD =~ /DESTROY/;\n    my $self = shift @_;\n    $self->format( @_ );\n\n}\n\n\n\n\nsub default_template\n{\n    <<'EOF';\n\n}\n\n\nsub extension { '.pm' }\nsub file_out { $_[0]->{std_file} }\n\n\nsub finish\n{\n    my ($self) = @_;\n    my $module = ref($self);\n    my $module_db = $self->{$module};\n    my $std_db = $self->{std_db};\n\n    my $dbh = $module_db->{dbh};\n       \n    my $fields = \"\\n\";\n    my @fields = (\n        'See_Also', $self->{'See_Also'},\n        'Copyright', $self->{'Copyright'},\n        'HTML', $self->{'HTML'}\n    );\n    $fields .= ${$dbh->encode_field(\\@fields)};\n    $fields .= \"\\n\\n\";\n    $fields  = $module_db->{fields} . $fields;\n    $module_db->{fields} = '';\n\n    my $record = '';\n    $record .= ${$dbh->encode_record(\\$fields)};\n    $record = \"__DATA__\\n\" . $record;\n\n    my $header = <<\"EOF\";      \n\n    $header .= <<'EOF';      \n\n    $self->{Trace_Requirement_Table} = \"No requirements specified.\\n\";\n    if( $module_db->{trace_req} ) {\n       $self->{Trace_Requirement_Table} = Text::Column->format_hash_table( $module_db->{trace_req}, [64,64], [\"Requirement\", \"Test\"] );\n       $module_db->{trace_req} = {};\n    }\n\n    $self->{Trace_Test_Table} = '';\n    if( $module_db->{trace_test} ) {\n       $self->{Trace_Test_Table} = Text::Column->format_hash_table( $module_db->{trace_test}, [64,64], [\"Test\", \"Requirement\"] );\n       $module_db->{trace_test} = {};\n    }\n\n    $self->{Test_Descriptions} =~ s/\\n \\n/\\n\\n/g; \n \n    my ($error, $template_contents);\n    if( $self->{Detail_Template} ) {\n        $error = File::Package->load_package( $self->{Detail_Template} );\n        no strict;\n        my $data_handle = \\*{$self->{Detail_Template} . '::DATA'};\n        use strict;\n        my $position = tell($data_handle);\n        $template_contents = join '',<$data_handle>;\n        seek($data_handle,0,0);\n    }\n    $template_contents = default_template() unless $template_contents;\n\n    my @vars = qw(Name UUT Revision Date End_User Author Classification\n      Copyright See_Also Test_Descriptions Version\n      Trace_Requirement_Table Trace_Test_Table HTML);\n\n    Text::Replace->replace_variables(\\$template_contents, $self, \\@vars);\n\n    $template_contents =~ s/\\n\\\\=/\\n=/g; \n    $template_contents =~ s/\\n \\n/\\n\\n/g; \n\n    $header . $template_contents . $record;\n\n}\n\n\nsub format\n{\n\n    my ($self, $command, $data) = @_;\n    my $module = ref($self);\n    my $module_db = $self->{$module};\n\n    my $precision   = $self->{precision};\n    $precision = 2 unless $precision;\n    $command = sprintf(\"%${precision}s\", $command);\n    my $field = '';\n    $field .= ${$self->{$module}->{dbh}->encode_field( [$command, $data])};            \n    $field .= \"\\n\" if ($command =~ /\\s*ok\\s*/ | $command =~ /\\s*T\\s*/);\n    $self->{$module}->{fields} .= $field;\n    $field =~ s/\\n/\\n /g;   \n    $field =~ s/\\n \\n/\\n/g; \n    $module_db->{test} .= $field;\n    ''\n}\n\nsub start\n{\n    my ($self) = @_;\n    my $module = ref($self);\n    my $module_db = $self->{$module};\n\n    $module_db->{trace_req} = {};\n    $module_db->{trace_test} = {};\n    $module_db->{requirements} = [];\n    $self->{Test_Descriptions} = '';\n    $module_db->{test} = '';\n\n    my $dbh = bless {},'Tie::Form';\n    $dbh->{options}->{'Tie::Form'} = new Tie::Form;\n\n    my $fields = \"\\n\";\n    my $fspec_out = $self->{options}->{fspec_out};\n    $fspec_out = 'Unix' unless $fspec_out;\n    my $file_out;\n    foreach my $item (@{$self->{required_data}}) {\n        next if $item eq 'Copyright' || $item eq 'See_Also' || $item eq 'HTML';\n        if( $item eq 'File_Spec') {\n             $fields .= ${$dbh->encode_field( ['File_Spec', $fspec_out])};\n             next;\n        }\n        elsif( $item eq 'Temp') {\n            $file_out = File::AnySpec->fspec2os($fspec_out, $self->{Temp});\n            $fields .= ${$dbh->encode_field( ['Temp', $file_out])};\n            next;\n        }\n        $fields .= ${$dbh->encode_field( [$item, $self->{$item}] )} ;\n    }\n\n    my ($package);\n    foreach my $generator (@{$self->{generators}}) {\n        $package = \"Test::STDmaker::\" . $generator;        \n        next if $package->can( 'file_out' );\n        $file_out = File::AnySpec->fspec2os($fspec_out, $self->{$generator});\n        $fields .= ${$dbh->encode_field( [$generator, $file_out] )};\n    }\n\n    $fields .= \"\\n\\n\";\n    $module_db->{fields} = $fields;\n    $module_db->{dbh} = $dbh;\n    ''\n\n} \n\n1",
      "file" : "/var/tmp/arv_IFLcNv/Test-STDmaker-0.23/lib/Test/STDmaker/STD.pm",
      "package" : "Test::STDmaker::STD"
   }
]
