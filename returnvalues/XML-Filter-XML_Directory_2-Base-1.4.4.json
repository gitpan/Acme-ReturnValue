[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\npackage XML::Filter::XML_Directory_2::Base;\nuse strict;\n\nuse Carp;\nuse Exporter;\nuse Digest::MD5 qw (md5_hex);\nuse XML::Filter::XML_Directory_Pruner '1.3';\n\n$XML::Filter::XML_Directory_2::Base::VERSION   = '1.4.4';\n@XML::Filter::XML_Directory_2::Base::ISA       = qw ( XML::Filter::XML_Directory_Pruner );\n@XML::Filter::XML_Directory_2::Base::EXPORT    = qw ();\n@XML::Filter::XML_Directory_2::Base::EXPORT_OK = qw ();\n\n\nsub attributes {\n  my $pkg   = shift;\n  my %attrs = @_;\n  \n  my %saxtributes = ();\n  \n  foreach (sort keys %attrs) {\n    $saxtributes{\"{}$_\"} = { \n                            Name         => $_,\n                            Value        => $attrs{$_},\n                            Prefix       => \"\",\n                            LocalName    => $_,\n                            NameSpaceURI => \"\",\n                           };\n  }\n\n  return (Attributes=>\\%saxtributes);\n}\n\n\nsub encoding {\n  my $self = shift;\n  my $type = shift;\n\n  if ($type) {\n    $self->{__PACKAGE__.'__type'} = $type;\n  }\n\n  return $self->{__PACKAGE__.'__type'} || \"UTF-8\";\n}\n\n\nsub set_encoding {\n  my $self = shift;\n  $self->encoding(@_);\n}\n\n\nsub exclude_root {\n  my $self = shift;\n  my $bool = shift;\n\n  if (defined($bool)) {\n    $self->{__PACKAGE__.'__includeroot'} = ($bool) ? 0 : 1;\n  }\n\n  return $self->{__PACKAGE__.'__includeroot'};\n}\n\n\nsub start_level {\n  my $self = shift;\n  return $self->{__PACKAGE__.'__start'};\n}\n\n\nsub cwd {\n  my $self = shift;\n  return $self->{__PACKAGE__.'__cwd'};\n}\n\n\nsub current_directory {\n  return $_[0]->cwd();\n}\n\n\nsub current_location {\n  my $self = shift;\n  return $self->{__PACKAGE__.'__loc'};\n}\n\n\nsub handler_events { return (); }\n\nsub set_handlers {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    return undef;\n  }\n\n  foreach ($self->handler_events()) {\n    next if (! $args->{$_});\n\n    if (! UNIVERSAL::can($args->{$_},\"parse_uri\")) {\n      carp \"Handler must define a 'parse_uri' method.\\n\";\n      next;\n    }\n\n    $self->{__PACKAGE__.'__handlers'}{$_} = $args->{$_};\n  }\n\n  return 1;\n}\n\n\nsub retrieve_handler {\n  my $self = shift;\n  return $self->{__PACKAGE__.'__handlers'}{$_[0]};\n}\n\nsub callback_events { return (); }\n\n\nsub set_callbacks {\n  my $self = shift;\n  my $args = shift;\n\n  if (ref($args) ne \"HASH\") {\n    return undef;\n  }\n\n  foreach ($self->callback_events()) {\n    next if (! $args->{$_});\n\n    if (ref($args->{$_}) ne \"CODE\") {\n      carp \"Not a CODE reference\";\n      return undef;\n    }\n\n    $self->{__PACKAGE__.'__callbacks'}{$_} = $args->{$_};\n  }\n\n  return 1;\n}\n\n\nsub retrieve_callback {\n  my $self = shift;\n  return $self->{__PACKAGE__.'__callbacks'}{$_[0]};\n}\n\n\nsub generate_id {\n  my $self = shift;\n  return \"ID\".&md5_hex($self->{__PACKAGE__.'__loc'});\n}\n\n\nsub build_uri {\n  my $self = shift;\n  my $data = shift;\n\n  my $uri = $self->{__PACKAGE__.'__path'}.$self->{__PACKAGE__.'__cwd'};\n\n  if ($data->{Name} eq \"file\") {\n    $uri .= \"/$data->{Attributes}->{'{}name'}->{Value}\";\n  }\n\n  return $uri;\n}\n\n\nsub make_link {\n  my $self = shift;\n  my $data = shift;\n\n  my $link = $self->build_uri($data);\n\n  if (my $c = $self->retrieve_callback(\"link\")) {\n    $link = &$c($link);\n  }\n\n  return $link;\n}\n\n\nsub on_enter_start_element {\n  my $self = shift;\n  my $data = shift;\n\n  $self->SUPER::on_enter_start_element($data);\n  $self->{__PACKAGE__.'__last'} = $data->{Name};\n\n  if ($data->{Name} eq \"head\") {\n      $self->{__PACKAGE__.'__head'} = 1;\n  }\n\n  if ($data->{Name} =~ /^(directory|file)$/) {\n    $self->{__PACKAGE__.'__'.$1} ++;\n  }\n\n\n  if ((! $self->{__PACKAGE__.'__start'}) && ($data->{Name} =~ /^(file|directory)$/)) {\n\n    if (! exists($self->{__PACKAGE__.'__includeroot'})) {\n      $self->{__PACKAGE__.'__start'} = $self->current_level();\n      return 1;\n    }\n\n    else {\n\n      if ((! $self->{__PACKAGE__.'__includeroot'}) &&\n\t  (($self->{__PACKAGE__.'__file'} == 1) || ($self->{__PACKAGE__.'__directory'} == 2))) {\n\n\t$self->{__PACKAGE__.'__start'} = $self->current_level();\n\t$self->grow_cwd($data);\n\n\t$self->compare($data);\n\n\tif (! $self->skip_level()) {\n\t  return 1;\n\t}\n\n\t$self->prune_cwd($data);\n\treturn 0;\n      }\n    }\n\n  }\n\n\n  if (! $self->{__PACKAGE__.'__start'}) {\n    return 0;\n  }\n\n  $self->compare($data);\n\n  if ($self->skip_level()) {\n    return 0;\n  }\n\n  $self->grow_cwd($data);\n  return 1;\n}\n\n\nsub on_enter_end_element {\n  my $self = shift;\n  my $data = shift;\n\n  if ($data->{Name} eq \"head\") {\n    $self->{__PACKAGE__.'__head'} = 0;\n  }\n\n  return 1;\n}\n\n\nsub on_exit_end_element {\n  my $self = shift;\n  my $data = shift;\n\n  unless ($self->skip_level()) {\n    $self->prune_cwd($data);\n  }\n\n  if ($data->{Name} =~ /^(directory|file)$/) {\n    $self->{__PACKAGE__.'__'.$1} --;\n  }\n\n  $self->SUPER::on_exit_end_element($data);\n  return 1;\n}\n\n\nsub on_characters {\n  my $self = shift;\n  my $data = shift;\n\n  if ($self->{__PACKAGE__.'__head'}) {\n    $self->{ __PACKAGE__.'__'.$self->{__PACKAGE__.'__last'} } ||= $data->{Data};\n  }\n\n  return 1;\n}\n\n\nsub grow_cwd {\n  my $self = shift;\n  my $data = shift;\n\n  if ($data->{Name} =~ /^(file|directory)$/) {\n    $self->{__PACKAGE__.'__loc'} .= \"/$data->{Attributes}->{'{}name'}->{Value}\";\n  }\n\n  if ($data->{Name} eq \"directory\") {\n    $self->{__PACKAGE__.'__cwd'} .= \"/$data->{Attributes}->{'{}name'}->{Value}\";\n  }\n\n  return 1;\n}\n\n\nsub prune_cwd {\n  my $self = shift;\n  my $data = shift;\n\n  if ($data->{Name} =~ /^(file|directory)$/) {\n    $self->{__PACKAGE__.'__loc'} =~ s/^(.*)\\/([^\\/]+)$/$1/;\n  }\n\n  if ($data->{Name} eq \"directory\") {\n    $self->{__PACKAGE__.'__cwd'} =~ s/^(.*)\\/([^\\/]+)$/$1/;\n  }\n\n\n  return 1;\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv_nkQodH/XML-Filter-XML_Directory_2-Base-1.4.4/lib/XML/Filter/XML_Directory_2/Base.pm",
      "package" : "XML::Filter::XML_Directory_2::Base"
   }
]
