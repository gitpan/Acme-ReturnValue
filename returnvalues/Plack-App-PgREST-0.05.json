[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method select($param, $args) {\n    use Data::Dumper;\n    my $req = encode_json({\n        collection => $args->{collection},\n        l => n($param->get('l')),\n        sk => n($param->get('sk')),\n        c => n($param->get('c')),\n        s => j($param->get('s')),\n        q => j($param->get('q')),\n    });\n    my $ary_ref = $self->{dbh}->selectall_arrayref(\"select postgrest_select(?)\", {}, $req);\n    if (my $callback = $param->get('callback')) {\n        $callback =~ s/[^\\w\\[\\]\\.]//g;\n        return [200, ['Content-Type', 'application/javascript; charset=UTF-8'],\n            [\n                \";($callback)($ary_ref->[0][0]);\"\n            ]\n        ];\n    }\n    return [200, ['Content-Type', 'application/json; charset=UTF-8'], [$ary_ref->[0][0]]];\n}\n\nmethod _mk_func($name, $param, $ret, $body, $lang, $dont_compile) {\n    my (@params, @args);\n    $lang ||= 'plv8';\n    while( my ($name, $type) = splice(@$param, 0, 2) ) {\n        push @params, \"$name $type\";\n        if ($type eq 'pgrest_json') {\n            push @args, \"JSON.parse($name)\"\n        }\n        else {\n            push @args, $name;\n        }\n    }\n\n    my $compiled = '';\n    if ($lang eq 'plls' && !$dont_compile) {\n        $lang = 'plv8';\n\n        $compiled = $self->{dbh}->selectall_arrayref(\"select jsapply(?,?)\", {}, \"LiveScript.compile\", encode_json([$body, {bare => 1}]))->[0][0];\n        $compiled =~ s/;$//;\n    }\n\n    $compiled ||= $body;\n    $body = \"JSON.stringify((eval($compiled))(@{[ join(',', @args) ]}));\";\n    return qq<\nSET client_min_messages TO WARNING;\nDO \\$PGREST_EOF\\$ BEGIN\n\nDROP FUNCTION IF EXISTS $name (@{[ join(',', @params) ]});\n\nCREATE FUNCTION $name (@{[ join(',', @params) ]}) RETURNS $ret AS \\$PGREST_$name\\$\nreturn $body\n\\$PGREST_$name\\$ LANGUAGE $lang IMMUTABLE STRICT;\n\nEXCEPTION WHEN OTHERS THEN END; \\$PGREST_EOF\\$;\n    >;\n}\n\nmethod bootstrap {\n\n    ($self->{pg_version}) = $self->{dbh}->selectall_arrayref(\"select version()\")->[0][0] =~ m/PostgreSQL ([\\d\\.]+)/;\n    if ($self->{pg_version} ge '9.1.0') {\n        $self->{dbh}->do(<<'EOF');\n    }\n    else {\n        \n        my $dir = `pg_config --sharedir`;\n        chomp $dir;\n        use File::Glob qw(bsd_glob);\n        my @init_files = sort { $b cmp $a } bsd_glob(\"$dir/contrib/plv8*.sql\");\n        if (@init_files > 1) {\n            warn \"==> more than one version of plv8 found: \".join(',',@init_files);\n        }\n\n        eval {\n            $self->{dbh}->do(scalar read_file($init_files[0]));\n        };\n\n        $self->{dbh}->do('rollback') if $self->{dbh}->err;\n    }\n    \n    \n    if ($self->{pg_version} lt '9.2.0') {\n        $self->{dbh}->do(<<'EOF');\n    }\n    else {\n        $self->{dbh}->do(<<'EOF');\n    }\n\n    $self->{dbh}->do($self->_mk_func(\"jseval\", [str => \"text\"], \"text\", << 'END', 'plv8'));\n\n    $self->{dbh}->do($self->_mk_func(\"jsapply\", [str => \"text\", \"args\" => \"pgrest_json\"], \"pgrest_json\", << 'END', 'plv8'));\n\n    my $ls = read_file( dist_file('Plack-App-PgREST',  'livescript.js') );\n    $self->{dbh}->do($self->_mk_func(\"lsbootstrap\", [], \"pgrest_json\", << \"END\", 'plv8'));\n    $self->{dbh}->do(\"select lsbootstrap()\");\n\n    $self->{dbh}->do($self->_mk_func(\"jsevalit\", [str => \"text\"], \"text\", << 'END', 'plls'));\n\n    $self->{dbh}->do($self->_mk_func(\"postgrest_select\", [req => \"pgrest_json\"], \"pgrest_json\", << 'END', 'plls'));\n}\n\nmethod to_app {\n    unless ($self->{dbh}) {\n        require DBIx::Connector;\n        $self->{conn} = DBIx::Connector->new($self->{dsn}, '', '', {\n          RaiseError => 1,\n          AutoCommit => 1,\n        });\n        $self->{dbh} = $self->{conn}->dbh;\n    }\n    die unless $self->{dbh};\n    $self->bootstrap;\n    my $router = router {\n        resource '/collections/{collection}' => sub {\n            GET  { $self->select(Plack::Request->new($_[0])->parameters, $_[1]) };\n        };\n    };\n\n    builder {\n        sub { $router->dispatch(shift) };\n    };\n}\n\n1",
      "file" : "/var/tmp/arv_TuMJCU/Plack-App-PgREST-0.05/lib/Plack/App/PgREST.pm",
      "package" : "Plack::App::PgREST"
   }
]
