[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method new($class: ) {\n    my $self = bless {}, $class;\n    return $self;\n}\n\nmethod current {\n    my $title = `audtool2 current-song-tuple-data title`;\n    chomp($title);\n    my $artist = `audtool2 current-song-tuple-data artist`;\n    chomp($artist);\n    my $album = `audtool2 current-song-tuple-data album`;\n    chomp($album);\n    my $genre = `audtool2 current-song-tuple-data genre`;\n    chomp($genre);\n    my $bitrate = `audtool2 current-song-tuple-data bitrate`;\n    chomp($bitrate);\n    my $file = `audtool2 current-song-tuple-data file-path`;\n    chomp($file);\n    my $length = `audtool2 current-song-length`;\n    chomp($length);\n\n    my $event = {\n        'title'    => $title,\n        'artist'   => $artist,\n        'album'   => $album,\n        'genre'   => $genre,\n        'file'    => $file,\n        'length'  => $length,\n        'bitrate' => $bitrate\n    };\n    return $event;\n}\n\nmethod next {\n    `audtool2 playlist-advance`;\n    return $self->current;\n}\n\nmethod back {\n    `audtool2 playlist-reverse`;\n    return $self->current;\n}\n\nmethod add {\n    my $url = $_[1];\n    `audtool2 playlist-addurl $url`;\n    return 1;\n}\n\nmethod listlength {\n    my $length = `audtool2 playlist-length`;\n    chomp($length);\n    return $length;\n}\n\nmethod display {\n    my $playlist = `audtool2 playlist-display`;\n    my @pl = split( \"\\n\", $playlist );\n    return @pl;\n}\n\nmethod  position {\n    my $position = `audtool2 playlist-position`;\n    chomp($position);\n    return $position;\n}\n\nmethod jump {\n    my $position = $_[1];\n    `audtool2 playlist-jump $position`;\n    return $self->current;\n}\n\nmethod clear {\n    `audtool2 playlist-clear`;\n    return 1;\n}\n\nmethod repeat {\n    my $toggle = $_[1];\n    if ($toggle) {\n        `audtool2 playlist-repeat-toggle $toggle`;\n        return 1;\n    }\n    else {\n        my $status = `audtool2 playlist-repeat-status`;\n        chomp($status);\n        return $status;\n    }\n}\n\nmethod shuffle {\n    my $toggle = $_[1];\n    if ($toggle) {\n        `audtool2 playlist-shuffle-toggle $toggle`;\n        return 1;\n    }\n    else {\n        my $status = `audtool2 playlist-shuffle-status`;\n        chomp($status);\n        return $status;\n    }\n}\n\nmethod playlist {\n    my $name = `audtool2 current-playlist-name`;\n    chomp($name);\n    return $name;\n}\n\nmethod play {\n    `audtool2 playback-play`;\n    return $self->current;\n}\n\nmethod pause {\n    `audtool2 playback-pause`;\n    return 1;\n}\n\nmethod stop {\n    `audtool2 playback-stop`;\n    return 1;\n}\n\nmethod get_volume {\n    my $volume = `audtool2 get-volume`;\n    chomp($volume);\n    return $volume;\n}\n\nmethod set_volume {\n    my $volume = $_[1];\n    `audtool2 set-volume $volume`;\n    return 1;\n}\n\nmethod eq {\n    my $param = $_[1];\n    if ($param) {\n            if ( $param =~ /(Y|1|on)/i )  { $param = 'yes'; }\n            elsif ( $param =~ /(N|0|off)/i ) { $param = 'no'; }\n            else { return 0; }\n        `audtool2 equalizer-activate $param`;\n        return 1;\n    }\n    else {\n        my $eq = `audtool2 equalizer-get`;\n        chomp($eq);\n        return $eq;\n    }\n}\n\nmethod version {\n    my $version = `audtool2 version`;\n    chomp($version);\n    return $version;\n}\n\n1",
      "file" : "/var/tmp/arv_udMYvm/Audio-Audacious-0.932/lib/Audio/Audacious.pm",
      "package" : "Audio::Audacious"
   }
]
