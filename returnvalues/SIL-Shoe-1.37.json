[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$VERSION = 1.37",
      "file" : "/var/tmp/arv_UZ_l9W/SIL-Shoe-1.37/lib/SIL/Shoe.pm",
      "package" : "SIL::Shoe"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub out_dtd\n{\n    my ($self, $mult, $mark, @list) = @_;\n\n    return unless ($self->{'dtdfh'});\n    push(@list, $self->{'opts'}{'a'}) if ($mult);\n    if (@list)\n    {\n        $self->{'dtdfh'}->print(\"<!ELEMENT $mark (\" . join(\"|\", @list). \")*>\\n\");\n        $self->{'dtdfh'}->print(\"<!ATTLIST $mark $self->{'opts'}{'a'} CDATA #IMPLIED>\\n\") unless ($mult);\n    }\n    else\n    { $self->{'dtdfh'}->print(\"<!ELEMENT $mark (#PCDATA)>\\n\");\n}\n\nsub end_dtd\n{\n    my ($self) = @_;\n\n    return unless ($self->{'dtdfh'});\n    $self->{'dtdfh'}->print(\"]>\\n\\n\");\n    $self->{'dtdfh'}->close unless ($self->{'dtdfh'} eq $self->{'outfh'});\n    $self->{'dtdfh'} = undef;\n}\n\n\n\nsub init_format\n{\n    my ($self) = @_;\n    $self->{'outf'}->print(\"<shoebox-format>\\n\");\n}\n\nsub end_format\n{\n    my ($self) = @_;\n    $self->{'outf'}->print(\"</shoebox-format>\\n\");\n}\n\nsub output_format\n{\n    my ($self, $sfm, $marker, $lang, $font, $charpar, $interlin) = @_;\n    my ($fh) = $self->{'outf'};\n\n    $fh->print(\"  <marker name=\\\"$marker\\\" style=\\\"$charpar\\\">\\n\";\n    $fh->print(\"    <language>$lang</language>\\n\";\n    $fh->print(\"    <font size='$font->{'size'}'\");\n    $fh->print(\" style='$font->{'bold'}$font->{'italic'}'\") if ($font->{'bold'} || $font->{'italic'});\n    $fh->print(\" color='$font->{'color'}'\") if ($font->{'color'});\n    $fh->print(\">$font->{'name'}</font>\\n\");\n    $fh->print(\"    <interlinear level='$interlin'/>\\n\") if ($interlin);\n    $fh->print(\"    <original-marker>\" . protect($sfm) . \"</original-marker>\\n\") if ($sfm ne $marker);\n    $fh->print(\"  </marker>\\n\");\n}\n\nsub init_interlin\n{\n    my ($self) = @_;\n    $self->{'outf'}->print((\" \" x $self->{'indent'}) . \"<interlinear-block>\\n\");\n    $self->{'indent'} += 2;\n}\n\nsub end_interlin\n{\n    my ($self) = @_;\n    $self->{'indent'} -= 2;\n    $self->{'outf'}->print((\" \" x $self->{'indent'}) . \"</interlinear-block>\\n\");\n}\n\nsub init_marker\n{\n    my ($self, $mult, $marker, $dat, $children, $noinline) = @_;\n    my ($fh) = $self->{'outfh'};\n\n    if ($mult)\n    {\n        $fh->print(\" \" x $self->{'indent'});\n        $fh->print(\"<$marker>\\n\");\n        $self->{'indent'} += 2;\n        $fh->print(\" \" x $self->{'indent'});\n        $fh->print(\"<$self->{'opts'}{'a'}>\" . protect($dat)) if ($dat || !$noinline);\n        if ($noinline)\n        {\n            $fh->print(\"</$self->{'opts'}{'a'}\\n\");\n            unless ($children)\n            {\n                $self->{'indent'} -= 2;\n                $fh->print(\" \" x $self->{'indent'});\n                $fh->print(\"</$marker>\\n\");\n            }\n        }\n        else\n        {\n            $self->{'inline'} = 1;\n            unshift(@{$self->{'stack'}, $self->{'opts'}{'a'});\n            unshift(@{$self->{'stack'}, $marker);\n        }\n    }\n    elsif ($children)\n    {\n        $fh->print(\" \" x $self->{'indent'});\n        $self->{'indent'} += 2;\n        $fh->print(\"<$marker $self->{'opts'}{'a'}=\\\"\". protect($dat) . \"\\\">\\n\";\n        unshift (@{$self->{'stack'}, $marker);\n    }\n    elsif (!$dat)\n    {\n        $fh->print(\" \" x $self->{'indent'});\n        $fh->print(\"<$marker/>\\n\");\n    }\n    else\n    {\n        $fh->print(\" \" x $self->{'indent'});\n        $fh->print(\"<$marker>\" . protect($dat) . \"</$marker>\\n\");\n    }\n}\n\nsub end_marker\n{\n    my ($self) = @_;\n    my ($fh) = $self->{'outf'};\n\n    return unless (scalar @{$self->{'stack'}});\n    if ($self->{'inline'})\n    { $self->{'inline'} = 0; }\n    else\n    {\n        $self->{'indent'} -= 2;\n        $fh->print(\" \" x $self->{'indent'});\n    }\n    $fh->print(\"</\" . shift(@{$self->{'stack'}}) . \">\\n\");\n}\n\nsub start_inline\n{\n    my ($self, $marker) = @_;\n    $self->{'outf'}->print(\"<$marker>\");\n}\n\nsub out_inline\n{\n    my ($self, $dat) = @_;\n    $self->{'outf'}->print(protect($dat));\n}\n\nsub end_inline\n{\n    my ($self, $marker) = @_;\n    $self->{'outf'}->print(\"</$marker>\\n\");\n}\n",
      "file" : "/var/tmp/arv_UZ_l9W/SIL-Shoe-1.37/lib/SIL/Shoe/Convert/XML.pm",
      "package" : "SIL::Shoe::Convert::XML"
   }
]
