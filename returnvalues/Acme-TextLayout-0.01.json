[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub left {\n    my ($self, $char) = @_;\n    my @r = @{$.Ranges{$char}};\n    return () if $r[2] == 0;\n    return @{$.Left{$char}} if defined $.Left{$char};\n    my @keys = keys(%.Ranges);\n    my @d;\n    map {\n        if ($_ ne $char) {\n        my @other = @{$.Ranges{$_}};\n        push(@d, $_) if ./_in_y(\\@r, \\@other) && \n            ($other[3] == ($r[2]-1));\n        }\n    } @keys;\n    $.Left{$char} = \\@d;\n    return @d;\n}\n\n=head2 B<right>\n\n  @r = $tl->right($char);\n\nReturn a list (possibly empty) of each of the characters to\nthe right (and adjacent) to the specified character.\n\n=cut\n\nsub right {\n    my ($self, $char) = @_;\n    my @r = @{$.Ranges{$char}};\n    return () if $r[2] == ./width();\n    return @{$.Right{$char}} if defined $.Right{$char};\n    my @keys = keys(%.Ranges);\n    my @d;\n    map {\n        if ($_ ne $char) {\n        my @other = @{$.Ranges{$_}};\n        push(@d, $_) if ./_in_y(\\@r, \\@other) && \n            ($other[2] == ($r[3]+1));\n        }\n    } @keys;\n    $.Right{$char} = \\@d;\n    return @d;\n}\n\n=head2 B<range_as_percent>\n\n  ($xpercent, $ypercent) = $tl->range_as_percent($char);\n\nReturns the percentage of x and y that this character consumes\nin the I<pattern>. Number returned for each is <= 1.0.\n\n=cut\n\nsub range_as_percent {\n    my ($self, $char) = @_;\n    my ($ymin, $ymax, $xmin, $xmax) = ./range($char);\n    my $width  = ./width();\n    my $height = ./height();\n    return (($xmax-$xmin+1)/$width, ($ymax-$ymin+1)/$height);\n}\n\n\nsub order {\n    my ($self, $line) = @_;\n    $line = 0 unless defined $line;\n    die \"$.Class - in order, line $line is too big!\\n\"\n        unless $line < ./height();\n    my $text = $.textRef[$line];\n    return unless defined $text;\n    my %Chars;\n    my @Chars;\n    my @chars = split('', $text);\n    map {\n        unless (defined $Chars{$_}) {\n            push(@Chars, $_);\n            $Chars{$_} = 1;\n        }\n    } @chars;\n    return @Chars;\n}\n\n=head2 B<only_one>\n\n  $stat = $tl->only_one();\n\nReturns 1 if there is only a single character in your pattern,\n0 if there are more.\n\n=cut\n\nsub only_one {\n    my ($self) = @_;\n    return ./order() == 1;\n}\n\n\n1; \n",
      "file" : "/var/tmp/arv_kUPK4C/Acme-TextLayout-0.01/lib/Acme/TextLayout.pm",
      "package" : "Acme::TextLayout"
   }
]
