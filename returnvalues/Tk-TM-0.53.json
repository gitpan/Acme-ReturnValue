[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub Focus {\n  my ($self) =(shift);\n  my $do  =$self->{-do};\n  return if !$do;\n  if (ref($do) && defined($do->{-dsrfd})) {\n     my $wg =$self->{-widgets}->[$do->{-dsrfd}];\n     return $wg->focusForce() if ref($wg)\n  }\n  else {\n     foreach my $wg (@{$self->{-widgets}}) {\n        return $wg->focusForce() if ref($wg)\n     }\n  }\n  $self->focusForce()\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/wgBlank.pm",
      "package" : "Tk::TM::wgBlank"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub Populate {\n my ($self, $args) = (shift,shift);\n $args->{-mdmnu}='';\n $self->SUPER::Populate($args,@_)\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/wgActionBar.pm",
      "package" : "Tk::TM::wgActionBar"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DBILogin {\n my $scr =(ref($_[0]) ? shift : undef);\n my ($dsn, $usr, $psw, $opt, $dbopt) =@_;\n    $opt  =$opt   ||'';\n    $dbopt=$dbopt || {};\n my $dbh;\n eval('use DBI');\n my $dlg   =$scr ? (ref($scr) eq 'ARRAY' ? $scr->[0] : $scr) \n                 : new Tk::MainWindow(-title=>Tk::TM::Lang::txtMsg('Login')); \n my $rspfd;\n my $dsnlb =$dlg->Label(-text=>Tk::TM::Lang::txtMsg('Database'))\n                ->grid(-row=>0, -column=>0, -sticky=>'w');\n my $dsnfd =$dlg->Entry(-textvariable=>\\$dsn)\n                ->grid(-row=>0, -column=>1, -columnspan=>2, -sticky=>'we');\n            $dsnfd->configure(-state=>'disabled', -bg=>$dlg->cget(-bg)) if $opt !~/dsn|edit/i;\n my $usrlb =$dlg->Label(-text=>Tk::TM::Lang::txtMsg('User'))\n                ->grid(-row=>1, -column=>0, -sticky=>'w');\n my $usrfd =$dlg->Entry(-textvariable=>\\$usr)\n                ->grid(-row=>1, -column=>1, -columnspan=>2, -sticky=>'we');\n my $pswlb =$dlg->Label(-text=>Tk::TM::Lang::txtMsg('Password'))\n                ->grid(-row=>2, -column=>0, -sticky=>'w');\n my $pswfd =$dlg->Entry(-textvariable=>\\$psw,-show=>'*')\n                ->grid(-row=>2, -column=>1, -columnspan=>2, -sticky=>'we');\n my $btnok =$dlg->Button(-text=>Tk::TM::Lang::txtMsg($scr ? 'Login' : 'Ok')\n                        ,-command=>\n                           sub{$rspfd->configure(-text=>'Connecting...');\n                               my $curs =$dlg->cget(-cursor);\n                               $dlg->configure(-cursor=>$CursorWait);\n                               $dlg->update;\n                               $dlg->configure(-cursor=>$curs);\n                               if (eval {$dbh =DBI->connect($dsn,$usr,$psw,$dbopt)}) \n                                    {$rspfd->configure(-text=>'Connected'); \n                                     eval {$_[0] =$dsn};\n                                     eval {$_[1] =$usr};\n                                     eval {$_[2] =$psw};\n                                     $DBH =$dbh if $scr || $opt !~/return/i;\n                                     $dlg->destroy if !$scr}\n                               else {$rspfd->configure(-text=>$DBI::errstr)}\n                              }\n                        )\n                ->grid(-row=>3, -column=>($scr ? 2 : 1), -sticky=>'we');\n my $btncn =$dlg->Button(-text=>Tk::TM::Lang::txtMsg('Cancel')\n                        ,-command=>sub{if(!$scr && $opt =~/return/i) {$dlg->destroy} else {Tk::exit}})\n                ->grid(-row=>3, -column=>2, -sticky=>'we') if !$scr;\n    $rspfd =ref($scr) eq 'ARRAY' ? $scr->[1]\n           :$dlg->Label(-anchor=>'w',-relief=>'sunken')\n                ->grid(-row=>4, -column=>0, -columnspan=>3, -sticky=>'we');\n $dsnfd->bind('<Key-Return>',sub{$btnok->invoke});\n $usrfd->bind('<Key-Return>',sub{$btnok->invoke});\n $pswfd->bind('<Key-Return>',sub{$btnok->invoke});\n if (!$scr) {\n    $dlg->bind('<Key-Escape>',sub{$btncn->invoke});\n    if ($opt =~/center/i) {\n       $dlg->update;\n       $dlg->geometry('+'.int(($dlg->screenwidth() -$dlg->width())/2.2) \n                     .'+'.int(($dlg->screenheight() -$dlg->height())/2.2));\n    }\n    $dlg->grab;\n    $dlg->focusForce;\n    $usrfd->focusForce;\n    Tk::MainLoop();\n }\n else {\n    $usrfd->focusForce;\n }\n $dbh;\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/Common.pm",
      "package" : "Tk::TM::Common"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub setActions {\n my $self =shift;\n my $mnu  = $self->{-mdmnu}\n            ? ref($self->{'wmBar'})=~/^array/i\n              ? $self->{'wmBar'}->[2]->cget(-menu)\n              : $self->{'wmBar'}->entrycget(2,-menu)\n            : $self->{'wbActions'}\n              ? ($self->{'wbActions'}->children)[0]\n              : return($self);\n my $fnt  ='';\n if (!$fnt) {my $mb =$self->parent->Menubutton(-text=>'�����'); $fnt =$mb->cget(-font); $mb->destroy}\n\n $mnu->delete(0,'last');\n foreach my $elem (@_) {\n    if (ref($elem)) {\n       my $nm =$elem->[0];\n       my $um =index($nm,\"~\"); $nm =~s/~//;\n       $mnu->add((!defined($elem->[1]) ? ($elem->[0] ||'separator') : ($elem->[1] ||'command',-label=>$nm,-underline=>$um,-font=>$fnt))\n               ,@$elem[2..$#{$elem}]);\n    }\n    elsif (!$elem || $elem =~/separator/i) {\n       $mnu->add('separator');\n    }\n    else {\n       my $nm =$elem;\n       my $um =index($nm,\"~\"); $nm =~s/~//;\n       $mnu->add('command',-label=>$nm,-underline=>$um,-font=>$fnt,-command=>sub{$self->Action($nm)});\n    }\n }\n $mnu;\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/wgMenu.pm",
      "package" : "Tk::TM::wgMenu"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub sbSet {\n if    (!$_[0]->{-wgscroll}) {}\n elsif (!$_[0]->{-do}) {$_[0]->{-wgscroll}->set(0,1)}\n else {\n   my $t =$_[0]->{-do}->{-dsrid} -$_[0]->{-do}->{-dsrsd};\n   my $b =$t +$_[0]->{-rowcount} -1;\n   my $c =$_[0]->{-do}->dsRowCount() -1;\n      $c =1  if $c <=0;\n   if ($b >$c) {\n      $t =$t +$c -$b; $t =0 if $t <0;\n      $c =$b\n   }\n   $_[0]->{-wgscroll}->set($t/$c,$b/$c);\n }\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/wgTable.pm",
      "package" : "Tk::TM::wgTable"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub Show {\n my $self =shift;\n my $wgf;\n my @btn;\n my $besc;\n foreach my $area ($self->children) {\n    if    ($area->name =~/top/i) {\n          my @wgs =$area->children;\n          $wgf =$wgs[0]\n    }\n    elsif ($area->name =~/bottom/i) {\n          my @wgs =$area->children;\n          @btn =map {$_->cget(-text)} @wgs;\n          $besc=$wgs[$#wgs]\n    }\n }\n $self->bind('<FocusIn>',sub{$wgf->focus; $self->bind('<FocusIn>',undef)});\n $self->bind('<Key-Escape>',sub{$besc->invoke});\n $self->protocol(\"WM_DELETE_WINDOW\" => undef);\n\n my $txt =$self->Tk::DialogBox::Show(@_) ||'';\n for (my $i =@[; $i <=$#btn; $i++) {\n   return($i) if $btn[$i] eq $txt;\n }\n -1;\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/wDialogBox.pm",
      "package" : "Tk::TM::wDialogBox"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DBIHlp {                 \n my $self =shift;\n print \"DBIHlp($self; \",join(';',map {defined($_) ? $_ : 'null'} @_),\")\\n\" if $Tk::TM::Common::Debug;\n\n $self->wgCursorWait;\n\n my $cmd  =(ref($_[0]) ? '' : shift);\n my $do   =new Tk::TM::DataObject(-mdedt=>0);\n if ($cmd) {$do->DBICmd($cmd,@{$_[0]})}\n else      {$do->dsRowFeedAll($_[0])}\n if (!$do->dsRowCount) {$do->destroy(); return(0)};\n\n my $colcount =scalar($#{$do->dsRowDta(0)});\n my $colspecs =[];\n foreach (my $i=@[; $i<=$colcount; $i++) {\n   push(@$colspecs, ['','Entry']);\n }\n\n eval('use Tk::TM::wDialogBox');\n my $dlg  =$self->{-wgscr}->tmDialogBox\n    (-title=>Tk::TM::Lang::txtMsg('Choose')\n    ,-buttons=>[Tk::TM::Lang::txtMsg('Ok')\n               ,Tk::TM::Lang::txtMsg('Cancel')]);\n $dlg->add('tmMenu',-mdmnu=>'',-mdnav=>1,-dos=>[$do])->pack(-anchor=>'nw');\n my $tbl  =$dlg->add('tmTable'\n                    ,-rowcount=>($do->dsRowCount()>10 ? 10 : $do->dsRowCount())\n                    ,-colspecs=>$colspecs)->pack(-anchor=>'w');\n $do->RowGo('top');\n $do->set(-wgtbl=>$tbl)->Display();\n $tbl->Focus();\n if ($dlg->Show()!=0) {$do->destroy(); return(0)};\n\n my $dta =$do->dsRowDta();\n $self->{-dsrch} =1;\n if (!ref($_[1])) {\n    $self->dsFldUpd(undef, $dta->[0])\n }\n else {\n    foreach my $inc (@{$_[1]}) {\n      $self->dsFldUpd($self->{-dsrfd} +$inc, $dta->[0])      \n    }\n }\n $do->destroy();\n 1;\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/DataObject.pm",
      "package" : "Tk::TM::DataObject"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DBILogin {\n print \"DBILogin(\",join(', ',map {defined($_) ? $_ : 'null'} @_),\")\\n\" if $Tk::TM::Common::Debug;\n my ($self, $cmd) =@_;\n return(1) if $cmd !~/start/;\n Tk::TM::Common::DBILogin([$self->{-wgscr}, $self->{-wgmnu}->set(-wgind)]\n                         ,$self->{-parm}->{-dsn}\n                         ,$self->{-parm}->{-usr}\n                         ,$self->{-parm}->{-psw}\n                         ,ref($self->{-parm}) ? '#' .join('#',keys(%{$self->{-parm}})): $self->{-parm}\n                         ,$self->{-parm}->{-dbopt}\n                         );\n $self->{-dos} =[];\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/wApp.pm",
      "package" : "Tk::TM::wApp"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub TryHdr {\n $TrySubject =$_[0] if defined($_[0]);\n $TryStage   =$_[1] if defined($_[1]);\n $Tk::TM::Common::Echo && print($TrySubject.($TryStage ne '' ? \": $TryStage\" : $TryStage).\"...\");\n ''\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/Try.pm",
      "package" : "Tk::TM::Try"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub txtMsg {\n return($_[0]) if !$Lang;\n my %msg =(\n  'About application' => '� ����������'\n ,'Cancel' => '��������'\n ,'Choose' => '�������'\n ,'Close' => '�������'\n ,'Closing' => '��������'\n ,'Condition' => '�������'\n ,'Data was modified' => '������ ���� ��������'\n ,'Database' => '���� ������'\n ,'Error' => '������'\n ,'Find' => '�����'\n ,'Function not released' => '������� �� �����������'\n ,'Help' => '�������'\n ,'Load data from file' => '��������� ������ �� �����'\n ,'Login' => '�����������'\n ,'Ok' => '���������'\n ,'Opening' => '��������'\n ,'Operation' => '������������'\n ,'Order by' => '����������'\n ,'Pardon' => '��������'\n ,'Password' => '������'\n ,'Save changes?' => '��������� ���������?'\n ,'Save data into file' => '��������� ������ � ����'\n ,'User' => '������������'\n ,'Where condition' => '�������'\n ,'Writing' => '������'\n );\n return($msg{$_[0]} || $_[0]);\n}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/Lang.pm",
      "package" : "Tk::TM::Lang"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub Stop {shift->doAll(sub{shift->Stop(@_)},@_)}",
      "file" : "/var/tmp/arv_Dxng71/Tk-TM-0.53/lib/Tk/TM/DataObjSet.pm",
      "package" : "Tk::TM::DataObjSet"
   }
]
