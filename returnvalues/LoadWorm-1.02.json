[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub GetConfiguration { my($ConfigFile) = @_;\n\tmy $error, $section;\n\t\n\t$WD = \".\" unless $WD; \n\t$MASTERDIR = $WD unless $MASTERDIR;\n\t$I_AM = \".*\" unless $I_AM;\n\t\n\t$main::MyPort = 9676;  \n\t\n\t$main::Randomly = 0;\n\t\n   $error = 0;\n   $section = \"invalidsection\";\n   open CFG,  \"<$ConfigFile\" or die(\"Failed: Can't open <$ConfigFile - $!\\n\");\n   while ( <CFG> )\n   {\n\t\tchomp;\n      /^\\s*#/ && next; \n      /^\\s*;/ && next; \n      /^\\s*$/ && next; \n\n      /^\\s*\\[([^]]*)\\]\\s*$/ && do { $section= lc $1;\n                          unless ( $section =~ /(traverse|ignore|validation|mode|proxy|noproxy|input|credentials|referersreport|slave|limit)/ )\n                          {\n                             print \"Warning: Unrecognized section name: [$section]\";\n                             $section = \"init\";\n                          };\n\t\t\t\t\t\t\t\t  for ( $section ) {\n\t\t\t\t\t\t\t\t\t\t/^traverse/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@main::TraverseURLs = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^ignore/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@main::IgnoreURLs = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdbmopen %main::AlreadyIgnored, \"ignores\", 0666;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t%main::AlreadyIgnored = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^validation/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@main::Validations = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdbmopen %main::Checks, \"checks\", 0666;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t%main::Checks = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^referersreport/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@main::ReferersURLs = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t%main::Referers = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$main::Referers = 1;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^mode/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^proxy/  && do {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@main::Proxy = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^noproxy/  && do {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@main::NoProxy = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^credentials/ && do {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n   \t\t\t\t\t\t\t\t\t/^input/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t%main::Inputs = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\t/^slave/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n   \t\t\t\t\t\t\t\t\t/^limit/\t&& do\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t@main::Limits = ();\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\tprint \"Warning: unrecognized section/line: $_\\n\";\n\t\t\t\t\t\t\t\t\t\t$section = 'invalidsection';\n\t\t\t\t\t\t\t\t\t\t$error = 1;\n\t\t\t\t\t\t\t\t  }\n                          next;\n                        };\n      $l = $_;\n\t\t$_ = $section;\n      {\n\t\t\t/^invalidsection/ && do { last; };\n         /^traverse/  && do {\n\t\t\t\t\t\t\tpush @main::TraverseURLs, $l;\n                     last;\n                     };\n         /^ignore/  && do {\n\t\t\t\t\t\t\tpush @main::IgnoreURLs, $l;\n                     last;\n                     };\n\t\t\t/^validation/\t&& do {\n\t\t\t\t\t\t\t\t($ky, $pckt) = split /\\s*=\\s*/, $l, 2;\n\t\t\t\t\t\t\t\t$subr = \"Check\";\n\t\t\t\t\t\t\t\tif ( $pckt =~ /(.+)::(.+)/ ) {\n\t\t\t\t\t\t\t\t\t$pckt = $1;\n\t\t\t\t\t\t\t\t\t$subr = $2;\n\t\t\t\t\t\t\t\t\t$pckt =~ s/\\.pm$//;\n\t\t\t\t\t\t\t\t\trequire $pckt.\".pm\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\t$pckt = \"main\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif ( def &($pckt.\"::\".$subr) ) {\n\t\t\t\t\t\t\t\t\t$main::Validations{$ky} = $pckt.\"::\".$subr;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tprint \"Validation routine not found: $pckt.::.$subr\\n\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n         /^referersreport/  && do {\n\t\t\t\t\t\t\tpush @main::ReferersURLs, $l;\n                     last;\n                     };\n         /^mode/  && do {\n\t\t\t\t\t\t\t$_ = lc $l;\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t/^\\s*random/ && do\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t$main::Randomly = 1;\n\t\t\t\t\t\t\t\t\tsrand(time() ^ ($$ + ($$ * 2**15)) );\n\t\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t/^\\s*(depth|recurse|timeout|verbose|noimages|load|useragent|editor|harvest)\\s*=?\\s*(.*)$/ && do\n\t\t\t\t\t\t\t\t\t\t{ $ENV{uc $1} = $2; last; };\n\t\t\t\t\t\t\t\t\tprint \"Warning: unrecognized parameter: $l\\n\";\n\t\t\t\t\t\t\t\t\t$error = 1;\n\t\t\t\t\t\t\t}\n                    last;\n                     };\n         /^slave/  && do {\n\t\t\t\t\t\t\t\t&SlaveOption($l);\n\t\t\t\t\t\t\t\tlast;\n                     };\n\t\t\t/^proxy/  && do {\n\t\t\t\t\t\t\tpush @main::Proxy, $l;\n\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t};\n\t\t\t/^noproxy/  && do {\n\t\t\t\t\t\t\tpush @main::NoProxy, $l;\n\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t};\n\t\t\t/^credentials/\t&& do\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpush @main::Credentials, $l;\n\t\t\t\t\t\t\tif ( defined $main::ua ) {\n   \t\t\t\t\t\t\tmy ($netloc, $realm, $userid, $password) = split /,/, $l;\n                        $main::ua->credentials($netloc, $realm, $userid, $password);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t};\n\t\t\t/^input/\t&& do\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmy ($Murl, $Mlist) = ();\n\t\t\t\t\t\t\t$l =~ /\\s*(\\S+)\\s*=\\s*(\\S+)/;\n\t\t\t\t\t\t\tunless ( $1 and $2 ) {\n\t\t\t\t\t\t\t\tprint \"Error in [Input], no equal sign in $l\\n\";\n\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$Murl = $1;\n\t\t\t\t\t\t\t$Mlist = $2;\n\t\t\t\t\t\t\t$Murl =~ /(\\S+),(\\S+)/;\n\t\t\t\t\t\t\tunless ( $1 and $2 ) {\n\t\t\t\t\t\t\t\tprint \"Error in [Input], no comma in $l\\n\";\n\t\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$main::Inputs{$Murl} = $Mlist;\t\n\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t};\n\t\t\t/^limit/  && do {\n\t\t\t\t\t\t\tpush @main::Limits, $l;\n\t\t\t\t\t\t\tlast;\n\t\t\t\t\t\t\t};\n        }; \n   };\n\tclose CFG;\n\t\n   $ENV{'PERL'} = ( $OSNAME eq 'MSWin32' ) ? \"C:\\\\Perl\" : `which perl` unless defined $ENV{'PERL'};\n\n\t$ENV{'DEPTH'} = 10 unless $ENV{'DEPTH'};\n\t$ENV{'RECURSE'} = 1 unless $ENV{'RECURSE'};\n\t$ENV{'TIMEOUT'} = 120 unless $ENV{'TIMEOUT'};\n}",
      "file" : "/var/tmp/arv_8PnoDX/LoadWorm-1.02/LoadWorm.pm",
      "package" : "LoadWorm"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub Check { my ($Link, $Content) = @_;\n\t\n\topen TMP, \"<$Content\";\n\twhile ( <TMP> )\n\t{\n\t\tif ( /<HEAD><TITLE>Request Failed<\\/TITLE><\\/HEAD>/ )\n\t\t{\n\t\t\tmy $rslt = \"500 $_\";\n\t\t\twhile ( <TMP> ) { $rslt .= $_; }\n\t\t\t$main::Errors{$Link} = $rslt;\n\t\t\treturn 0;\n\t\t};\n\t};\n\t1; \n}",
      "file" : "/var/tmp/arv_8PnoDX/LoadWorm-1.02/eg/AnyURL.pm",
      "package" : "AnyURL"
   }
]
