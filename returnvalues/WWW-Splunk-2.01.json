[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub request {\n\tmy $self = shift;\n\tmy $method = shift;\n\tmy $location = shift;\n\tmy $data = shift;\n\tmy $callback = shift;\n\n\tmy $url = $self->{url}.$prefix.$location;\n\n\tmy $request;\n\tif (ref $method and ref $method eq 'CODE') {\n\t\t$request = $method->($url, $data);\n\t} else {\n\t\t$request = new HTTP::Request ($method, $url);\n\t}\n\n\tmy $content_type;\n\tmy $buffer;\n\n\t$self->{agent}->remove_handler ('response_header');\n\t$self->{agent}->add_handler (response_header => sub {\n\t\tmy($response, $ua, $h) = @_;\n\n\t\tif ($_ = $response->header ('Client-SSL-Warning')) {\n\t\t\tcroak \"SSL Error: $_\" unless $self->{unsafe_ssl};\n\t\t}\n\n\t\treturn 0 unless $response->is_success;\n\n\t\t$response->header ('Content-Type') =~ /^([^\\s;]+)/\n\t\t\tor croak \"Missing or invalid Content-Type: $_\";\n\t\t$content_type = $1;\n\n\t\tif ($callback) {\n\t\t\t$response->{default_add_content} = 0;\n\t\t\t$buffer = \"\";\n\t\t}\n\t});\n\n\t$self->{agent}->remove_handler ('response_data');\n\t$self->{agent}->add_handler (response_data => sub {\n\t\tmy ($response, $ua, $h, $data) = @_;\n\n\t\treturn 1 unless defined $buffer;\n\t\t$buffer .= $data;\n\t\tforeach (split /<\\/results>\\K/, $buffer) {\n\t\t\tunless (/<\\/results>$/) {\n\t\t\t\t$buffer = $_;\n\t\t\t\tlast;\n\t\t\t}\n\n\t\t\tmy $xml = XML::LibXML->load_xml (string => $_);\n\t\t\t$callback->(WWW::Splunk::XMLParser::parse ($xml));\n\t\t}\n\n\t\treturn 1;\n\t}) if $callback;\n\n\tmy $response = $self->{agent}->request ($request);\n\tcroak $response->header ('X-Died') if $response->header ('X-Died');\n\n\tunless ($response->is_success) {\n\t\tmy $content = WWW::Splunk::XMLParser::parse ($response->content)\n\t\t\tif $response->header ('Content-Type') =~ /xml/;\n\t\tmy $error = \"HTTP Error: \".$response->status_line;\n\t\t$error .= sprintf \"\\n%s: %s\",\n\t\t\t$content->findvalue ('/response/messages/msg/@type'),\n\t\t\t$content->findvalue ('/response/messages/msg')\n\t\t\tif eval { $content->isa ('XML::LibXML::Document') }\n\t\t\t\tand $content->documentElement->nodeName eq 'response';\n\t\tcroak $error;\n\t}\n\n\tif ($content_type eq 'text/xml') {\n\t\tmy $xml = XML::LibXML->load_xml (string => $response->content);\n\t\tmy @ret = WWW::Splunk::XMLParser::parse ($xml);\n\t\treturn $#ret ? @ret : $ret[0] if @ret;\n\t\treturn $xml;\n\t} elsif ($response->code eq 204) {\n\t\treturn ();\n\t} elsif ($content_type eq 'text/plain') {\n\t\treturn ();\n\t} else {\n\t\tcroak \"Unknown content type: $content_type\";\n\t}\n}",
      "file" : "/var/tmp/arv_1Rb4fC/WWW-Splunk-2.01/lib/WWW/Splunk/API.pm",
      "package" : "WWW::Splunk::API"
   }
]
