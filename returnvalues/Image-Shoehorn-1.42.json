[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\npackage Image::Shoehorn;\nuse strict;\n\n$Image::Shoehorn::VERSION = '1.42';\n\nuse File::Basename;\n\nuse Carp;\nuse Error;\n\n\nuse Image::Magick 5.44;\nuse File::MMagic;\n\n\n\nsub last_error {\n  my $pkg = shift;\n  my $e   = shift;\n  \n  if ($e) {\n    my $caller = (caller(1))[3];\n    Error::Simple->record(\"[$caller] $e.\");\n    return 1;\n  }\n  \n  return Error->prior();\n}\n\n\nsub dimensions_for_scale {\n  my $pkg   = shift;\n  my $x     = shift;\n  my $y     = shift;\n  my $scale = shift;\n\n  if ($scale =~ /^(\\d+)x(\\d+)$/) {\n    $x = $1;\n    $y = $2;\n  }\n  \n  elsif ($scale =~ /^(\\d+)%$/) {\n    $x = ($x/100) * $1;\n    $y  = ($y/100) * $1;\n  }\n  \n  elsif ($scale =~ /^(\\d+)x$/) {\n    ($x,$y) = __PACKAGE__->scaled_dimensions([$x,$y,$1,undef]);\n  }\n  \n  elsif ($scale =~ /^x(\\d+)$/) {\n    ($x,$y) = __PACKAGE__->scaled_dimensions([$x,$y,undef,$1]);\n  }\n  \n  else { \n    return ();\n  }\n\n  return (int($x),int($y));\n}\n\n\nsub scaled_name {\n  my $pkg  = shift;\n  my $args = shift;\n\n  my $scaled = &basename($args->[0]);\n\n  my $id = ($args->[1]) ? \"-$args->[1]\" : \"\";\n\n  $scaled =~ s/(.*)(\\.[^\\.]+)$/$1$id$2/;\n  $scaled =~ s/%/percent/;\n\n  return $scaled;\n}\n\n\nsub converted_name {\n  my $pkg  = shift;\n  my $args = shift;\n\n  if (! $args->[1]) { return $args->[0]; }\n\n  my $converted = $args->[0];\n  $converted    =~ s/^(.*)\\.([^\\.]+)$/$1\\.$args->[1]/;\n\n  return $converted;\n}\n\n\nsub scaled_dimensions {\n  my $pkg    = shift;\n  my $width  = $_[0]->[0];\n  my $height = $_[0]->[1];\n  my $x      = $_[0]->[2] || $width;\n  my $y      = $_[0]->[3] || $height;\n\n  if (($width == $x) && ($height == $y)) {\n    return ($x,$y);\n  }\n\n\n  foreach ($width, $height, $x, $y) {\n    if ($_ < 1) {\n      carp \"Dimension (width:$width, height:$height, x:$x, y:$y) less than one. \".\n\t   \"Returning 0,0 to avoid possible divide by zero error.\\n\";\n\n      return (0,0);\n    }\n  }\n\n\n  my $h_percentage = $y / $height;\n  my $w_percentage = $x / $width;\n  my $percentage   = 100;\n  \n  if (($x)  && ($y )) { $percentage = ($h_percentage <= $w_percentage) ? $h_percentage : $w_percentage; }\n  if (($x)  && (!$y)) { $percentage = $w_percentage; }\n  if ((!$x) && ($y )) { $percentage = $h_percentage; }\n  \n  $x = int($width  * $percentage);\n  $y = int($height * $percentage);\n  \n  return ($x,$y);\n}\n\n\nsub new {\n    my $pkg = shift;\n\n    my $self = {};\n    bless $self,$pkg;\n\n    if (! $self->init(@_)) {\n      return undef;\n    }\n\n    return $self\n}\n\nsub init {\n    my $self = shift;\n    my $args = shift;\n\n    if (! -d $args->{'tmpdir'} ) {\n      $self->last_error(\"Unable to locate tmp dir\");\n      return 0;\n    }\n\n    if (($args->{'cleanup'}) && (ref($args->{'cleanup'}) ne \"CODE\")) {\n      $self->last_error(\"Cleanup is not a code reference.\");\n      return 0;\n    }\n\n    if (! $self->_magick()) {\n      $self->last_error(\"Unable to get Image::Magick : $!\");\n      return 0;\n    }\n\n    $self->{'__cleanup'} = $args->{'cleanup'};\n    $self->{'__tmpdir'}  = $args->{'tmpdir'};\n    return 1;\n}\n\n\n\nsub import {\n    my $self = shift;\n    my $args = shift;\n\n\n    if (! -e $args->{'source'}) {\n      $self->last_error(\"Unknown file $args->{'source'}\");\n      return undef;\n    }\n\n    if (($args->{'cleanup'}) && (ref($args->{'cleanup'}) ne \"CODE\")) {\n      $self->last_error(\"Cleanup is not a code reference.\");\n      return undef;\n    }\n\n    if (! $self->_magick()->Ping($args->{'source'})) {\n      $self->last_error(\"Unable to ping $args->{'source'}: $!\");\n      return undef;\n    }\n\n\n    if (($self->{'__source'}) && ($args->{'source'} ne $self->{'__source'})) {\n      $self->_cleanup();\n    }\n\n    if ($args->{'cleanup'}) {\n      $self->{'__instancecleanup'} = $args->{'cleanup'};\n    }\n\n\n    $self->{'__source'} = $args->{'source'};\n    $self->{'__dest'}   = $self->{'__source'};\n\n    unless ($args->{'overwrite'}) {\n      $self->{'__dest'} = \"$self->{'__tmpdir'}/\".&basename($args->{'source'});\n    }\n\n\n    if (! $self->_process($args)) {\n      return undef;\n    }\n\n\n    my $validation = $self->_validate($args);\n\n    if ((! $validation->[0]) && (! $validation->[1])) {\n      return undef;\n    }\n\n\n    if (! keys %{$args->{'scale'}}) {\n\n      my $dest = ($args->{'overwrite'})? \n\t__PACKAGE__->converted_name([$self->{'__images'}{'source'}{'path'},$validation->[1]]) :\n\t  \"$self->{'__tmpdir'}/\".&basename(__PACKAGE__->converted_name([$self->{'__images'}{'source'}{'path'},\n\t\t\t\t\t\t\t\t\t$validation->[1]]));\n\n      my ($x,$y) = $self->_shoehorn({source => $self->{'__images'}{'source'}{'path'},\n\t\t\t\t     dest   => $dest,\n\t\t\t\t     type   => $validation->[1]});\n\n      if (! $x) {\n\treturn undef;\n      }\n\n      return {source=>$self->_ping($dest)};\n    }\n\n\n    foreach my $name (keys %{$args->{'scale'}}) {\n\n      next if ($name eq \"source\");\n\n      if (! $self->_scale({\n\t\t\t   name  => $name,\n\t\t\t   scale => $args->{'scale'}->{$name},\n\t\t\t   type  => $validation->[1],\n\t\t\t  })) {\n\treturn undef;\n      }\n    }\n\n    map { shift; } @{$self->_magick()};\n    return $self->{'__images'};\n}\n\n\nsub _process {\n    my $self = shift;\n    my $args = shift;\n\n    $self->{'__images'}{'source'} = $self->_ping($self->{'__source'}) || return 0;\n\n\n    my $validation = $self->_validate($args);\n\n    if ((! $validation->[0]) && (! $validation->[1])) {\n      return 0;\n    }\n\n\n    if ((! $args->{'max_height'}) && (! $args->{'max_width'})) {\n      return 1;\n    }\n\n\n    my $geometry = undef;\n    my $newtype  = undef;\n\n\n    my ($x,$y) = __PACKAGE__->scaled_dimensions([\n\t\t\t\t     $self->{'__images'}{'source'}{'width'},\n\t\t\t\t     $self->{'__images'}{'source'}{'height'},\n\t\t\t\t     $args->{'max_width'},\n\t\t\t\t     $args->{'max_height'}\n\t\t\t\t    ]);\n\n    unless (($x == $self->{'__images'}{'source'}{'width'}) &&\n\t    ($y == $self->{'__images'}{'source'}{'height'})) {\n\n      $geometry = join(\"x\",$x,$y);\n    }\n\n\n    $newtype = $validation->[1];\n\n\n    if ((! $newtype) && (! $geometry)) {\n      return 1;\n    }\n\n    if ($newtype) {\n      $self->{'__dest'} =~ s/^(.*)\\.($self->{'__images'}{'source'}{'type'})$/$1\\.$newtype/;\n    }\n\n\n    $self->_shoehorn({\n\t\t      geometry => $geometry,\n\t\t      type     => $newtype\n\t\t     });\n\n    if (! $x) { return 0; }\n\n\n    if ($newtype) {\n      $self->{'__images'}{'source'} = $self->_ping($self->{'__dest'});\n    }\n\n    else {\n      $self->{'__images'}{'source'}{'height'} = $y;\n      $self->{'__images'}{'source'}{'width'}  = $x;\n    }\n\n    return 1;\n}\n\n\nsub _validate {\n  my $self = shift;\n  my $args = shift;\n\n  if (exists($self->{'__validation'})) { return $self->{'__validation'}; }\n\n  unless (ref($args->{'valid'}) eq \"ARRAY\") {\n    $self->{'__validation'} = [1];\n    return $self->{'__validation'};\n  }\n\n  if (grep /^($self->{'__images'}{'source'}{'type'})$/,@{$args->{'valid'}}) {\n    $self->{'__validation'} = [1];\n    return $self->{'__validation'};\n  }\n\n  foreach my $type (@{$args->{'valid'}}) {\n    my $encode = ($self->_magick()->QueryFormat(format=>$type))[4];\n\n    if ($encode) { \n      $self->{'__validation'} = [1,$type];\n      return $self->{'__validation'};\n    }\n  }\n\n  $self->{'__validation'} = [0];\n  return $self->{'__validation'};\n}\n\n\nsub _scale {\n  my $self = shift;\n  my $args = shift;\n\n  my $scaled = __PACKAGE__->scaled_name([$self->{'__dest'},\n\t\t\t\t\t $args->{'name'}]);\n\n  $scaled = \"$self->{'__tmpdir'}/$scaled\";\n\n  if ($args->{'type'}) {\n    $scaled = __PACKAGE__->converted_name([$scaled,$args->{'type'}]);\n  }\n\n  my ($width,$height) = __PACKAGE__->dimensions_for_scale(\n\t\t\t\t\t\t\t  $self->{'__images'}{'source'}->{'width'},\n\t\t\t\t\t\t\t  $self->{'__images'}{'source'}->{'height'},\n\t\t\t\t\t\t\t  $args->{'scale'},\n\t\t\t\t\t\t\t );\n\n  if ((! $width) || (! $height)) {\n    $self->last_error(\"Unable to determine dimensions for '$args->{scale}'\");\n    return 0;\n  }\n  \n  my ($x,$y) = $self->_shoehorn({\n\t\t\t\t source   => $self->{'__images'}{'source'}{'path'},\n\t\t\t\t dest     => $scaled,\n\t\t\t\t geometry => join(\"x\",$width,$height),\n\t\t\t\t type     => $args->{'type'},\n\t\t\t\t});\n\n  if (! $x) { return 0; }\n\n  $self->{'__images'}{$args->{'name'}} = $self->_ping($scaled) || return 0;\n\n  return 1\n}\n\n\nsub _shoehorn {\n  my $self = shift;\n  my $args = shift;\n  \n  $args->{'source'} ||= $self->{'__source'};\n  $args->{'dest'}   ||= $self->{'__dest'};\n\n\n\n  $self->_read($args->{'source'}) || return 0;\n\n\n  if ($args->{'geometry'}) {\n\n    if (my $err = $self->_magick()->Scale(geometry=>$args->{'geometry'})) {\n      $self->last_error(\"Failed to scale $args->{'source'} : $err\");\n      return 0;\n    }\n\n  }\n\n\n  if ($args->{'type'}) {\n    $args->{'dest'} = \"$args->{'type'}:$args->{'dest'}\";\n  }\n\n  if (my $err = $self->_magick()->[0]->Write($args->{'dest'})) { \n    $self->last_error(\"Failed to write '$args->{'dest'}' : $@\");\n    return 0;\n  }\n\n\n  return ($self->_magick()->Get(\"width\"),$self->_magick()->Get(\"height\"));\n}\n\n\nsub _read {\n  my $self = shift;\n\n  if (my $err = $self->_magick()->Read($_[0].\"[0]\")) {\n    $self->last_error(\"Failed to ping '$_[0]' : $err\");\n    return 0;\n  }\n\n  @{$self->{'__magick'}} = pop @{$self->{'__magick'}};\n  return 1;\n}\n\n\nsub _ping {\n  my $self = shift;\n  my $file = shift;\n\n  $self->_read($file) || return 0;\n\n\n  $file =~ /^(.*)\\.([^\\.]+)$/;\n  my $extension = $2;\n  \n  return {\n\t  width       => $self->_magick()->Get(\"width\"),\n\t  height      => $self->_magick()->Get(\"height\"),\n\t  path        => $file,\n\t  format      => $self->_magick()->Get(\"format\"),\n\t  type        => $extension,\n\t  extension   => $extension,\n          contenttype => $self->_mmagic()->checktype_filename($file),\n\t };\n}\n\n\nsub _cleanup {\n  my $self = shift;\n\n  delete $self->{'__validation'};\n\n  if ($self->{'__images'}{'source'}{'path'} eq $self->{'__source'}) {\n    delete $self->{'__images'}{'source'};\n  }\n\n  if (ref($self->{'__instancecleanup'}) eq \"CODE\") {\n    my $result = &{ $self->{'__instancecleanup'} }($self->{'__images'});\n\n    delete $self->{'__instancecleanup'};\n    return $result;\n  }\n\n  if (ref($self->{'__cleanup'}) eq \"CODE\") {\n    return &{ $self->{'__cleanup'} }($self->{'__images'});\n  }\n\n  foreach my $name (keys %{$self->{'__images'}}) {\n    my $file = $self->{'__images'}->{$name}->{'path'};\n    if (-f $file ) { unlink $file; }\n  }\n\n  return 1;\n}\n\n\nsub _mmagic {\n    my $self = shift;\n\n    if (ref($self->{'__mmagic'}) ne \"File::MMagic\") {\n        $self->{'__mmagic'} = File::MMagic->new();\n    }\n\n    return $self->{'__mmagic'};\n}\n\n\nsub _magick {\n    my $self = shift;\n\n    if (ref($self->{'__magick'}) ne \"Image::Magick\") {\n\t$self->{'__magick'} = Image::Magick->new();\n    }\n\n    return $self->{'__magick'};\n}\n\n\nsub DESTROY {\n  my $self = shift;\n  $self->_cleanup();\n  return 1;\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv_vshXES/Image-Shoehorn-1.42/lib/Image/Shoehorn.pm",
      "package" : "Image::Shoehorn"
   },
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\npackage Apache::ImageShoehorn;\nuse strict;\n\n$Apache::ImageShoehorn::VERSION = '0.9.2';\n\nuse Apache;\nuse Apache::Constants qw (:common);\nuse Apache::File;\nuse Apache::Log;\n\nuse Image::Shoehorn 1.2;\n\nmy %TYPES   = ();\nmy @FORMATS = ();\n\nsub handler {\n    my $apache = shift;\n\n\n    unless (&_valid_type($apache)) {\n      return DECLINED;\n    }\n\n\n    my $valid   = 1;\n    my $convert = 0;\n\n    if ($apache->dir_config(\"SetValid\")) {\n      my $ctype = $apache->content_type();\n      my @valid = $apache->dir_config->get(\"SetValid\");\n\n      $valid = grep /^($ctype)$/,@valid;\n\n      if (! $valid) {\n\t$convert = $apache->dir_config(\"Convert\") =~ /^(on)$/i;\n      }\n    }\n\n    if ((! $valid) && (! $convert)) {\n      return NOT_FOUND;\n    }\n\n\n    my %params = ($apache->method() eq \"POST\") ? $apache->content() : $apache->args();\n    my $sname  = $params{\"scale\"};\n\n    if (! $sname) {\n      return DECLINED;\n    }\n\n\n    my $scale = $apache->dir_config(\"SetScale\".(ucfirst $sname));\n\n    if (($sname) && (! $scale)) { \n      return NOT_FOUND;\n    }\n\n\n    my $source    = $apache->filename();\n    my $converted = undef;\n\n\n    my $shoehorn = undef;\n\n\n    if ($convert) {\n\n      $shoehorn = &_shoehorn($apache)\n\t|| return &_shoeless($apache);\n\n\n      my $validation = $shoehorn->_validate({valid=>[$apache->dir_config->get(\"SetValid\")]});\n\n\n      if (! $validation->[0]) {\n\t$apache->log()->error(\"Failed validation.\");\n\treturn SERVER_ERROR;\n      }\n\n\n      $converted = Image::Shoehorn->converted_name([$source,$validation->[1]]);\n    }\n\n\n    my $scaled = &_scalepath($apache,[($converted || $source),$sname]);\n\n\n    my $mtime = (stat($source))[9];\n\n\n    if (! &_modified([$mtime,$scaled])) {\n\n      if ($convert) { $source = $converted; }\n\n      unless ($apache->dir_config(\"ScaleAllOnCleanup\") =~ /off/i) {\n\t$apache->register_cleanup(sub { &_scaleall($apache,undef,$source,$mtime); });\n      }\n\n      return &_send($apache,{path=>$scaled});\n    }\n\n\n    $shoehorn ||= &_shoehorn($apache)\n      || return &_shoeless($apache);\n\n\n    my ($imgs,$err) = &_scale($apache,$shoehorn,$source,$sname,$scale);\n\n\n    if (! $imgs) {\n      $apache->log()->error(\"Unable to scale '$source' : $err\");\n      return SERVER_ERROR;\n    }\n\n\n    unless ($apache->dir_config(\"ScaleAllOnCleanup\") =~ /off/i) {\n      $apache->register_cleanup(sub { &_scaleall($apache,$shoehorn,$imgs->{'source'}->{'path'},$mtime); });\n    }\n\n\n    return &_send($apache,$imgs->{($sname || \"source\")});\n}\n\nsub _shoehorn {\n  my $apache = shift;\n  return Image::Shoehorn->new({\n\t\t\t       tmpdir  => $apache->dir_config(\"ScaledDir\"),\n\t\t\t       cleanup => sub {},\n\t\t\t      });\n}\n\nsub _shoeless {\n  my $apache = shift;\n\n  $apache->log()->error(\"Unable to create Image::Shoehorn object :\".\n\t\t\tImage::Shoehorn->last_error());\n\n  return SERVER_ERROR;\n}\n\nsub _send {\n  my $apache = shift;\n  my $image  = shift;\n\n  my $fh = Apache::File->new($image->{'path'});\n\n  if (! $fh) {\n    $apache->log()->error(\"Unable to create filehandle, $!\");\n    return SERVER_ERROR;\n  }\n\n  $apache->content_type($apache->content_type());\n  $apache->send_http_header();\n  $apache->send_fd($fh);\n  \n  return OK;\n}\n\nsub _scale {\n  my $apache   = shift;\n  my $shoehorn = shift;\n  my $source   = shift;\n  my $name     = shift;\n  my $scale    = shift;\n\n  my $imgs = $shoehorn->import({\n\t\t\t\tsource  => $source,\n\t\t\t\tscale   => (($name) && ($scale)) ? { $name => $scale } : {},\n\t\t\t\tconvert => $apache->dir_config(\"Convert\"),\n\t\t\t\tvalid   => (($apache->dir_config(\"SetValid\")) ? \n\t\t\t\t\t    [ $apache->dir_config->get(\"SetValid\") ] : undef),\n\t\t\t       }) || return (0,Image::Shoehorn->last_error());\n\n  return ($imgs,undef);\n}\n\nsub _scaleall {\n  my $apache   = shift;\n  my $shoehorn = shift;\n  my $source   = shift;\n  my $mtime    = shift;\n\n  my %scales = ();\n\n  foreach my $var (keys %{$apache->dir_config()}) {\n    $var =~ /^SetScale(.*)/;\n    next unless $1;\n    \n    my $name   = lc($1);\n    my $scaled = &_scalepath($apache,[$source,$name]);\n\n    next unless (&_modified([$mtime,$scaled]));\n    $scales{$name} = $apache->dir_config($var);\n  }\n\n  if (keys %scales) {\n\n    if (ref($shoehorn) ne \"Image::Shoehorn\") {\n      $shoehorn = &_shoehorn($apache);\n    }\n    \n    if (! $shoehorn) {\n      $apache->log()->error(Image::Shoehorn->last_error());\n      return 0;\n    }\n    \n    if (! $shoehorn->import({\n\t\t\t     source  => $source,\n\t\t\t     scale   => \\%scales,\n\t\t\t     convert => $apache->dir_config(\"Convert\"),\n\t\t\t     valid   => (($apache->dir_config(\"SetValid\")) ? \n\t\t\t\t\t [ $apache->dir_config->get(\"SetValid\") ] : undef),\n\t\t\t    })) {\n\n      $apache->log()->error(\"Failed to import \".Image::Shoehorn->last_error());\n      return 0;\n    }\n  }\n\n  return 1;\n}\n\nsub _valid_type {\n  my $apache = shift;\n\n  $apache->content_type() =~ /^(.*)\\/(.*)$/;\n\n  if (! $2) { return 0; }\n\n  if (exists($TYPES{$apache->location()}->{$2})) {\n    return $TYPES{$apache->location()}->{$2};\n  }\n\n  if (! @FORMATS) {\n    @FORMATS = Image::Magick->QueryFormat();\n  }\n  \n  $TYPES{$apache->location()}->{$2} = grep(/^($2)$/,@FORMATS);\n  return $TYPES{$apache->location()}->{$2};\n}\n\nsub _scalepath {\n  my $apache = shift;\n\n  my $scaled = Image::Shoehorn->scaled_name($_[0]);\n  $scaled    = $apache->dir_config(\"ScaledDir\").\"/$scaled\";\n\n  return $scaled;\n}\n\nsub _modified {\n  my $args = shift;\n\n\n  if (! -f $args->[1]) { return 1; }\n\n  if ($args->[0] > (stat($args->[1]))[9]) {\n    return 1;\n  }\n\n  return 0;\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv_vshXES/Image-Shoehorn-1.42/lib/Apache/ImageShoehorn.pm",
      "package" : "Apache::ImageShoehorn"
   }
]
