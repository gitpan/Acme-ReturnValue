[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub lag\n{\n return time() - $_[0]->{l};\n}",
      "file" : "/var/tmp/arv_BMs97j/WWW-ImageSpool-0.01/lib/WWW/ImageSpool.pm",
      "package" : "WWW::ImageSpool"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub search\n{\n my($self, $search, $limit, $searchlimit) = @_;\n $limit ||= $self->{args}->{limit};\n $searchlimit ||= $self->{args}->{searchlimit};\n my $count = 0;\n my(@result) = ($self->agent_search($search, $searchlimit));\n my(@rv);\n my $returned = scalar(@result);\n\n while(($count < $limit) && (scalar(@result)))\n {\n  push(@rv, splice(@result, int(rand(@result)), 1));\n  $count++;\n }\n \n if($self->{args}->{verbose} > 1)\n {\n  print \"Picked \", scalar(@rv), \"/$returned results from \\\"$search\\\".\\n\";\n }\n \n return(@rv);\n}",
      "file" : "/var/tmp/arv_BMs97j/WWW-ImageSpool-0.01/lib/WWW/ImageSpool/Source.pm",
      "package" : "WWW::ImageSpool::Source"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub fetch\n{\n my($self, @urls) = @_;\n my $rv = 0;\n my $url;\n\n while($url = shift(@urls))\n {\n  if(my $filename = $self->uri_filename($url))\n  {\n   my $pathname = $self->{dir} . \"/$filename\";\n   my $code = getstore($url, $pathname);\n    \n   if(is_success($code))\n   {\n    my($x,$y) = (imgsize($pathname));\n    if(defined($x) && defined($y) && ($x >= $self->{minx}) && ($y >= $self->{miny}))\n    {\n     if($self->{verbose} > 2)\n     {\n      print \"$url -> $filename\\n\";\n     }\n     $rv++;\n    }\n    else\n    {\n     if($self->{verbose} > 3)\n     {\n      if(!defined($x) || !defined($y))\n      {\n       print \"$url: Not an image.\\n\";\n      }\n      else\n      {\n       print \"$url: Too small (${x}x${y}<\", $self->{minx}, \"x\", $self->{miny}, \").\\n\";\n      }\n     }\n     unlink($pathname);\n    }\n   }\n   else\n   {\n    if($self->{verbose} > 2)\n    {\n     print \"$url -> $filename failed: \", status_message($code), \"\\n\";\n    }\n    unlink($pathname);\n   }\n  }\n }\n \n $self->prune();\n \n if($rv)\n {\n  return $rv;\n }\n else\n {\n  return;\n }\n}",
      "file" : "/var/tmp/arv_BMs97j/WWW-ImageSpool-0.01/lib/WWW/ImageSpool/Directory.pm",
      "package" : "WWW::ImageSpool::Directory"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub word\n{\n my($self, $consume) = @_;\n $self->refresh_words();\n my $pos = int(rand(scalar(@{$self->{words}})));\n my $word = $self->{last_word} = $self->{words}->[$pos];\n\n splice(@{$self->{words}}, $pos, 1)\n  if($consume);\n\n if($self->{verbose} > 3)\n {\n  print \"Picked \", ($consume ? \"and consumed \" : \"\"), \"word \\\"$word\\\".\\n\";\n }\n\n return $word;\n}",
      "file" : "/var/tmp/arv_BMs97j/WWW-ImageSpool-0.01/lib/WWW/ImageSpool/Dictionary.pm",
      "package" : "WWW::ImageSpool::Dictionary"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub agent_search \n{\n my($self, $search, $searchlimit) = @_;\n my $count = 0;\n\n if(!$search)\n {\n  return;\n }\n \n if(!$searchlimit)\n {\n  $searchlimit = $self->{args}->{searchlimit};\n }\n \n my $result = ($self->{agent}->search($search, limit => $searchlimit));\n my @result;\n my $image;\n\n while(($count < $searchlimit) && ($image = $result->next()))\n {\n  my $url = $image->content_url();\n  push(@result, $image->content_url());\n  $count++;\n }\n if(scalar(@result))\n {\n  if($self->{args}->{verbose} > 2)\n  {\n   print scalar(@result), \"/$searchlimit results for $search.\\n\";\n  }\n  return(@result);\n }\n else\n {\n  return;\n }\n}",
      "file" : "/var/tmp/arv_BMs97j/WWW-ImageSpool-0.01/lib/WWW/ImageSpool/Source/Google.pm",
      "package" : "WWW::ImageSpool::Source::Google"
   }
]
