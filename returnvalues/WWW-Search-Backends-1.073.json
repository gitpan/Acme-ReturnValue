[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub native_retrieve_some\n{\n \tmy ($self) = @_;      \n \n\tmy($hits_found) = 0;\n\n\treturn undef if (!defined($self->{_next_url}));    \n\nprint STDERR \"WWW::Search::${engine}::native_retrieve_some: fetching \" . $self->{_next_url} . \"\\n\" if ($self->{_debug});\n\n\tmy($response) = $self->http_request('GET', $self->{_next_url});\n\t$self->{response} = $response;\n\nprint STDERR \"WWW::Search::${engine} GET  $self->{_next_url} return \",$response->code,\"\\n\"  if ($self->{_debug});\n  \tif (!$response->is_success) \n\t{\n       \t \treturn undef;\n   \t};\n\n\t$self->{_next_url} = undef; \n\n\tmy $ht_tree = parse_html($response->content);\n\tmy $base = $response->base;\n\tmy($linkpair);\n\tmy ($hit)=0;\n\tforeach $linkpair (@{$ht_tree->extract_links('a')})\n\t{                                 \n\t\tmy($link,$elem) = @$linkpair;           \n       \t\tmy $MyAsHTML=$elem->as_HTML();\n\n\t\tif ($hit != 0)\n\t\t{\t\n\t\t\tmy $title;\n\t\t\t$title=strip_tags($elem->as_text());\n\t\t\t$hit->add_url($link);\n\t\t\t$hit->title($title);\n\t\t\tpush(@{$self->{cache}}, $hit);\t\n\t\t\tprint STDERR \"Adding \",$hit->url,\"\\t\",$title,\"\\n\" unless $debug==0;\n\t\t\t$hit=0;\n\t\t\t$hits_found++;\n\n\t\t}\n\n        \tprint \"link=$link\\n\" unless $debug==0;\n\n        \tif ($MyAsHTML =~ m/src=\\\"\\/Icons\\/Search\\/suite.gif\\\"/ )\n        \t{\n                \tprint STDERR \"Next page is=\",$link,\"\\n\" unless $debug==0;\n\t\t\t$self->{_next_url} = $link;\n\t\t\tgoto fini;\n        \t}\n\n        \tif ($link =~ m/http\\:\\/\\/www\\.voila\\.fr\\/cgi_view\\?file\\=/ )\n        \t{\n\n\t\t\t$hit = new WWW::SearchResult;\n        \t}\n    \t}\nfini:    \n\treturn $hits_found;\n}",
      "file" : "/var/tmp/arv_Nv311S/WWW-Search-Backends-1.073/lib/WWW/Search/VoilaFr.pm",
      "package" : "WWW::Search::VoilaFr"
   }
]
