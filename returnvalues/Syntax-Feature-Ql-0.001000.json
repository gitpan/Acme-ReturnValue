[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method install ($class: %args) {\n    my $target = $args{into};\n    Devel::Declare->setup_for($target => {\n        map {\n            my $name = $_;\n            ($name => {\n                const => sub {\n                    my $ctx = Context->new;\n                    $ctx->init(@_);\n                    return $class->_transform($name, $ctx);\n                },\n            });\n        } @NewOps,\n    });\n    for my $name (@NewOps) {\n        install_sub {\n            into => $target,\n            as   => $name,\n            code => $class->_run_callback,\n        };\n    }\n    on_scope_end {\n        namespace::clean->clean_subroutines($target, @NewOps);\n    };\n    return 1;\n}\n\nmethod _run_callback {\n    return sub ($) {\n        my $string = shift;\n        $string =~ s{(?:^\\s+|\\s+$)}{}gsm;\n        return join ' ', split m{\\s*\\n\\s*}, $string;\n    };\n}\n\nmethod _transform ($class: $name, $ctx) {\n    $ctx->skip_declarator;\n    my $length = Devel::Declare::toke_scan_str($ctx->offset);\n    my $string = Devel::Declare::get_lex_stuff;\n    Devel::Declare::clear_lex_stuff;\n    my $linestr = $ctx->get_linestr;\n    my $quoted = substr $linestr, $ctx->offset, $length;\n    my $spaced = '';\n    $quoted =~ m{^(\\s*)}sm;\n    $spaced = $1;\n    my $new = sprintf '(%s)', join '',\n        $QuoteOp{$name},\n        $spaced,\n        substr($quoted, length($spaced), 1),\n        $string,\n        substr($quoted, -1, 1);\n    substr($linestr, $ctx->offset, $length) = $new;\n    $ctx->set_linestr($linestr);\n    return 1;\n}\n\n1",
      "file" : "/var/tmp/arv_gG8r38/Syntax-Feature-Ql-0.001000/lib/Syntax/Feature/Ql.pm",
      "package" : "Syntax::Feature::Ql"
   }
]
