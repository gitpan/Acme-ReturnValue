[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub version {\n    print << \".\";\n    exit;\n}",
      "file" : "/var/tmp/arv_pH__38/PAR-Packer-1.014/lib/pp.pm",
      "package" : "pp"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub write_raw {\n    my $class = shift;\n    my $file = shift;\n    if (not defined $file) {\n        warn \"${class}->write_raw() needs a file name as argument\";\n        return();\n    }\n    my $binary = $class->get_raw();\n    if (not defined $binary) {\n        warn \"${class}->get_raw() did not return the raw binary data for a PAR loader\";\n        return();\n    }\n\n    open my $fh, '>', $file or die \"Could not open file '$file' for writing: $!\";\n    binmode $fh;\n    print $fh $binary;\n    close $fh;\n\n    return 1;\n}",
      "file" : "/var/tmp/arv_pH__38/PAR-Packer-1.014/lib/PAR/StrippedPARL/Base.pm",
      "package" : "PAR::StrippedPARL::Base"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub pipe_a_command {\n  my (\n       $test_number,\n       $sub_test,\n       $test_name_string,\n       $directory,\n       $command_string,\n       $executable_name,\n       $expected_result,\n       $os,\n       $verbose,\n       $message_ref,\n       $print_cannot_locate_message,\n     ) = @_;\n\n  my $results = \"\";\n  my $cwd1 = cwd;\n  my $cwd2;\n  my $cmd = \"\";\n  my $log_file = \"log_file_from_pipe\";\n  my $stdline = \"\";\n\n  if (!(chdir(\"$directory\"))) {\n      $$message_ref = \"\\n\\[405\\]\" .\n            \"sub $test_name_string cannot chdir $directory\\n:$!:\\n\";\n      return (EXIT_FAILURE);\n  }\n  \n  $cwd2 = cwd;\n  if ($verbose) {\n    print (\"pipe_a_command started in dir $cwd1\\n\");\n    print (\"but is now in $cwd2\\n\");\n  }\n  if ($os !~ m/^Win/i) {\n    if ($executable_name ne \"\") {\n      if (!(chmod (0775, \"$executable_name\"))) {\n        $$message_ref = \"\\n\\[410\\]sub $test_name_string cannot \" .\n                        \"chmod file $executable_name\\n\";\n        return (EXIT_FAILURE);\n      }\n    }\n\n    $executable_name = './' . $executable_name;\n  }\n\n  $cmd = \"$command_string $executable_name\";\n\n  if (!(open (PIPE_LOGFILE, \">$log_file\"))){\n        $$message_ref = \"\\n\\[415\\]sub $test_name_string cannot \" .\n                        \"open $log_file\\n\";\n        return (EXIT_FAILURE);\n  }\n\n\n  if ($print_cannot_locate_message) {\n    print PIPE_LOGFILE (\"\\nThe Line Below SHOULD BE  \\\"Can\\'t locate \\.\\.\\. \");\n    print PIPE_LOGFILE (\" along with a \\\"BEGIN failed \\.\\.\\. \\\" line\\n\");\n    if ($verbose) {\n      print (\"\\nThe Line Below SHOULD BE  \\\"Can\\'t locate \\.\\.\\. \");\n      print (\" along with a \\\"BEGIN failed \\.\\.\\. \\\" line\\n\");\n    }\n  }\n\n\n  if (!(open (CMD_STDOUT_AND_STDERR, \"$cmd 2>&1 |\"))){\n    close(PIPE_LOGFILE);\n        $$message_ref = \"\\n\\[420\\]sub $test_name_string cannot \" .\n                        \"open a pipe for $cmd 2>&1 |\\n\";\n        return (EXIT_FAILURE);\n  }\n\n  while ($stdline = <CMD_STDOUT_AND_STDERR>) {\n      print PIPE_LOGFILE $stdline;\n      if ($verbose) {\n        print $stdline;\n      }\n  }\n\n  close(PIPE_LOGFILE); \n  close(CMD_STDOUT_AND_STDERR);\n  if (open (FH, \"$log_file\")) {\n\n    local $/; $results = <FH>;\n\n    if (!(close(FH))) {\n      $$message_ref = \n         \"Something is wrong with test $test_name_string \"            .\n         \"in directory $cwd1\\n\"                                       .\n         \"File $log_file exists, and I opened it, \"                   .\n         \"but now I cannot close it.\\n\"                               .\n         \"Cannot continue with test $test_name_string\\n\";\n      return (EXIT_FAILURE);\n    }\n\n  } else {\n    $$message_ref = \n       \"Something is wrong with test $test_name_string \"            .\n       \"in directory $cwd1\\n\"                                       .\n       \"File $log_file exists but I cannot open it.\\n\"              .\n       \"Cannot continue with test $test_name_string\\n\";\n    return (EXIT_FAILURE);\n  }\n  \n  chomp($results);\n\n  if ($verbose) {\n    print (\"\\n\\[415\\]Test ${test_number}_${sub_test}: Directory \");\n    print (\"$directory, sub $test_name_string: \\n\");\n    print (\"Result of $cmd was: \\n\");\n    print (\"$results\\n\");\n  }\n\n  if ($results !~ m/$expected_result/) {\n    $$message_ref = \"\\n\\[430\\]\\n\"                                  .\n       \"Test ${test_number}_${sub_test} \"                          .\n       \"The command string \\\"$command_string $executable_name \\\" \" .\n       \"in directory $directory,\"                                  .\n       \"did not produce :: \\\"$expected_result\\\" ::\\n\"              .\n       \"Instead, it produced :: $results ::\\n\"                     .\n       \"End of [430] results \\n\";\n\n    return (EXIT_FAILURE);\n  }\n\n  return (EXIT_SUCCESS);\n\n}",
      "file" : "/var/tmp/arv_pH__38/PAR-Packer-1.014/contrib/automated_pp_test/pipe_a_command.pm",
      "package" : "pipe_a_command"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub test_in_further_subdir {\n  my (\n       $test_number,\n       $sub_test,\n       $test_name_string,\n       $test_dir, \n       $further_subdir,\n       $command_string,\n       $executable_name,\n       $expected_result, \n       $os, \n       $verbose,\n       $message_ref,\n       $print_cannot_locate_message,\n     ) = @_;\n\n  my $final_subdir = \"\";\n  my $final_executable = \"\";\n  my $results_copied = \"\";\n  my $error = EXIT_FAILURE;\n\n  $final_subdir = $test_dir . \"/$further_subdir\";\n  $final_executable = $final_subdir . \"/$executable_name\";\n\n  if(!(copy(\"$executable_name\", \"$final_executable\"))) {\n      $$message_ref = \"\\n\\[300\\]sub $test_name_string: \" .\n                  \"cannot copy $executable_name to $final_subdir\\n\";\n      return (EXIT_FAILURE);\n  }\n\n  $error = pipe_a_command(\n                           $test_number,\n                           $sub_test,\n                           $test_name_string,\n                           $final_subdir, \n                           $command_string,\n                           $executable_name,\n                           $expected_result,\n                           $os, \n                           $verbose,\n                           $message_ref,\n                           $print_cannot_locate_message,\n                        );\n\n  return ($error);\n}",
      "file" : "/var/tmp/arv_pH__38/PAR-Packer-1.014/contrib/automated_pp_test/test_in_further_subdir.pm",
      "package" : "test_in_further_subdir"
   }
]
