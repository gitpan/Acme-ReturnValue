[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub CORRECT_TYPOS {\n  return (defined $_[0] ? $CORRECT_TYPOS = $_[0] : $CORRECT_TYPOS);\n}",
      "file" : "/var/tmp/arv_qC8Mo1/Games-Rezrov-0.20/ZOptions.pm",
      "package" : "Games::Rezrov::ZOptions"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub inline {\n  my $ref = shift;\n  \n  my $rep = 'vec($Games::Rezrov::StoryFile::STORY_BYTES, $Games::Rezrov::StoryFile::PC++, 8)';\n  $$ref =~ s/GET_BYTE\\(\\)/$rep/og;\n  \n  $rep = '(vec($Games::Rezrov::StoryFile::STORY_BYTES, $Games::Rezrov::StoryFile::PC++, 8) << 8) + vec($Games::Rezrov::StoryFile::STORY_BYTES, $Games::Rezrov::StoryFile::PC++, 8)';\n  $$ref =~ s/GET_WORD\\(\\)/$rep/og;\n\n  $rep = 'unpack(\"S\", pack(\"s\", %s))';\n  $$ref =~ s/UNSIGNED_WORD\\((.*?)\\)/sprintf $rep, $1/eog;\n\n  $rep = 'unpack(\"s\", pack(\"s\", %s))';\n  $$ref =~ s/SIGNED_WORD\\((.*?)\\)/sprintf $rep, $1/eog;\n\n  $rep = 'vec($Games::Rezrov::StoryFile::STORY_BYTES, %s, 8)';\n  $$ref =~ s/GET_BYTE_AT\\((.*?)\\)/sprintf $rep, $1/eog;\n\n  $rep = '(vec($Games::Rezrov::StoryFile::STORY_BYTES, %s, 8) << 8) + vec($Games::Rezrov::StoryFile::STORY_BYTES, %s + 1, 8)';\n  $$ref =~ s/GET_WORD_AT\\((.*?)\\)/sprintf $rep, $1, $1/eog;\n  \n}",
      "file" : "/var/tmp/arv_qC8Mo1/Games-Rezrov-0.20/Inliner.pm",
      "package" : "Games::Rezrov::Inliner"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub new {\n  confess unless @_ == 3;\n  my ($type, $id, $object_cache) = @_;\n  my $self = {};\n  bless $self, $type;\n\n  my $pid = Games::Rezrov::StoryFile::player_object() || -1;\n  my $current_room = Games::Rezrov::StoryFile::current_room() || -1;\n  my $zo = $object_cache->get($id);\n  my $levels = 0;\n  my $last;\n\n  my $oid = $zo->object_id();\n  $self->is_player($pid == $oid);\n  $self->is_current_room($current_room == $oid);\n\n  while (1) {\n    last unless defined $zo;\n    my $oid = $zo->object_id();\n    $self->in_inventory(1) if $oid == $pid;\n    if ($levels and $object_cache->is_room($oid)) {\n      $self->in_current_room(1) if ($oid == $current_room);\n      $self->parent_room($zo);\n      $self->toplevel_child($last);\n      last;\n    }\n    $levels++;\n    $last = $zo;\n    $zo = $object_cache->get($zo->get_parent_id());\n  }\n  $self->is_toplevel_child($levels == 1);\n  \n  return $self;\n}",
      "file" : "/var/tmp/arv_qC8Mo1/Games-Rezrov-0.20/ZObjectStatus.pm",
      "package" : "Games::Rezrov::ZObjectStatus"
   }
]
