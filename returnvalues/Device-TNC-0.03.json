[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "DESTROY\n{\n\t$m_port->close() or\n\t\twarn \"Error: Failed to the serial port \\\"$m_port_name\\\": $!\\n\";\n\n\t$m_raw_log->close() if $m_raw_log;\n\n}\n\n\n\nsub read_kiss_frame\n{\n\tmy $self = shift;\n\tmy @frame;\n\tmy $fend_count = 0;\n\tif ($self->{'FILE'})\n\t{\n\t\twhile(1)\n\t\t{\n\t\t\tmy $saw = $self->{'FILE_HANDLE'}->getc();\n\n\t\t\t$fend_count++ if (ord($saw) == $FEND);\n\t\t\tpush @frame, $saw if $fend_count > 0;\n\n\t\t\tif ($fend_count == 2)\n\t\t\t{\n\t\t\t\tif (scalar @frame > 2)\n\t\t\t\t{\n\t\t\t\t\tlast;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$fend_count--;\n\t\t\t\t\t@frame = ($saw);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\twhile(1)\n\t\t{\n\t\t\tmy ($count,$saw) = $self->{'PORT'}->read(1);\n\t\t\tif ($count > 0)\n\t\t\t{\n\t\t\t\t$self->{'RAW_LOG'}->write($saw) if $self->{'RAW_LOG'};\n\t\t\t\t$fend_count++ if (ord($saw) == $FEND);\n\t\t\t\tpush @frame, $saw if $fend_count > 0;\n\n\t\t\t\tif ($fend_count == 2)\n\t\t\t\t{\n\t\t\t\t\tif (scalar @frame > 2)\n\t\t\t\t\t{\n\t\t\t\t\t\tlast;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$fend_count--;\n\t\t\t\t\t\t@frame = ($saw);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t$self->{'LAST_KISS_FRAME_LENGTH'} = scalar @frame;\n\n\tif (wantarray)\n\t{\n\t\treturn @frame;\n\t}\n\telse\n\t{\n\t\tmy $frame = join '', @frame;\n\t\treturn $frame;\n\t}\n}\n\n\n\nsub read_hdlc_frame\n{\n\tmy $self = shift;\n\n\tmy @frame;\n\tmy $type;\n\n\tmy @kiss = $self->read_kiss_frame();\n\tfor (my $location = 0; $location <= $#kiss; $location++)\n\t{\n\t\tif ($location == 0)\n\t\t{\n\t\t\tunless (ord($kiss[$location]) == $FEND)\n\t\t\t{\n\t\t\t\twarn \"Warning: Malformed KISS frame read. Didn't start with FEND\\n\" if $self->{'WARN_MALFORMED_KISS'};\n\t\t\t}\n\t\t}\n\t\telsif ($location == $#kiss)\n\t\t{\n\t\t\tunless (ord($kiss[$location]) == $FEND)\n\t\t\t{\n\t\t\t\twarn \"Warning: Malformed KISS frame read. Didn't end with FEND\\n\" if $self->{'WARN_MALFORMED_KISS'};\n\t\t\t}\n\t\t}\n\t\telsif ($location == 1)\n\t\t{\n\t\t\t$type = $kiss[$location];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (ord($kiss[$location]) == $FESC)\n\t\t\t{\n\t\t\t\tif (ord($kiss[$location + 1]) == $TFESC)\n\t\t\t\t{\n\t\t\t\t\tpush @frame, pack(\"c\", $FESC);\n\t\t\t\t\t$location++;\n\t\t\t\t}\n\t\t\t\telsif (ord($kiss[$location + 1]) == $TFEND)\n\t\t\t\t{\n\t\t\t\t\tpush @frame, pack(\"c\", $FEND);\n\t\t\t\t\t$location++;\n\t\t\t\t}\n\t\t\t\telsif (ord($kiss[$location + 1]) != $TFESC)\n\t\t\t\t{\n\t\t\t\t\twarn \"Warning: Malformed KISS frame read. Expected TFESC after FESC\\n\" if $self->{'WARN_MALFORMED_KISS'};\n\t\t\t\t}\n\t\t\t\telsif (ord($kiss[$location + 1]) != $TFEND)\n\t\t\t\t{\n\t\t\t\t\twarn \"Warning: Malformed KISS frame read. Expected TFEND after FESC\\n\" if $self->{'WARN_MALFORMED_KISS'};\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tpush @frame, $kiss[$location];\n\t\t\t}\n\t\t}\n\t}\n\n\tif (wantarray)\n\t{\n\t\treturn $type, @frame;\n\t}\n\telse\n\t{\n\t\tmy $frame = join '', @frame;\n\t\treturn $type, $frame;\n\t}\n}\n\n1",
      "file" : "/var/tmp/arv_HUNcKa/Device-TNC-0.03/lib/Device/TNC/KISS.pm",
      "package" : "Device::TNC::KISS"
   }
]
