[
   {
      "PPI" : "PPI::Statement::Variable",
      "bad" : "our $VERSION = '0.1'",
      "file" : "/var/tmp/arv_LGrIR5/PBJ-JNI-0.1/lib/PBJ/JNI.pm",
      "package" : "PBJ::JNI"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub get_static_field() {\n  my ($clz, $env, $cls_name, $fld_name, $fld_sig) = @_;\n  my ($cls, $fid, $mid, $fld, $value);\n\n  $env->PushLocalFrame(16) == 0 or die;\n  $cls = $env->FindClass($cls_name) or die;\n  $fid = $env->GetStaticFieldID($cls, $fld_name, $fld_sig) or die;\n  $value = $env->GetStaticIntField($cls, $fid) or die;\n  $env->PopLocalFrame(0);\n  return $value;\n}",
      "file" : "/var/tmp/arv_LGrIR5/PBJ-JNI-0.1/lib/PBJ/JNI/Util.pm",
      "package" : "PBJ::JNI::Util"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub callback() {\n  my $_env = shift;\n  my $jmethod = shift;\n  my ($ret, $env);\n  my ($method, $cptr, $is_copy);\n\n  $env = new PBJ::JNI::JNIEnv($_env);\n\n  $env->PushLocalFrame(16) == 0 or die;\n  $method = $env->GetStringUTFChars($jmethod, $is_copy, $cptr);\n  $env->ReleaseStringUTFChars($jmethod, $cptr);\n  $env->PopLocalFrame(0);\n\n  unshift(@_, $env);\n  eval { package MAIN; $ret = &$method; };\n  if ($@) {\n    croak(\"$method: $@\");\n  }\n  return $ret;\n}",
      "file" : "/var/tmp/arv_LGrIR5/PBJ-JNI-0.1/lib/PBJ/JNI/Callback.pm",
      "package" : "PBJ::JNI::Callback"
   }
]
