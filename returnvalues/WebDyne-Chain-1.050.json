[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub UNIVERSAL::AUTOLOAD {\n\n\n    my $self=$_[0];\n    my $autoload=$UNIVERSAL::AUTOLOAD || return;\n\n\n    return if $autoload=~/::DESTROY$/;\n\n\n    debug(\"in UNIVERSAL::AUTOLOAD, self $self, autoload $autoload, caller %s\",\n\t  Dumper([(caller(1))[0..3]]));\n\n\n    my $r; {\n\tlocal $SIG{'__DIE__'}=undef;\n\tunless (eval{ ref($self) && ($r=$self->{'_r'}) }) {\n\t    err(\"call to run %s UNIVERSAL::AUTOLOAD for non chained method '$autoload', self ref '$self'.\", +__PACKAGE__);\n\t    goto RENDER_ERROR;\n\t}\n    }\n\n\n\n    my ($package_autoload, $method_autoload)=($autoload=~/(.*)::(.*?)$/);\n    debug(\"package_autoload $package_autoload, method_autoload $method_autoload\");\n\n\n    my $chain_ar=$Package{'_chain_ar'};\n    my $location=join(undef, @{$chain_ar});\n    debug('going through chain %s', Dumper($chain_ar));\n\n\n    my $subroutine_caller=(caller(1))[3];\n    my $subroutine_caller_cr=\\&{\"$subroutine_caller\"};\n    my ($package_caller, $method_caller)=($subroutine_caller=~/(.*)::(.*?)$/);\n    debug(\"package_caller $package_caller, method_caller $method_caller\");\n\n\n    my $i=0;\n    if ($autoload=~/\\QSUPER::$method_autoload\\E$/) {\n\tdebug(\"SUPER method\");\n\tfor (1; $i < @{$chain_ar}; $i++) {\n\t    if (UNIVERSAL::can($chain_ar->[$i], $method_caller) eq $subroutine_caller_cr) {\n\t\t$i++;\n\t\tlast;\n\t    }\n\t    else {\n\t\tdebug(\"miss on package $chain_ar->[$i], $_ ne $subroutine_caller_cr\");\n\t    }\n\t}\n\tdebug(\"loop finished, i $i, chain_ar %s\", $#{$chain_ar});\n    }\n\n\n    foreach $i ($i .. $#{$chain_ar}) {\n\n\n\tdebug(\"look for $method_autoload in package $chain_ar->[$i]\");\n\tif (my $cr=UNIVERSAL::can($chain_ar->[$i], $method_autoload)) {\n\n\n\t    if ($cr eq $subroutine_caller_cr) {\n\t\terr(\"detected AUTOLOAD loop for method '$method_autoload' \".\n\t\t\t\"package $package_caller. Current chain: %s\", join(', ', @{$chain_ar}));\n\t\tgoto RENDER_ERROR;\n\t    }\n\n\n\t    debug('hit');\n\t    *{$autoload}=$cr;\n\n\n\t    $Package{'_chain_hr'}{$location}{$autoload}=$cr;\n\t    $Package{'_chain_current_hr'} ||= $Package{'_chain_hr'}{$location};\n\n\n\t    goto &{$cr};\n\n\t}\n\telse {\n\n\n\t    debug(\"unable to find method $method_autoload in package $chain_ar->[$i]\");\n\n\t}\n\n    }\n\n\n    debug(\"checking back through callstack for method $method_autoload\");\n    my %chain=map { $_=> 1} @{$chain_ar};\n    my @caller;\n    for ($i=0; my $caller=(caller($i))[0]; $i++) {\n\tnext if $chain{$caller}++; \n\tpush @caller, $caller;\n\tif (my $cr=UNIVERSAL::can($caller, $method_autoload)) {\n \t    if ($cr eq $subroutine_caller_cr) {\n \t\terr(\"detected AUTOLOAD loop for method '$method_autoload' \".\n \t\t\t\"package $package_caller. Current chain: %s\", join(', ', @{$chain_ar}));\n \t\tgoto RENDER_ERROR;\n \t    }\n\t    if ($WEBDYNE_AUTOLOAD_POLLUTE) {\n\t\t*{$autoload}=$cr;\n\t\t$Package{'_chain_hr'}{$location}{$autoload}=$cr;\n\t    }\n\t    goto &{$cr}\n\t}\n    }\n\n\n    err(\"method '$method_autoload' not found in call chain: %s\", join(',', @caller));\n    goto RENDER_ERROR;\n\n}",
      "file" : "/var/tmp/arv_oRskFR/WebDyne-Chain-1.050/lib/WebDyne/Chain.pm",
      "package" : "WebDyne::Chain"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$_=\\%Constant",
      "file" : "/var/tmp/arv_oRskFR/WebDyne-Chain-1.050/lib/WebDyne/Chain/Constant.pm",
      "package" : "WebDyne::Chain::Constant"
   }
]
