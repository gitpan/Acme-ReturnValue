[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method get_base_url {\n    return $self->scheme \n                . '://' . $self->host \n                . ':' . $self->port;\n}\n\n\nmethod post_url ($uri,%args) {\n    return $self->user_agent->post( $uri , \\%args );\n}\n\nmethod get_url ($uri) {\n    return $self->user_agent->get($uri);\n}\n\nmethod get_json ( $uri ) {\n    my $response = $self->user_agent->get($uri);\n    return decode_json $response->decoded_content if $response->is_success;\n}\n\nmethod summary {\n    my $uri = $self->get_base_url . '/api/json';\n    return $self->get_json( $uri );\n}\n\nmethod mode {\n    return $self->summary->{mode};\n}\n\nmethod jobs {\n    return map { Net::Jenkins::Job->new( %$_ , api => $self ) } @{ $self->summary->{jobs} };\n}\n\nmethod use_security {\n    return $self->summary->{useSecurity};\n}\n\nmethod use_crumbs {\n    return $self->summary->{useCrumbs};\n}\n\nmethod views {\n    return @{ $self->summary->{views} };\n}\n\nmethod restart {\n    my $uri = $self->get_base_url . '/restart';\n    return $self->get_url( $uri )->is_success;\n}\n\n\nmethod create_job ($job_name,$xml) {\n    my $uri = URI->new( $self->get_base_url . '/createItem' );\n    $uri->query_form( name => $job_name );\n    my $response = $self->user_agent->post( $uri , \"Content-Type\" => \"application/xml\" , Content => $xml );\n    return $response->code == 200;\n}\n\nmethod update_job ($job_name,$xml) {\n    my $uri = URI->new( $self->job_url($job_name) . '/config.xml' );\n    my $response = $self->user_agent->post( $uri , \"Content-Type\" => \"application/xml\" , Content => $xml );\n    return $response->code == 200;\n}\n\nmethod copy_job ($job_name, $from_job_name) {\n    my $uri = URI->new( $self->get_base_url . '/createItem' );\n\n    $uri->query_form( name => $job_name , from => $from_job_name , mode => 'copy' );\n    my $response = $self->user_agent->post( $uri );\n    return $response->code == 302 ? 1 : 0;\n}\n\nmethod delete_job ($job_name) {\n    my $uri = $self->job_url($job_name) . '/doDelete';\n    return $self->post_url( $uri )->code == 302 ? 1 : 0;\n}\n\nmethod disable_job ($job_name) {\n    my $uri = $self->job_url($job_name) . '/disable';\n    return $self->post_url( $uri )->code == 302 ? 1 : 0;\n}\n\nmethod enable_job ($job_name) {\n    my $uri = $self->job_url($job_name) . '/enable';\n    return $self->post_url( $uri )->code == 302 ? 1 : 0;\n}\n\nmethod build_job ($job_name) {\n    my $uri = $self->job_url($job_name) . '/build';\n    return $self->post_url( $uri )->code == 302 ? 1 : 0;\n}\n\n\nmethod get_job_details ($job_name) {\n    return $self->get_json(\n        $self->job_url($job_name) . '/api/json'\n    );\n}\n\n\n\n\nmethod get_builds ($job_name) {\n    my $config = $self->get_job_details($job_name);\n    return @{ $config->{builds} };\n}\n\nmethod get_build_details ($job_name, $number) {\n    my $uri = $self->job_build_url($job_name,$number) . '/api/json';\n    return $self->get_json($uri);\n}\n\n\nmethod get_build_console_handle ($job_name, $number) {\n    my $uri = URI->new( $self->job_build_url($job_name,$number) . '/consoleText' );\n\n\n    my $s = Net::HTTP->new(Host => $self->host ) || die $@;\n    $s->write_request(GET => $uri->path , 'User-Agent' => \"Perl/Net::Jenkins\");\n    my($code, $mess, %h) = $s->read_response_headers;\n\n    return $s if $code == 200;\n}\n\nmethod get_build_console ($job_name, $number) {\n    my $s = $self->get_build_console_handle( $job_name, $number );\n    return unless $s;\n\n    my $body = '';;\n    while (1) {\n        my $buf;\n        my $n = $s->read_entity_body($buf, 1024);\n        die \"build console of $job_name #$number read failed: $!\" unless defined $n;\n        last unless $n;\n        $body .= $buf;\n    }\n    return $body;\n}\n\nmethod job_url ($job_name) {\n    return $self->get_base_url . '/job/' . $job_name;\n}\n\nmethod job_build_url ($job_name,$number) {\n    return $self->job_url($job_name) . '/' . $number;\n}\n\n1",
      "file" : "/var/tmp/arv_3dp6UG/Net-Jenkins-0.07/lib/Net/Jenkins.pm",
      "package" : "Net::Jenkins"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method delete {\n    return $self->api->delete_job( $self->name );\n}\n\nmethod update ($xml) {\n    return $self->api->update_job( $self->name, $xml );\n}\n\nmethod copy ($new_job_name) {\n    return $self->api->copy_job( $new_job_name , $self->name );\n}\n\n\nmethod enable {\n    return $self->api->enable_job($self->name);\n}\n\nmethod disable {\n    return $self->api->disable_job($self->name);\n}\n\n\nmethod build {\n    return $self->api->build_job($self->name);\n}\n\n\nmethod details {\n    return $self->api->get_job_details( $self->name );\n}\n\nmethod description {\n    return $self->details->{description};\n}\n\nmethod desc {\n    return $self->description;\n}\n\nmethod in_queue {\n    return $self->details->{inQueue};\n}\n\nmethod queue_item {\n    return Net::Jenkins::Job::QueueItem->new( %{ $self->details->{queueItem} } , api => $self->api , job => $self );\n}\n\nmethod builds {\n    return map { Net::Jenkins::Job::Build->new( %$_ , api => $self->api, job => $self ) } \n            $self->api->get_builds( $self->name );\n}\n\nmethod last_build {\n    my $b = $self->details->{lastBuild};\n    return Net::Jenkins::Job::Build->new( %$b , api => $self->api , job => $self ) if $b && %$b;\n}\n\nmethod first_build {\n    my $b = $self->details->{firstBuild};\n    return Net::Jenkins::Job::Build->new( %$b , api => $self->api , job => $self ) if $b && %$b;\n}\n\nmethod to_hashref ($with_details,$with_builds) {\n    return {\n        name    => $self->name,\n        color   => $self->color,\n        url     => $self->url,\n        ($with_details) ? ( details => $self->details ) : (),\n        ($with_builds)  ? (\n            builds => [ map { \n                    $_->to_hashref($with_details) \n                } $self->builds ],\n        ) : (),\n    };\n}\n\n1",
      "file" : "/var/tmp/arv_3dp6UG/Net-Jenkins-0.07/lib/Net/Jenkins/Job.pm",
      "package" : "Net::Jenkins::Job"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method details {\n    return $self->api->get_build_details( $self->job->name, $self->number );\n}\n\nmethod result {\n    return $self->details->{result};\n}\n\nmethod building {\n    return $self->details->{building};\n}\n\nmethod id {\n    return $self->details->{id};\n}\n\nmethod name {\n    return $self->details->{fullDisplayName};\n}\n\nmethod created_at {\n    return DateTime->from_epoch( epoch => $self->details->{timestamp} );\n}\n\nmethod console {\n    return $self->api->get_build_console( $self->job->name, $self->number );\n}\n\nmethod console_handle {\n    return $self->api->get_build_console_handle( $self->job->name , $self->number );\n}\n\nmethod to_hashref ($with_details) {\n    return {\n        number => $self->number,\n        url => $self->url,\n        job => $self->job->to_hashref,\n        ($with_details ? \n            ( details => $self->details ) : () ),\n    };\n}\n\n1",
      "file" : "/var/tmp/arv_3dp6UG/Net-Jenkins-0.07/lib/Net/Jenkins/Job/Build.pm",
      "package" : "Net::Jenkins::Job::Build"
   }
]
