[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub collate_results {\n    my $rlist = $_[0];\n    my $nresults = $_[1];\n    my $q = $_[2];\n\n    my ($i, $i_val, $n, %results, $word, $collated_rlist, $regex);\n\n    $regex = $q -> {displayregex};\n\n    foreach $i (@{$rlist}) {\n\t($word) = ($i =~ m\"($regex)\");\n\tnext unless $word;\n\t$results{$word} = _new_array_ref () unless $results{$word};\n\tpush @{$results{$word}}, ($i);\n    }\n    \n    $n = 1;\n    $collated_rlist = _new_array_ref;\n\n    push @{$collated_rlist}, ($rlist->[0]);\n\n    while (($n <= $nresults) && %results) {\n\tforeach $i (keys %results) {\n\t    last if $n > $nresults;\n\t    if ($#{$results{$i}} >= 0) {\n\t\t$i_val = shift @{$results{$i}};\n\t\tpush @{$collated_rlist}, ($i_val);\n\t\t++$n;\n\t    } else {\n\t\tdelete $results{$i};\n\t    }\n\t}\n    }\n    return $collated_rlist;\n}",
      "file" : "/var/tmp/arv_KRclM_/onsearch-0.99/lib/OnSearch/Results.pm",
      "package" : "OnSearch::Results"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub s_write {\n    my $session_id = shift;\n    my $buf = shift;\n    my ($name, $clientfh, $serverfh, $r, $buflength);\n    $name = '/tmp/.onsearch.sock.' . $session_id;\n    socket ($serverfh, PF_UNIX, SOCK_STREAM, 0) || \n\tdie \"OnSearch: s_write socket: $!\";\n    if (-S $name && ! unlink ($name)) {\t\n\t&$logfunc ('error', \"s_write unlink: $!\\n\"); \n      }\n    bind ($serverfh, sockaddr_un($name)) || \n\t&$logfunc ('notice', \"s_write bind: $!.\"); \n    listen ($serverfh, SOMAXCONN) || \n\t&$logfunc ('notice', \"s_write listen: $!.\"); \n    accept ($clientfh, $serverfh) ||\n\t&$logfunc ('notice', \"s_write accept: $!.\"); \n    if (fileno ($clientfh)) {\n\t$buflength = length ($buf);\n\tif (($r = syswrite ($clientfh, $buf)) != $buflength) {\n\t    &$logfunc ('error', \n\t       \"s_write error $r chars of $buflength written:  $!.\");\n\t}\n\tclose $clientfh;\n\tclose $serverfh;\n    }\n    return;\n}",
      "file" : "/var/tmp/arv_KRclM_/onsearch-0.99/lib/OnSearch/Search.pm",
      "package" : "OnSearch::Search"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub local_url {\n    my $path = $_[0];\n\n    my $server_domain = $ENV{DOCUMENT_ROOT};\n    my $server_name = $ENV{SERVER_NAME};\n    my $server_port = $ENV{SERVER_PORT};\n    my $symlinks_ok = OnSearch::AppConfig->str ('HasSymLinks');\n    my ($sitepath, $url, $actual_dir);\n\n    if ($symlinks_ok && -l $server_domain) { \n\tif ($path !~ m\"$server_domain\"i) {\n\t    $actual_dir = readlink ($server_domain);\n\t} else {\n\t    $actual_dir = $server_domain;\n\t}\n    } else {\n\t$actual_dir = $server_domain;\n    }\n\n    if ($path =~ m\"^$actual_dir\"i) {\n\t($path) = ($path =~ m\"^$actual_dir(.*)\");\n\n\tif ($path !~ /^\\//) { $path = '/' . $path; }\n\t\n\tmy $server_url = \"http://$server_name\" . \n\t    (($server_port ne '80') ? \":$server_port\" : '');\n\treturn \"$server_url$path\";\n    }\n\n    return undef;\n}",
      "file" : "/var/tmp/arv_KRclM_/onsearch-0.99/lib/OnSearch/URL.pm",
      "package" : "OnSearch::URL"
   }
]
