[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parseContent\n{\n    my ($self) = shift;\n\n    die \"no tag found in in_identd line $$self{content}\" unless\n\tdefined $$self{tag};\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/In_identdLine.pm",
      "package" : "SyslogScan::In_identdLine"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parseContent\n{\n    my ($self) = shift;\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/UnsupportedEntry.pm",
      "package" : "SyslogScan::UnsupportedEntry"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parseContent\n{\n    my($self) = shift;\n\n    my $attrHashRef = $$self{\"attrHash\"};\n    if (! defined $$attrHashRef{owner})\n    {\n\tdie(\"No owner field in clone line %$attrHashRef\");\n    }\n    return;\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/SendmailLineClone.pm",
      "package" : "SyslogScan::SendmailLineClone"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _listToHash\n{\n    my ($self, @list) = @_;\n    my (%hash);\n    foreach (@list)\n    {\n\ts/\\'/\\\"/g;  \n\tdie \"equals not found in $_\" unless /([^=]+)=(.+)/;\n\t$hash{$1} = $2;\n    }\n    %hash;\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/SendmailLineTrans.pm",
      "package" : "SyslogScan::SendmailLineTrans"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub addSummary\n{\n    my $self = shift;\n    my $other = shift;\n\n    my $address;\n    foreach $address (keys %$other)\n    {\n\tif (! $$self{$address})\n\t{\n\t    $$self{$address} = new SyslogScan::Usage();\n\t}\n\t$$self{$address} -> addUsage($$other{$address});\n    }\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/Summary.pm",
      "package" : "SyslogScan::Summary"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parseContent\n{\n    my ($self) = @_;\n    \n    my $attrHashRef = $$self{\"attrHash\"};\n    if ($$attrHashRef{\"size\"} !~ /^\\-?\\d+$/)\n    {\n\tdie(\"No legal size field in %$attrHashRef\");\n    }\n    $$attrHashRef{\"size\"} = 0 if $$attrHashRef{\"size\"} < 0;\n\n    $$attrHashRef{\"from\"} =\n\t&SyslogScan::SendmailUtil::canonAddress($$attrHashRef{\"from\"});\n\n    return;\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/SendmailLineFrom.pm",
      "package" : "SyslogScan::SendmailLineFrom"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub dump\n{\n    my $self = shift;\n\n    my $retString;\n\n    my $group;\n    foreach $group (sort keys %$self)\n    {\n\t$retString .= \"$group TOTAL:\\n\";\n\t$retString .= $$self{$group} -> dump();\n\t$retString .= \"\\n\";\n    }\n    return $retString;\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/ByGroup.pm",
      "package" : "SyslogScan::ByGroup"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parseContent\n{\n    my ($self) = @_;\n\n    my $attrHashRef = $$self{attrHash};\n    if (! defined($$attrHashRef{\"stat\"}))\n    {\n\tprint STDERR \"No status field in attrHash for id $$self{messageID}\\n\"\n\t    unless $::gbQuiet;\n    }\n\n    my(@toList) = split(',', $$attrHashRef{\"to\"});\n\n    grep($_ = &SyslogScan::SendmailUtil::canonAddress($_),@toList);\n\n    $$self{\"toList\"} = \\@toList;\n    return;\n}",
      "file" : "/var/tmp/arv_sCmVke/SyslogScan-0.32/SyslogScan/SendmailLineTo.pm",
      "package" : "SyslogScan::SendmailLineTo"
   }
]
