[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method set_template($name,$value) {\n    $self->meta->add_method( \"template $name\" => $value );\n}\n\nmethod t($name) {\n    my $method = $self->meta->get_method( \"template $name\" )\n        or die \"template '$name' not found\\n\";\n    return $method->body;\n}\n\nmethod all_templates {\n    return \n        sort\n        map { /\\s(.*)/ }\n        grep { /^template / } $self->meta->get_method_list;\n}\n\n\n\nmethod import_template_dir($directory) {\n\n   $directory = dir( $directory );\n\n   return map {\n        $self->import_template(\"$_\")      \n   } grep { $_->basename =~ /\\.bou$/ } grep { -f $_ } $directory->children;\n}\n\nsub add_template {\n    my ( $self, $label, $sub ) = @_;\n\n    $self->set_template( $label => $sub );\n}\n\nsub render {\n    my ( $self, $template, @args ) = @_;\n\n    my $method = ref $template eq 'CODE' ? $template : $self->t($template);\n\n    my $output = do\n    {\n        local $Template::Caribou::TEMPLATE = $self;\n            \n        local $Template::Caribou::IN_RENDER = 1;\n        local *STDOUT;\n        local *::RAW;\n        local $Template::Caribou::OUTPUT;\n        local %Template::Caribou::attr;\n        tie *STDOUT, 'Template::Caribou::Output';\n        tie *::RAW, 'Template::Caribou::OutputRaw';\n        my $res = $method->( $self, @args );\n\n        $Template::Caribou::OUTPUT \n            or ref $res ? $res : Template::Caribou::Output::escape( $res );\n    };\n\n    $output = Template::Caribou::String->new( $output ) \n        if $Template::Caribou::IN_RENDER;\n\n    $DB::single = 1;\n\n    print ::RAW $output if $Template::Caribou::IN_RENDER and not defined wantarray;\n\n    if( !$Template::Caribou::IN_RENDER and $self->has_formatter ) {\n        $output = $self->format($output);\n    }\n\n    return $output;\n}\n\n\nsub show {\n    croak \"'show()' must be called from within a template\"\n        unless $Template::Caribou::IN_RENDER;\n\n    print ::RAW $Template::Caribou::TEMPLATE->render( @_ );\n}\n\n1",
      "file" : "/var/tmp/arv_Vh8m0H/Template-Caribou-0.2.0/lib/Template/Caribou.pm",
      "package" : "Template::Caribou"
   }
]
