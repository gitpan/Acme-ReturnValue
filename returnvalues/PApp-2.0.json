[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DESTROY {\n   $self->unlock while $self->{locked};\n}",
      "file" : "/var/tmp/arv_hA4gjG/PApp-2.0/PApp/Lock.pm",
      "package" : "PApp::Lock"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DESTROY { }",
      "file" : "/var/tmp/arv_hA4gjG/PApp-2.0/PApp/DataRef.pm",
      "package" : "PApp::DataRef"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parse_params($) {\n   map { /([^=]+)(?:=(.*))?/ and (unescape $1, unescape $2) } split /[&;]/, $_[0];\n}",
      "file" : "/var/tmp/arv_hA4gjG/PApp-2.0/PApp/HTML.pm",
      "package" : "PApp::HTML"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub ref($) {\n   require PApp::DataRef;\n\n   \\(new PApp::DataRef 'DB_row',\n         database => $PApp::Config::Database,\n         table    => \"session\", \n         key      => [qw(sid name)],\n         id       => [$PApp::sessionid, $_[0]],\n         utf8     => 1,\n   )->{\n      [\"value\", PApp::DataRef::DB_row::filter_sfreeze_cr]\n   };\n}",
      "file" : "/var/tmp/arv_hA4gjG/PApp-2.0/PApp/Session.pm",
      "package" : "PApp::Session"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub find_value($$$) {\n   sql_ufetchall $DBH, \"select uid from prefs where path = ? and name = ? and value = ?\",\n                 ${$_[0]{path}}, $_[1], $_[2];\n}",
      "file" : "/var/tmp/arv_hA4gjG/PApp-2.0/PApp/Prefs.pm",
      "package" : "PApp::Prefs"
   }
]
