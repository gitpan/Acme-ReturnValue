[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _updateMe {\n  my $w = shift;\n  return unless $w->toplevel->ismapped;\n\n  my $depth = $w->screendepth;\n  my @vis   = $w->visualsavailable;\n  my $bg    = $w->cget('-bg');\n  my $fg    = $w->cget('-fg') || 'black';\n  my @bgRGB = $w->rgb($bg);\n  my @fgRGB = $w->rgb($fg);\n\n  $_ = int(255 * $_ / 65535) for @bgRGB, @fgRGB;\n\n  my $wbg   = sprintf \"0x%02X%02X%02X\" => reverse @bgRGB;\n  my $wfg   = sprintf \"0x%02X%02X%02X\" => reverse @fgRGB;\n\n  my $angle = $w->{ANGLE};\n\n  my $fontO  = $w->cget('-font');\n  my $family = $w->fontActual($fontO, '-family');\n  my $size   = $w->fontActual($fontO, '-size');\n  my $weight = $w->fontActual($fontO, '-weight');\n  my $slant  = $w->fontActual($fontO, '-slant');\n  my $uline  = $w->fontActual($fontO, '-underline');\n  my $strike = $w->fontActual($fontO, '-overstrike');\n\n  $w->update;\n  my $id  = eval($w->id);\n  my $hdc = $GetDC->Call($id);\n\n  my $font = $CreateFont->Call(int($size * 108 / 72),  \n          0, $angle * 10, 0,\n          ($weight eq 'normal' ? 400 : 700),\n          ($slant  eq 'roman'  ?   0 :   1),\n          $uline,\n          $strike,\n          0, 0, 0, 0, 0,\n          $family);\n\n  my $old = $SelectObject->Call($hdc, $font);\n\n  $SetBkColor  ->Call($hdc, eval $wbg);\n  $SetTextColor->Call($hdc, eval $wfg);\n\n  my $text;\n  if (defined $w->{TEXTV} && ref($w->{TEXTV}) eq 'SCALAR') {\n    $text = ${$w->{TEXTV}};\n  } else {\n    $text = $w->{TEXT};\n  }\n  my $len = length $text;\n\n  my $r = $GetTextExtent->Call($hdc, $text, $len, 0, 0);\n  my $y = $r >> 16;\n  my $x = $r & 65535;\n\n  my $cos = abs(cos $angle * 3.14159 / 180);\n  my $sin = abs(sin $angle * 3.14159 / 180);\n\n  my $W = $x * $cos + $y * $sin;\n  my $H = $y * $cos + $x * $sin;\n\n  $w->configure(-width  => $W,\n\t\t-height => $H);\n\n  $w->update;\n\n  $W = $w->reqwidth;\n  $H = $w->reqheight;\n\n  my ($X, $Y) = (0, 0);\n  if ($angle <= 90) {\n    $Y = $x * $sin;\n  } elsif ($angle <= 180) {\n    $Y = $H;\n    $X = $x * $cos;\n  } elsif ($angle <= 270) {\n    $X = $W;\n    $Y = $H - $x * $sin;\n  } else {\n    $X = $W - $x * $cos;\n  }\n  $ExtTextOut->Call(\n      $hdc,\n      int $X,\n      int $Y,\n      0,\n      0,\n      $text, $len,\n      0\n     );\n\n  $SelectObject->Call($hdc, $old);\n  $DeleteObject->Call($font);\n  $ReleaseDC   ->Call($id, $hdc);\n}",
      "file" : "/var/tmp/arv_QjujFe/Tk-Win32RotLabel-0.4/Win32RotLabel.pm",
      "package" : "Tk::Win32RotLabel"
   }
]
