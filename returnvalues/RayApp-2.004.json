[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub find_stylesheet {\n\tmy ($self, $uri, $type) = @_;\n\treturn if not defined $type;\n\tmy @exts = ('.xsl', '.xslt', '.html.xsl', '.html.xslt');\n\tif ($type eq 'txt') {\n\t\t@exts = ('.txtxsl', '.txtxslt', '.txt.xsl', '.txt.xslt');\n\t} elsif ($type eq 'pdf' or $type eq 'fo') {\n\t\t@exts = ('.foxsl', '.foxslt', '.fo.xsl', '.fo.xslt');\n\t}\n\tfor my $ext (@exts) {\n\t\tif (-f $uri . $ext) {\n\t\t\treturn $uri . $ext;\n\t\t}\n\t}\n        if ($type eq 'html'\n                and defined $ENV{'RAYAPP_HTML_STYLESHEETS'}) {\n\t\treturn split /:/, $ENV{'RAYAPP_HTML_STYLESHEETS'};\n        } elsif ($type eq 'txt'\n                and defined $ENV{'RAYAPP_TXT_STYLESHEETS'}) {\n\t\treturn split /:/, $ENV{'RAYAPP_TXT_STYLESHEETS'};\n        } elsif (($type eq 'pdf' or $type eq 'fo')\n                and defined $ENV{'RAYAPP_FO_STYLESHEETS'}) {\n\t\treturn split /:/, $ENV{'RAYAPP_FO_STYLESHEETS'};\n        }\n\treturn;\n}",
      "file" : "/var/tmp/arv_S8J3yQ/RayApp-2.004/origlib/RayApp.pm",
      "package" : "RayApp"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub xmldom {\n\tmy $self = shift;\n\treturn $self->{xmldom};\n}",
      "file" : "/var/tmp/arv_S8J3yQ/RayApp-2.004/origlib/RayApp/Source.pm",
      "package" : "RayApp::Source"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub validate_parameters {\n\tmy $self = shift;\n\t$self->{errstr} = '';\n\tmy %params;\n\n\tif (defined $_[0] and ref $_[0]) {\n\t\tif (eval { $_[0]->can(\"param\") } and not $@) {\n\t\t\tfor my $name ($_[0]->param) {\n\t\t\t\t$params{$name} = [ $_[0]->param($name) ];\n\t\t\t}\n\t\t} else {\n\t\t\t%params = %{ $_[0] };\n\t\t}\n\t} else {\n\t\twhile (@_) {\n\t\t\tmy ($k, $v) = (shift, shift);\n\t\t\tpush @{ $params{$k} }, $v;\n\t\t}\n\t}\n\n\tfor my $k (sort keys %params) {\n\t\tmy $check = $self->{param}{$k};\n\t\tif (not defined $check) {\n\t\t\tmy @prefixes;\n\t\t\tfor my $i ( 1 .. length($k) ) {\n\t\t\t\tpush @prefixes, substr $k, 0, $i;\t\n\t\t\t}\n\t\t\tfor my $pfx (reverse @prefixes) {\n\t\t\t\tif (defined $self->{paramprefix}{$pfx}) {\n\t\t\t\t\t$check = $self->{paramprefix}{$pfx};\n\t\t\t\t\tlast if defined $check;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmy $showname = 'undef';\n\t\tif (defined $params{$k}) {\n\t\t\tif (@{ $params{$k} } > 1) {\n\t\t\t\t$showname = '['\n\t\t\t\t\t. join(', ', map {\n\t\t\t\t\t\tdefined $_\n\t\t\t\t\t\t? \"'$_'\"\n\t\t\t\t\t\t: 'undef' } @{ $params{$k} })\n\t\t\t\t\t. ']';\n\t\t\t} else {\n\t\t\t\t$showname = ( defined $params{$k}[0]\n\t\t\t\t\t\t? \"'$params{$k}[0]'\"\n\t\t\t\t\t\t: 'undef' );\n\t\t\t}\n\t\t}\n\t\tif (not defined $check) {\n\t\t\t$self->{errstr} .= \"Unknown parameter '$k'=$showname\\n\";\n\t\t} elsif (@{ $params{$k} } > 1 and $check->{'multiple'} ne 'yes') {\n\t\t\t$self->{errstr} .= \"Parameter '$k' has multiple values $showname\\n\";\n\t\t} elsif (defined $params{$k} and @{ $params{$k} }) {\n\t\t\tif ($check->{'type'} eq 'int') {\n\t\t\t\tmy @bad = grep {\n\t\t\t\t\tdefined $_ and not /^[+-]?\\d+$/\n\t\t\t\t\t} @{ $params{$k} };\n\t\t\t\tif (@bad) {\n\t\t\t\t\tmy $showname = '['\n\t\t\t\t\t\t. join(', ', map \"'$_'\", @bad)\n\t\t\t\t\t\t. ']';\n\t\t\t\t\t$self->{errstr} .= \"Parameter '$k' has non-integer value $showname\\n\";\n\t\t\t\t}\n\t\t\t} elsif ($check->{'type'} eq 'num') {\n\t\t\t\tmy @bad = grep {\n\t\t\t\t\tdefined $_ and not /^[+-]?\\d*\\.\\d+$/\n\t\t\t\t\t} @{ $params{$k} };\n\t\t\t\tif (@bad) {\n\t\t\t\t\tmy $showname = '['\n\t\t\t\t\t\t. join(', ', map \"'$_'\", @bad)\n\t\t\t\t\t\t. ']';\n\t\t\t\t\t$self->{errstr} .= \"Parameter '$k' has non-numeric value $showname\\n\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ($self->{errstr} eq '') {\n\t\t$self->{errstr} = undef;\n\t\treturn 1;\n\t}\n\tif (not $self->{errstr} =~ /\\n./) {\n\t\t$self->{errstr} =~ s/\\n$//;\n\t}\n\treturn;\n}",
      "file" : "/var/tmp/arv_S8J3yQ/RayApp-2.004/origlib/RayApp/DSD.pm",
      "package" : "RayApp::DSD"
   }
]
