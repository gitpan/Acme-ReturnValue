[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub ptee {\n    my $config = shift;\n    Log::Dispatch::Config->configure_and_watch(\n        Log::Dispatch::Configurator::Any->new($config->{ptee}->{conf}) );\n    my $dispatcher = Log::Dispatch::Config->instance;\n\n    while (<>) {\n        $dispatcher->notice($_);\n    }\n}",
      "file" : "/var/tmp/arv_BO49Mo/Net-Netfilter-NetFlow-1.113260/lib/Net/Netfilter/NetFlow/Process.pm",
      "package" : "Net::Netfilter::NetFlow::Process"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub merge_hashes {\n    my ( $lefthash, $righthash ) = @_;\n    return $lefthash unless defined $righthash;\n\n    my %merged = %$lefthash;\n    for my $key ( keys %$righthash ) {\n        my $right_ref = ( ref $righthash->{ $key } || '' ) eq 'HASH';\n        my $left_ref  = ( ( exists $lefthash->{ $key } && ref $lefthash->{ $key } ) || '' ) eq 'HASH';\n        if( $right_ref and $left_ref ) {\n            $merged{ $key } = merge_hashes(\n                $lefthash->{ $key }, $righthash->{ $key }\n            );\n        }\n        else {\n            $merged{ $key } = $righthash->{ $key };\n        }\n    }\n\n    return \\%merged;\n}",
      "file" : "/var/tmp/arv_BO49Mo/Net-Netfilter-NetFlow-1.113260/lib/Net/Netfilter/NetFlow/Utils.pm",
      "package" : "Net::Netfilter::NetFlow::Utils"
   },
   {
      "PPI" : "PPI::Statement::Variable",
      "bad" : "our %ct_mask_fields = (\n    1 => {\n        private_src => [8,9,3,4,17,17],\n        public_src  => [8,9,11,10,17,17],\n        dst => [15,16,10,11,17,17],\n    },\n    6 => {\n        private_src => [7,8,3,4,5,6],\n        public_src  => [7,8,10,9,12,11],\n        dst => [13,14,9,10,11,12],\n    },\n    17 => {\n        private_src => [7,8,3,4,5,6],\n        public_src  => [7,8,10,9,12,11],\n        dst => [13,14,9,10,11,12],\n    },\n)",
      "file" : "/var/tmp/arv_BO49Mo/Net-Netfilter-NetFlow-1.113260/lib/Net/Netfilter/NetFlow/ConntrackFormat.pm",
      "package" : "Net::Netfilter::NetFlow::ConntrackFormat"
   }
]
