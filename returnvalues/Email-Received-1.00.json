[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub unparse_rules {\n    my $tree = shift;\n    my $level = shift||0;\n    my $output;\n    for (@$tree) {\n        $output .= \" \" x ($level * 5);\n        if ($_->{given}) {\n            $output .= $_->{inverse} ? \"unless \" : \"if \";\n            $output .= \"(\";\n            $output .= '$r->{'.$_->{referent}.\"}=~\" if $_->{referent};\n            $output .= $_->{given}.\") {\\n\";\n            $output .= unparse_rules($_->{subtree}, $level+1);\n            $output .= \" \" x ($level * 5);\n            $output .= \"}\\n\";\n            next;\n        }\n        if ($_->{regexp}) {\n            $output .= 'if (';\n            $output .= '$r->{'.$_->{referent}.\"}=~\" if $_->{referent};\n            $output .= $_->{regexp}.\") {\\n\";\n        } else { $output .= \"do { \\n\"; }\n        $level++;\n        if (DEBUG) { \n            $output .= \" \" x ($level * 5);\n            $output .= 'push @{$r->{rules_fired}}, q{'.$_->{line}.\"};\\n\";\n        }\n        for (@{$_->{actions}||[]}) {\n            $output .= \" \" x ($level * 5);\n            if ($_->{action} eq \"DONE\") { $output .= \"return tidy_up(\\$r)\" }\n            elsif ($_->{action} eq \"UNPARSABLE\") { $output .= \"return\" }\n            elsif ($_->{action} eq \"IGNORE\") { \n                $output .= 'return ';\n                if ($_->{reason}) { $output .= \"{reason => $_->{reason} }\" };\n            } elsif ($_->{action} eq \"SET\") {\n                $output .= '$r->{'.$_->{variable}.\"} \".$_->{operator} . \" \".$_->{value} } \n            else { die \"Couldn't unparse action!\\n\" }\n            $output .= \";\\n\";\n        }\n        $level--;\n        $output .= \" \" x ($level * 5);\n        $output .= \"};\\n\";\n    }\n    return $output;       \n}",
      "file" : "/var/tmp/arv_Mx2Hag/Email-Received-1.00/lib/Email/Received.pm",
      "package" : "Email::Received"
   }
]
