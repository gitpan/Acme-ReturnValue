[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub nextmap {\n\tmy $registry;\n\tunless($ARGV[0]){\n\t\tmy $WMI = Win32::OLE->GetObject(\"winmgmts:{impersonationLevel=impersonate}\\\\\\\\.\\\\Root\\\\cimv2\");\n\t\tforeach $Proc ( sort {lc $a->{ProcessId} cmp lc $b->{ProcessId}} in( $WMI->InstancesOf( \"Win32_Process\" ) ) ){\n\t\t\tif($Proc->{ExecutablePath} =~ /steam.exe$/i){\n\t\t\t\t$registry = $Proc->{ExecutablePath};\n\t\t\t\t$registry =~ s/\\\\/\\//g;\n\t\t\t\t$registry =~ s/\\/Steam.exe$//i;\n\t\t\t\tlast;\n\t\t\t}\n\t\t}\n\n\t\tuse Win32::TieRegistry (\n\t\t\tDelimiter   => \"/\",\n\t\t\tArrayValues => 1,\n\t\t\tTiedRef     => \\$reg\n\t\t);\n\n\n\t\tunless($registry){\n\t\t\tforeach (\n\t\t\t\t\"Classes/Applications/steam.exe/shell/open/command\",\n\t\t\t\t\"LMachine/SOFTWARE/Classes/steam/Shell/Open/Command\",\n\t\t\t\t\"LMachine/SOFTWARE/Classes/Applications/steam.exe/shell/open/command\",\n\t\t\t\t\"Classes/steam/Shell/Open/Command\"\n\t\t\t\t){\n\t\t\t\tif(my $more = $reg->{$_}){\n\t\t\t\t\tif($more->{'/'}[0]){\n\t\t\t\t\t\tif($more->{'/'}[0] =~ /^\"([^\"]*)\"/){\n\t\t\t\t\t\t\t$registry = $1;\n\t\t\t\t\t\t\t$registry =~ s/\\\\/\\//g;\n\t\t\t\t\t\t\t$registry =~ s/\\/Steam.exe$//i;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t$registry = $more->{'/'}[0];\n\t\t\t\t\t\t\t$registry =~ s/\\\\/\\//g;\n\t\t\t\t\t\t\t$registry =~ s/\\/Steam.exe$//i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlast;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif($registry !~ /\\/$/){\n\t\t\t$registry .= '/steamapps/common/killingfloor';\n\t\t}else{\n\t\t\t$registry .= 'steamapps/common/killingfloor';\n\t\t}\n\t}\n\n\tmy $steampfad = $ARGV[0] || $registry || \".\";\n\n\tif(!-e(\"$steampfad\\\\Cache\\\\cache.ini\")){\n\t\tprint \"Keine cache.ini gefunden! ($steampfad)\\n\";\n\t\texit;\n\t}\n\tprint \"\\t\\n\";\n\tprint \"\\tSteam erkannt: $steampfad\\n\";\n\n\tmy $notcache;\n\tmy $found = 0;\n\tmy $foundwrite = 0;\n\topen(F,\"<$steampfad/Cache/cache.ini\");\n\twhile(<F>){\n\t\ts/[\\n\\r]//g;\n\t\tmy($key,$datei) = split(/=/,$_,2);\n\t\tnext if(!$key or !$datei);\n\t\t$found++;\n\n\t\tif($datei =~ /\\.rom$/i){\n\t\t\t$notcache = \"Maps\";\n\t\t}elsif($datei =~ /\\.u$/i){\n\t\t\t$notcache = \"System\";\n\t\t}elsif($datei =~ /\\.ogg$/i){\n\t\t\t$notcache = \"Music\";\n\t\t}elsif($datei =~ /\\.uax$/i){\n\t\t\t$notcache = \"Sounds\";\n\t\t}elsif($datei =~ /\\.utx$/i){\n\t\t\t$notcache = \"Textures\";\n\t\t}elsif($datei =~ /\\.ukx$/i){\n\t\t\t$notcache = \"Animations\";\n\t\t}elsif($datei =~ /\\.usx$/i){\n\t\t\t$notcache = \"StaticMeshes\";\n\t\t}\n\n\t\tif(!-e(\"$steampfad\\\\$notcache\\\\$datei\") && -s(\"$steampfad\\\\Cache\\\\$key.uxx\")){\n\t\t\tprint \"\\tDatei $key einlesen: $datei\\n\";\n\t\t\topen(R,\"<$steampfad\\\\Cache\\\\$key.uxx\");\n\t\t\tbinmode(R);\n\t\t\tmy @temp = <R>;\n\t\t\tclose(R);\n\n\t\t\tprint \"\\tDatei $key speichern: $datei\\n\";\n\t\t\topen(W,\">$steampfad\\\\$notcache\\\\$datei\");\n\t\t\tbinmode(W);\n\t\t\tprint W @temp;\n\t\t\tclose(W);\n\t\t\t$foundwrite++;\n\t\t}\n\t\tunlink(\"$steampfad/Cache/$key.uxx\");\n\t}\n\tclose(F);\n\n\topen(F,\">$steampfad/Cache/cache.ini\");\n\tprint F '[Cache]'.\"\\n\";\n\tclose(F);\n\n\tprint \"\\tStatistik: $foundwrite von $found Dateien verwendet.\\n\";\n\tsleep(2);\n\treturn;\n}",
      "file" : "/var/tmp/arv_Z7_VHd/Games-Killingfloor-Mapcache/Mapcache.pm",
      "package" : "Games::Killingfloor::Mapcache"
   }
]
