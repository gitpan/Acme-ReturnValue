[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method BUILD {\n    $self->set_size_from_string( $self->get_size() )\n        if defined $self->get_size();\n    \n    $self->{'height'} = $self->get_width()\n        unless defined $self->get_height();\n    \n    $self->{'width'} = 300\n        unless $self->get_width > 0;\n    $self->{'height'} = $self->get_width\n        unless $self->get_height > 0;\n    \n    $self->set_default_text()\n        unless defined $self->get_text();\n    \n    $self->{'_image'} = GD::Image->new(\n            $self->get_width(),\n            $self->get_height(),\n            TRUE_COLOUR\n        );\n    $self->{'_image'}->saveAlpha(1);\n    $self->{'_image'}->alphaBlending(1);\n    $self->{'_image'}->useFontConfig(1);\n    \n    $self->{'_line'} = $self->allocate_colour( $self->get_line_colour() );\n    $self->{'_background'} = $self->allocate_colour(\n            $self->get_background_colour(),\n            $self->get_transparent() * MAX_TRANSPARENCY\n        );\n    $self->{'_text'} = $self->allocate_colour(\n            $self->get_text_colour(),\n            int( MAX_TRANSPARENCY * 0.6 )\n        );\n}\n\nmethod generate {\n    my $image = $self->{'_image'};\n    my $line  = $self->{'_line'};\n    my $x     = $self->get_width() - 1;\n    my $y     = $self->get_height() - 1;\n    \n    $image->fill( 0, 0, $self->{'_background'} );\n    \n    if ( $self->get_line_colour ne 'none' ) {\n        $image->setAntiAliased( $line );\n        $image->line( 0, 0, $x, $y, gdAntiAliased );\n        $image->line( $x, 0, 0, $y, gdAntiAliased );\n        $image->rectangle( 0, 0, $x, $y, $line );\n    }\n    \n    if ( $self->get_text_colour ne 'none' ) {\n        my( $twidth, $theight, $tdropheight, $point_size )\n            = $self->get_text_offset();\n    \n        if ( $twidth ) {\n            my $baseline   = $self->get_height() - $tdropheight;\n            my $text_total = $theight + $tdropheight;\n            my $remainder  = $self->get_height() - $text_total;\n        \n            my $tx = ( $self->get_width() - $twidth ) / 2;\n            my $ty = $baseline - int( $remainder / 2 );\n        \n            $image->stringFT(\n                    $self->{'_text'},\n                    $self->{'font'},\n                    $point_size,\n                    0,                      \n                    $tx,\n                    $ty,\n                    $self->get_text()\n                );\n        }\n    }\n    \n    return $image->png;\n}\n\nmethod set_default_text {\n    my $size = sprintf '%sÃ—%s', $self->get_width(), $self->get_height();\n    $self->set_text( $size );\n}\nmethod set_size_from_string ( Str $size ) {\n    my $width_by_height = qr{\n            ^\n            ( \\d+ )\n            x\n            ( \\d+ )\n            $\n        }x;\n    \n    if ( $size =~ $width_by_height ) {\n        $self->{'width'}  = $1;\n        $self->{'height'} = $2;\n    }\n}\n\nmethod get_text_offset {\n    my $x             = 0;\n    my $y             = 0;\n    my $point_size    = 10;\n    my $usable_width  = int( $self->get_width  * MAX_USABLE_RATIO );\n    my $usable_height = int( $self->get_height * MAX_USABLE_RATIO );\n    my @previous      = ( 0, 0, 0, 0 );\n    \n    while ( 1 ) {\n        my @bounds = GD::Image->stringFT(\n                $self->{'_line'},       \n                $self->{'font'},\n                $point_size,\n                0,                      \n                0,                      \n                0,                      \n                $self->get_text(),\n            );\n        \n        if ( @bounds ) {\n            my $text_width      = $bounds[2] - $bounds[0];\n            my $text_height     = 0 - $bounds[5];\n            my $text_dropheight = $bounds[1];\n            my $text_total_height = $text_height + $text_dropheight;\n            \n            \n            my $too_big = ( $text_width > $usable_width )\n                          || ( $text_total_height > $usable_height );\n            \n            return @previous if $too_big;\n            \n            @previous =\n                ( $text_width, $text_height, $text_dropheight, $point_size );\n            $point_size += 5;\n        }\n        else {\n            return @previous;\n        }\n    }\n}\n\nmethod allocate_colour ( Str $colour, Int $alpha=0 ) {\n    my @rgb = $self->rgb_to_hex( $colour );\n    my $img = $self->{'_image'};\n    \n    return $img->colorAllocateAlpha( @rgb, $alpha )\n}\nmethod rgb_to_hex ( Str $hex ) {\n    \n    return( 0, 0, 0 )\n        unless $hex =~ m{^[0-9a-f]+$}i;\n    \n    $hex = \"$1$1$2$2$3$3\"\n        if $hex =~ m{^([0-9a-f])([0-9a-f])([0-9a-f])$}i;\n    \n    return( 0, 0, 0 )\n        unless 6 == length $hex;\n    \n    return map { hex($_) } unpack 'a2a2a2', $hex;\n}\n\n1",
      "file" : "/var/tmp/arv_l0mL7T/Image-Placeholder-v1.0.0/lib/Image/Placeholder.pm",
      "package" : "Image::Placeholder"
   }
]
