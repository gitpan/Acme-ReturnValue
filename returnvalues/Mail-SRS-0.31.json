[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub run {\n\tmy ($self) = @_;\n\tmy $srs = $self->{Instance};\n\n\tprint STDERR \"Starting SRS daemon in PID $$\\n\";\n\n\tlocal $SIG{__WARN__} = sub { die @_; };\n\n\tmy $listen = $self->{Socket};\n\tunless ($listen) {\n\t\tunlink($SRSSOCKET) if -e $SRSSOCKET;\n\t\t$listen ||= new IO::Socket::UNIX(\n\t\t\t\t\t\tType\t=> SOCK_STREAM,\n\t\t\t\t\t\tLocal\t=> $SRSSOCKET,\n\t\t\t\t\t\tListen\t=> 1,\n\t\t\t\t\t\t\t);\n\t\tdie \"Unable to create listen socket: $!\" unless $listen;\n\t}\n\n\tmy $select = new IO::Select();\n\t$select->add($listen);\n\n\twhile (my @socks = $select->can_read) {\n\t\tforeach my $sock (@socks) {\n\t\t\tif ($sock == $listen) {\n\t\t\t\t$select->add($listen->accept());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmy $line = <$sock>;\n\t\t\t\tif (defined($line)) {\n\t\t\t\t\tchomp($line);\n\t\t\t\t\tmy @args = split(/\\s+/, $line);\n\t\t\t\t\tmy $cmd = uc shift @args;\n\t\t\t\t\teval {\n\t\t\t\t\t\tif ($cmd eq 'FORWARD') {\n\t\t\t\t\t\t\t$sock->print($srs->forward(@args), \"\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telsif ($cmd eq 'REVERSE') {\n\t\t\t\t\t\t\t$sock->print($srs->reverse(@args), \"\\n\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdie \"Invalid command $cmd\";\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tif ($@) {\n\t\t\t\t\t\t$sock->print(\"ERROR: $@\");\n\t\t\t\t\t\t$select->remove($sock);\n\t\t\t\t\t\t$sock->close();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t$select->remove($sock);\n\t\t\t\t$sock->flush();\n\t\t\t\t$sock->close();\n\t\t\t\tundef $sock;\n\t\t\t}\n\t\t}\n\t\tmy @exc = $select->has_exception(0);\n\t\tforeach my $sock (@exc) {\n\t\t\t$select->remove($sock);\n\t\t\t$sock->close();\n\t\t}\n\t}\n}",
      "file" : "/var/tmp/arv_h5fHBm/Mail-SRS-0.31/lib/Mail/SRS/Daemon.pm",
      "package" : "Mail::SRS::Daemon"
   }
]
