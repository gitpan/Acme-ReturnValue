[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub as_svg\n  {\n  my ($self,$x,$y, $indent) = @_;\n\n  my $em = $self->EM();\t\t\n  my $lh = $self->LINE_HEIGHT();\n\n  my $att = $self->_svg_attributes($em);\n \n  my $title = _quote($self->title());\n  $att->{title} = $title if $title ne '';\n\n  my $att_txt = $self->_svg_attributes_as_txt($att);\n\n  my $type = $self->{type} & EDGE_TYPE_MASK();\n  my $end = $self->{type} & EDGE_END_MASK();\n  my $start = $self->{type} & EDGE_START_MASK();\n\n  my $svg = \"$indent<!-- \" . edge_type($type) . \" -->\\n\";\n\n  $svg .= $self->_svg_background($x,$y, $indent);\n\n  my $style = $self->{style};\n\n  return $svg if $style eq 'invisible';\n\n  my $sw = $att->{'stroke-width'} || 1;\n \n  my $lines = [ @{$draw_lines->{$type}} ];\t\n\n  my $cross = ($self->{type} & EDGE_TYPE_MASK) == EDGE_CROSS;\t\n  my $add;\n\n  my @line_tags;\n  while (@$lines > 0)\n    {\n    my ($type) = shift @$lines;\n\n    my @coords;\n    if ($type != LINE_PATH)\n      {\n      @coords = splice (@$lines, 0, 2);\n      }\n    else\n      {\n      @coords = @$lines; @$lines = ();\n      }\n\n    my ($s,$e) = (undef,undef);\n\n    if ($cross && $type == LINE_VER)\n      {\n      $style = $self->{style_ver};\n      my $sn = 1;\n      $sn = 3 if $style =~ /^bold/;\n      $sn = $em / 2 if $style =~ /^broad/;\n      $sn = $em if $style =~ /^wide/;\n\n      $add = ' stroke=\"' . $self->{color_ver} . '\"' if $self->{color_ver};\n      $add .= ' stroke-dasharray=\"' . ($strokes->{$style}||'1 0') .'\"';\n      $add .= ' stroke-width=\"' . $sn . '\"' if $sn ne $sw;\n      $add =~ s/^\\s//;\n      }\n\n    my $bw  = $self->{w} * 0.1;\n    my $bwe = $self->{w} * 0.1 + $sw;\n    my $bh  = $em * 0.5;\t\t\t\n    my $bhe = $self->{h} * 0.1 + $sw * 1;\n\n    if ($type == LINE_VER)\n      {\n      $e = $bhe if ($end & EDGE_END_S);\n      $s = $bhe if ($end & EDGE_END_N);\n      $e = $bh if ($start & EDGE_START_S);\n      $s = $bh if ($start & EDGE_START_N);\n      }\n    else \n      {\n      $e = $bwe if ($end & EDGE_END_E);\n      $s = $bwe if ($end & EDGE_END_W);\n      $e = $bw if ($start & EDGE_START_E);\n      $s = $bw if ($start & EDGE_START_W);\n      }\n\n    if ($type != LINE_PATH)\n      {\n      $type += LINE_DOUBLE if $style =~ /^double/;\n      push @line_tags, $self->_svg_line_straight($x, $y, $type, $coords[0], $coords[1], $s, $e, $add, $sw);\n      }\n    else\n      {\n      push @line_tags, $self->_svg_path($x, $y, $s, $e, $add, $sw, @coords);\n      }\n    } \n\n\n\n  $lines = ''; my $p = \"\\n\"; my $i = $indent;\n  if (@line_tags > 1)\n    {\n    $lines = \"$indent<g$att_txt>\\n\";\n    $i .= $indent;\n    $p = \"\\n$indent</g>\\n\"; \n    }\n  else\n    {\n    $line_tags[0] =~ s/ \\/>/$att_txt \\/>/;\n    }\n  $lines .= $i . join(\"\\n$i\", @line_tags) . $p;\n\n  $svg .= $lines;\n  \n  my $arrow = $end;\n\n  my $scale = $att->{'stroke-width'}||1; \n  $svg .= $self->_svg_arrow($att, $x, $y, $arrow, $indent, $scale)\n\tunless $arrow == 0 || $self->{edge}->undirected();\n\n\n  if (($self->{type} & EDGE_LABEL_CELL()))\n    {\n    my $label = $self->label(); $label = '' unless defined $label;\n\n    if ($label ne '')\n      {\n      my ($w,$h) = $self->dimensions();\n      my $em2 = $em / 2;\n      my $xt = int($x + $self->{w} / 2);\n      my $yt = int($y + $self->{h} / 2 - $lh / 3 - ($h - 1) * $lh);\n\n      my $style = '';\n\n      my $stype = $self->{type};\n\n      if ($type == EDGE_HOR)\n        {\n        $xt = $x + 2 * $em;\n\n        my $ac = $self->arrow_count();\n        my $style = $self->{style};\n\n        if ($ac == 1)\n          {\n          my $shift = 0.2;\n          $shift = 0.5 if $style =~ /^broad/;\n          $shift = 0.8 if $style =~ /^wide/;\n          $shift = -$shift if ($end & EDGE_END_E) != 0;\n          $xt = int($xt + 2 * $em * $shift);\n          }\n        }\n      elsif ($type == EDGE_VER)\n        {\n\t$xt = $xt + $em2;\n\tmy ($w,$h) = $self->dimensions();\n        $yt = int($y + $self->{h} / 2 - $h * $em2 + $em2);\n\t$style = ' text-anchor=\"start\"';\n        }\n      else\n        {\n\n\t$yt += $em2 if $stype & EDGE_START_N;\n\t$yt -= $em2 if $stype & EDGE_START_S;\n        $yt += $em\n\t  if ($h > 1) && ($stype & EDGE_START_S);\n\n        $yt = int($y + $self->{h} / 2)\n\t  if ($stype & EDGE_START_E) || ($stype & EDGE_START_W);\n\n        $xt = int($x + $em * 2) if ($stype & EDGE_START_E);\n        $xt = int($x + $self->{w} - 2*$em) if ($stype & EDGE_START_W);\n\n\t$style = ' text-anchor=\"start\"';\n\t$style = ' text-anchor=\"middle\"'\n\t  if ($stype & EDGE_START_N) || ($stype & EDGE_START_S);\n        $style = ' text-anchor=\"end\"' if ($stype & EDGE_START_W);\n        }\n\n      my $color = $self->raw_attribute('labelcolor');\n\n      $color = $self->color_attribute('color') if !defined $color;\n\n      my $text = $self->_svg_text($color, $indent, $xt, $yt, $style, $xt, $x + $self->{w} - $em);\n\n      my $link = _quote($self->link());\n      $text = Graph::Easy::Node::_link($self, $indent.$text, $indent, $title, $link) if $link ne '';\n\n      $svg .= $text;\n\n      }\n    } \n\n  $svg .= \"\\n\" unless $svg =~ /\\n\\n\\z/;\n\n  $svg;\n  }",
      "file" : "/var/tmp/arv_Kmtc25/Graph-Easy-As_svg-0.23/lib/Graph/Easy/As_svg.pm",
      "package" : "Graph::Easy::As_svg"
   }
]
