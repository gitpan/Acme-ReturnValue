[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _wrap_children {\n\tmy $node = shift;\n\tmy @children = $node->childNodes;\n\n\tmy $new_node = XML::LibXML::Element->new( $node->nodeName );\n\tmy $docns = $node->namespaceURI;\n\t$new_node->setNamespace( $docns );\n\tmy $open_word_node = undef;\n\tforeach my $c ( @children ) {\n\t\tif( ref( $c ) eq 'XML::LibXML::Text' ) {\n\t\t\tmy $str = $c->textContent;\n\t\t\t$str =~ s/^\\s*\\n\\s*//gs;\n\t\t\tnext unless $str;\n\n\t\t\tmy @words = split( /\\s+/, $str );\n\n\t\t\tif( $open_word_node ) {\n\t\t\t\tif( @words ) {\n\t\t\t\t\tmy $first = shift @words;\n\t\t\t\t\t$open_word_node->appendText( $first ) if $first;\n\t\t\t\t} else {\n\t\t\t\t\t$open_word_node = undef unless @words;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach( @words ) {\n\t\t\t\tnext unless /\\S/;\n\n\t\t\t\tmy $word_node = XML::LibXML::Element->new( 'w' );\n\t\t\t\t$word_node->setNamespace( $docns );\n\t\t\t\t$word_node->appendText( $_ );\n\t\t\t\t$new_node->appendChild( $word_node );\n\t\t\t\t$open_word_node = $word_node;\n\t\t\t}\n\t\t\t\n\t\t\tif( $str =~ /\\s+$/s ) {\n\t\t\t\t$open_word_node = undef;\n\t\t\t}\n\t\t} else {\n\t\t\tmy $wrapped_child;\n\t\t\tif ( ref( $c ) ne 'XML::LibXML::Comment' && $c->textContent ne ''\n\t\t\t\t && $c->textContent =~ /\\s+/ ) {\n\t\t\t\tmy $new_c = _wrap_children( $c );\n\t\t\t\t$wrapped_child = ( $c->toString() ne $new_c->toString() );\n\t\t\t\t$c = $new_c;\n\t\t\t} \n\t\t\t\n\t\t\tif( $open_word_node ) {\n\t\t\t\t$open_word_node->setNodeName( 'seg' );\n\t\t\t\t$open_word_node->setAttribute( 'type', 'word' );\n\t\t\t\t$open_word_node->appendChild( $c );\n\t\t\t} elsif( ref( $c ) eq 'XML::LibXML::Comment' || $c->textContent eq '' \n\t\t\t\t|| $wrapped_child ) {\n\t\t\t\t$new_node->appendChild( $c );\n\t\t\t} else {\n\t\t\t\tmy $segment_node = XML::LibXML::Element->new( 'seg' );\n\t\t\t\t$segment_node->setNamespace( $docns );\n\t\t\t\t$segment_node->setAttribute( 'type', 'word' );\n\t\t\t\t$segment_node->appendChild( $c );\n\t\t\t\t$new_node->appendChild( $segment_node );\n\t\t\t\t$open_word_node = $segment_node;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $new_node;\t \n}",
      "file" : "/var/tmp/arv_p2KrPI/Text-TEI-Markup-1.7/lib/Text/TEI/Markup.pm",
      "package" : "Text::TEI::Markup"
   }
]
