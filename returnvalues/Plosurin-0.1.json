[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parse {\n    my $self = shift;\n    my $ref  = shift;\n    our $file = shift;\n    my $r = qr{\n       <extends: Plosurin::Template::Grammar>\n        <matchline>\n        \\A <File> \\Z\n    }xms;\n    if ( $ref =~ $r ) {\n        return {%/}->{File};\n    }\n    undef;\n}\n\n=head2 as_perl5 { package=>\"MyApp::Tmpl\" }, $node1[, $noden]\n\nExport nodes as perl5 package \n\n=cut\n\nuse Data::Dumper;\n\nsub as_perl5 {\n    my $self = shift;\n    my $opt  = shift;\n    return \" need at least one $file\" unless scalar(@_);\n    my @files = map { ( ref($_) eq 'ARRAY' ) ? @{$_} : ($_) } @_;\n    my @alltemplates = ();\n\n    my $package = $opt->{package} || die \"\n      use as_perl5( { package => ... } ) !\";\n\n    my $ctx = new Plosurin::Context(@files);\n\n    #    print Dumper (\\@files);\n    my $p5 = new Plosurin::To::Perl5(\n        'context' => $ctx,\n        'writer'  => new Plosurin::Writer::Perl5,\n        'package' => $package,\n    );\n    $p5->start_write();\n    $p5->write(@files);\n    $p5->end_write();\n    my $res = $p5->wr->{code};\n    wantarray() ? ( $res, @{ $p5->{tmpls} } ) : $res;\n}\n\n1;\n__END__\n\n=head1 SEE ALSO\n\nClosure Templates Documentation L<http://code.google.com/closure/templates/docs/overview.html>\n\nPerl 6 implementation L<https://github.com/zag/plosurin>\n\n\n\n",
      "file" : "/var/tmp/arv_LjUTVy/Plosurin-0.1/lib/Plosurin.pm",
      "package" : "Plosurin"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parse {\n    my $self = shift;\n    my $str  = shift || return [];\n    my $q    = shift || qr{\n     <extends: Plosurin::Grammar>\n#    <debug:step>\n    \\A  <[content]>* \\Z\n    }xms;\n    if ( $str =~ $q->with_actions( new Soy::Actions:: ) ) {\n        my $raw_tree = {%/};\n\n        #setup filename and offsets\n        use Plosurin::Utl::SetLinePos;\n        my $line_num_visiter = new Plosurin::Utl::SetLinePos::\n          srcfile => $self->{srcfile},\n          offset  => $self->{offset};\n        $line_num_visiter->visit( $raw_tree->{content} );\n\n        #check errors\n        return $raw_tree;\n    }\n    else {\n        \"bad template\";\n    }\n}\n\n=head2 raw \n\nreturn syntax tree\n\n=cut\n\nsub raw_tree {\n    $_[0]->{_tree} || {};\n}\n\n=head2 reduce_tree\n\nUnion raw_text nodes\n\n=cut\n\nsub reduced_tree {\n    my $self = shift;\n    my $tree = shift || $self->raw_tree->{content} || return [];\n    my @res  = ();\n    my @tmp = @$tree;    #copy for protect from modify orig tree\n    while ( my $node = shift @tmp ) {\n\n        #skip first node\n        #skip all non text nodes\n        if ( ref( $node->{obj} ) ne 'Soy::raw_text' || scalar(@res) == 0 ) {\n##            if ( my $sub_tree = $node->{obj}->childs ) {\n##                $node->{obj}->childs( $self->reduced_tree($sub_tree) );\n######                 $self->reduced_tree($sub_tree);\n            #           }\n            push @res, $node;\n            next;\n        }\n        my $prev = pop @res;\n        unless ( ref( $prev->{obj} ) eq 'Soy::raw_text' ) {\n            push @res, $prev;\n        }\n        else {\n\n            #now union !\n            $node->{obj} = Soy::raw_text->new(\n                { '' => $prev->{obj}->{''} . $node->{obj}->{''} } );\n            $node->{matchline} = $prev->{matchline};\n            $node->{matchpos}  = $node->{matchpos};\n        }\n        push @res, $node;\n    }\n    \\@res;\n}\n\n=head2 dump_tree($obj1 [, $objn])\n\nMinimalistic tree\nreturn [ \"clasname\", {key1=>key2} ] \n\n=cut\n\nsub dump_tree {\n    my $self = shift;\n    my @res  = ();\n    foreach my $rec ( @{ shift || [] } ) {\n        my $obj = $rec->{obj};\n        push @res, { ref($obj) => $obj->dump() };\n    }\n    \\@res;\n}\n1;\n__END__\n\n=head1 SEE ALSO\n\nClosure Templates Documentation L<http://code.google.com/closure/templates/docs/overview.html>\n\nPerl 6 implementation L<https://github.com/zag/plosurin>\n\n\n\n",
      "file" : "/var/tmp/arv_LjUTVy/Plosurin-0.1/lib/Plosurin/SoyTree.pm",
      "package" : "Soy::Actions"
   }
]
