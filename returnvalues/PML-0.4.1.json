[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "AUTOLOAD\n{\t\n\tmy ($class, $method) = ($AUTOLOAD =~ /^(.*)::(.*)$/);\n\t\n\tif ($class eq 'PML::Token') {\n\t\tif ($method eq 'id') {\n\t\t\treturn _token_id(@_);\n\t\t} elsif ($method eq 'context') {\n\t\t\treturn _token_context(@_);\n\t\t} elsif ($method eq 'file_loc' or $method eq 'fli') {\n\t\t\treturn _token_file_loc(@_);\n\t\t} elsif ($method eq 'data') {\n\t\t\treturn _token_data(@_);\n\t\t} elsif ($method eq 'label') {\n\t\t\treturn _token_label(@_);\n\t\t} else {\n\t\t\tcarp \"unknown PML::Token method '$method'\";\n\t\t\treturn undef;\n\t\t}\n\t} else {\n\t\tcarp \"unknown PML method '$method'\";\n\t\treturn undef;\n\t}\n} \nDESTROY\n{\n\n} \n1",
      "file" : "/var/tmp/arv_04fGke/PML-0.4.1/PML.pm",
      "package" : "PML"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub insert\n{\n\tmy ($self, $token) = @_;\n\tmy ($name, $a, $b) = @{$token->data};\n\tmy ($ua, $res, $req, $url, @urls, $rv, $trv);\n\t\n\t@urls = $self->tokens_execute($a);\n\t@urls or return undef;\n\t\n\t$ua = new LWP::UserAgent;\n\t$ua->agent(\"PML LWP Access/$VERSION\");\n\t$rv = '';\n\t\n\tforeach $url (@urls)\n\t{\n\t\t$req = new HTTP::Request GET => $url;\n\t\t$res = $ua->request($req);\n\t\tnext unless $res->is_success;\n\t\t\n\t\t$trv = $res->content;\n\t\t$rv .= $trv;\n\t}\n\n\treturn $rv;\n}",
      "file" : "/var/tmp/arv_04fGke/PML-0.4.1/PML/LWP.pm",
      "package" : "PML::LWP"
   }
]
