[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "class Gitalist::Git::CollectionOfRepositories::Gitolite\n    with Gitalist::Git::CollectionOfRepositoriesWithRequestState \n{\n    use MooseX::Types::Common::String qw/NonEmptySimpleStr/;    \n    use Gitalist::Git::Types qw/DirOrUndef /;\n\n    has gitolite_conf => (\n        is       => 'ro',\n        isa      => NonEmptySimpleStr,\n        default  => '/home/git/.gitolite.rc',\n        required => 0,\n    );\n\n    has gitolite_bin_dir => (\n        is       => 'ro',\n        isa      => DirOrUndef,\n        default  => '/home/git/bin',\n        required => 0,\n        coerce   => 1,\n        lazy     => 1,\n    );\n    \n    method implementation_class { 'Gitalist::Git::CollectionOfRepositories::Gitolite::Impl' }\n    method debug_string { 'Chose ' . ref($self) }\n\n    method extract_request_state ($ctx) {\n        return (\n            remote_user => $ctx->request->remote_user || $ENV{REMOTE_USER} || 'gitweb',\n        );\n    }\n}",
      "file" : "/var/tmp/arv_X60ibp/Gitalist-Git-CollectionOfRepositories-Gitolite-0.002/lib/Gitalist/Git/CollectionOfRepositories/Gitolite.pm",
      "package" : "Gitalist::Git::CollectionOfRepositories::Gitolite"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "class Gitalist::Git::CollectionOfRepositories::Gitolite::Impl\n{\n    use MooseX::Types::Common::String qw/NonEmptySimpleStr/;    \n    use MooseX::Types::Path::Class qw/Dir/;\n    use Moose::Util::TypeConstraints;\n\n    has remote_user => (\n        is => 'ro',\n        isa => NonEmptySimpleStr,\n        required => 1,\n    );\n\n    method debug_string { 'chosen collection ' . ref($self->chosen_collection) . \" \" . $self->chosen_collection->debug_string }\n\n    role_type 'Gitalist::Git::CollectionOfRepositories';\n    has chosen_collection => (\n        is => 'ro',\n        does => 'Gitalist::Git::CollectionOfRepositories',\n        handles => [qw/\n            _get_repo_from_name\n            _build_repositories\n            /],\n        default => sub {\n            my $self = shift;\n            Gitalist::Git::CollectionOfRepositories::Gitolite::Collection->new(%$self);\n        },\n        lazy => 1,\n    );\n\n}",
      "file" : "/var/tmp/arv_X60ibp/Gitalist-Git-CollectionOfRepositories-Gitolite-0.002/lib/Gitalist/Git/CollectionOfRepositories/Gitolite/Impl.pm",
      "package" : "Gitalist::Git::CollectionOfRepositories::Gitolite::Impl"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "class Gitalist::Git::CollectionOfRepositories::Gitolite::Collection\n    extends Gitalist::Git::CollectionOfRepositories::FromListOfDirectories {\n    use MooseX::Types::Common::String qw/NonEmptySimpleStr/;    \n    use Gitalist::Git::Types qw/DirOrUndef ArrayRefOfDirs /;\n    \n    has remote_user => (\n        is => 'ro',\n        isa => NonEmptySimpleStr,\n        required => 1,\n    );\n\n    has gitolite_conf => (\n        is       => 'ro',\n        isa      => NonEmptySimpleStr,\n        default  => '/home/git/.gitolite.rc',\n        required => 0,\n    );\n\n    has gitolite_bin_dir => (\n        is       => 'ro',\n        isa      => DirOrUndef,\n        default  => '/home/git/bin',\n        required => 0,\n        coerce   => 1,\n        lazy     => 1,\n    );\n    \n    has repo_dir => (\n        isa      => DirOrUndef,\n        is       => 'ro',\n        required => 1,\n        coerce   => 1,\n        default  => sub {\n            my $self = shift;\n            $ENV{GL_RC}     ||= $self->gitolite_conf . \"\";\n            $ENV{GL_BINDIR} ||= $self->gitolite_bin_dir . \"\";\n\n            local $ENV{HOME} = File::Basename::dirname($ENV{GL_RC});\n\n            unless ($INC{'gitolite'})\n            {\n                no warnings;\n\n                our $REPO_BASE;\n                require \"$ENV{GL_BINDIR}/gitolite_env.pm\";\n                require gitolite_rc;    gitolite_rc -> import;\n                require gitolite;       gitolite    -> import;\n                $ENV{GL_REPO_BASE_ABS} = ( $REPO_BASE =~ m(^/) ? $REPO_BASE : \"$ENV{HOME}/$REPO_BASE\" );\n            }\n            return $ENV{GL_REPO_BASE_ABS};\n        },\n    );\n\n    has repos => (\n        isa      => ArrayRefOfDirs,\n        is       => 'ro',\n        coerce   => 1,\n        required => 1,\n        default  => sub {\n            my $self = shift;\n            my $ret = [];\n\n            my $user = ($self->remote_user || 'guest');\n            $user =~ s/\\@.*$//; \n            $user = lc $user;\n\n            $self->repo_dir->resolve();\n\n            my @repos;\n            eval {\n                {\n                    no warnings;\n                    @repos = gitolite::list_phy_repos();\n                }\n\n                foreach my $repo ( sort { lc $a cmp lc $b } @repos )\n                {\n                    my $dir = $self->repo_dir->subdir($repo . '.git');\n                    next unless -d $dir; \n                    next unless gitolite::can_read( $repo, $user);\n                    push @$ret, $dir; \n                }\n            };\n            warn 'Error (', ref($self), '): ', $@ if $@;\n            return $ret;\n        }\n    );\n}",
      "file" : "/var/tmp/arv_X60ibp/Gitalist-Git-CollectionOfRepositories-Gitolite-0.002/lib/Gitalist/Git/CollectionOfRepositories/Gitolite/Collection.pm",
      "package" : "Gitalist::Git::CollectionOfRepositories::Gitolite::Collection"
   }
]
