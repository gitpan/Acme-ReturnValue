[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "Do the transfer, and (if wait is true) set the\n       <transfer> form item variable to the returned\n       result status indicator. \n   else if ( the <initial> was chosen ) \n       Collect an utterance or an event from the user. \n   else if ( a <block> was chosen ) \n   { \n       Set the block's form item variable to a defined value. \n\n       Execute the block's executable context. \n   } \n\n   // \n   // Process Phase: process the resulting utterance or event. \n   // \n\n   // Process an event. \n\n   if ( the form item execution resulted in an event ) \n   { \n       Find the appropriate catch for the event. \n\n       Execute the catch (this may leave the FIA). \n\n       continue \n   } \n\n   // Must have an utterance: process ones from outside grammars. \n\n   if ( the utterance matched a grammar from outside the form ) \n   { \n       if ( the grammar belongs to a <link> element ) \n          Execute that link's goto or throw, leaving the FIA. \n\n       if ( the grammar belongs to a menu's <choice> element ) \n          Execute the choice's goto or throw, leaving the FIA. \n\n       // The grammar belongs to another form (or menu). \n\n       Transition to that form (or menu), carrying the utterance\n       to the other form (or menu)'s FIA. \n   } \n\n   // Process an utterance spoken to a grammar from this form. \n   // First copy utterance slot values into corresponding \n   // form item variables. \n\n   Clear all \"just_filled\" flags. \n\n   foreach ( slot in the user's utterance ) \n   { \n       if ( the slot corresponds to a field item ) \n       { \n          Copy the slot value into the field item's form item variable. \n\n          Set this field item's \"just_filled\" flag. \n       } \n   } \n\n   // Set <initial> form item variable if any field items are filled. \n\n   if ( any field item variable is set as a result of the user utterance ) \n       Set the <initial> form item variable. \n\n   // Next execute any <filled> actions triggered by this utterance. \n\n   foreach ( <filled> action in document order ) \n   { \n       // Determine the form item variables the <filled> applies to. \n\n       N = the <filled>'s \"namelist\" attribute. \n\n       if ( N equals \"\" ) \n       { \n          if ( the <filled> is a child of a form item ) \n            N = the form item's form item variable name. \n          else if ( the <filled> is a child of a form ) \n            N = the form item variable names of all the form\n                items in that form. \n       } \n\n       // Is the <filled> triggered? \n\n       if ( any form item variable in the set N was \"just_filled\" \n              AND  (  the <filled> mode is \"all\"\n                          AND all variables in N are filled \n                      OR the <filled> mode is \"any\"\n                          AND any variables in N are filled) ) \n            Execute the <filled> action. \n   } \n}\n\n\n1;\n\n",
      "file" : "/var/tmp/arv_dritL1/VoiceXML-Client-1.01/lib/VoiceXML/Client/Engine.pm",
      "package" : "VoiceXML::Client::Engine"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "%Defaults = (\n\t\t'timeout'\t=> 6,\n\t\t'numrepeat'\t=> 3,\n\t\t'device'\t=> 'DIALUP_LINE',\n\t\t'tempdir'\t=> '/tmp',\n\t\t'autostop'\t=> 1,\n\t)",
      "file" : "/var/tmp/arv_dritL1/VoiceXML-Client-1.01/lib/VoiceXML/Client/Vars.pm",
      "package" : "VoiceXML::Client::DeviceHandle"
   }
]
