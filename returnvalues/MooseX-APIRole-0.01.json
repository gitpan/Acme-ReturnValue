[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub make_api_role {\n    my ($meta, $name) = @_;\n    set_api_role_name($meta, $name);\n    apply_api_role($meta);\n    return $meta;\n}",
      "file" : "/var/tmp/arv_YU5siC/MooseX-APIRole-0.01/lib/MooseX/APIRole.pm",
      "package" : "MooseX::APIRole"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _build_api_role {\n    my ($self) = @_;\n    my $has_name = $self->has_api_role_name;\n    my $role = $has_name ? create_role_for($self, $self->api_role_name)\n                         : create_role_for($self);\n    return $role;\n}",
      "file" : "/var/tmp/arv_YU5siC/MooseX-APIRole-0.01/lib/MooseX/APIRole/Meta.pm",
      "package" : "MooseX::APIRole::Meta"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub create_role_for {\n    my ($meta, $name) = @_;\n\n    my $cached_role = role_for($meta);\n    return $cached_role if $cached_role;\n\n    my $role = Moose::Meta::Role->create(\n        $name || _name_role_for($meta),\n    );\n    $ROLE_FOR{$meta} = $role;\n\n    my $metainfo = _analyze_metaclass($meta);\n\n    $role->add_required_methods(@{$metainfo->{methods} || []});\n\n    for(@{$metainfo->{roles} || []}, @{$metainfo->{superclasses} || []}){\n        if(does_role($_, 'MooseX::APIRole::Meta')){\n            $_->api_role->apply($role);\n        }\n        else {\n            create_role_for($_)->apply($role);\n        }\n    }\n\n    return $role;\n}",
      "file" : "/var/tmp/arv_YU5siC/MooseX-APIRole-0.01/lib/MooseX/APIRole/Internals.pm",
      "package" : "MooseX::APIRole::Internals"
   }
]
