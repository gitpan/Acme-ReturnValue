[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub scalar {\n    my ( $class, $name, $args ) = @_;\n\n    my %methods;\n\n    my $key       = $args->{'hash_key'}  || $name;\n    my $interface = $args->{'interface'} || 'get_set';\n\n    if ( $interface eq 'get_set_init' ) {\n        my $init_method = $args->{'init_method'} || \"init_$name\";\n\n        $methods{$name} = sub {\n            return $_[0]->{$key} = $_[1] if ( @_ > 1 );\n\n            return defined $_[0]->{$key}\n                ? $_[0]->{$key}\n                : ( $_[0]->{$key} = $_[0]->$init_method() );\n        };\n    }\n    elsif ( $interface eq 'get_set' ) {\n        if ( $Rose::Object::MakeMethods::Generic::Have_CXSA\n            && !$ENV{'ROSE_OBJECT_NO_CLASS_XSACCESOR'} )\n        {\n            $methods{$name} = {\n                make_method => sub {\n                    my ( $name, $target_class, $options ) = @_;\n\n                    $Debug\n                        && warn\n                        \"Class::XSAccessor make method ($name => $key) in $target_class\\n\";\n\n                    Class::XSAccessor->import(\n                        accessors => { $name => $key },\n                        class     => $target_class,\n                        replace => $options->{'override_existing'} ? 1 : 0\n                    );\n                },\n            };\n        }\n        else {\n            $methods{$name} = sub {\n                return $_[0]->{$key} = $_[1] if ( @_ > 1 );\n                return $_[0]->{$key};\n            };\n        }\n    }\n    elsif ( $interface eq 'ro' ) {\n        if ( $Rose::Object::MakeMethods::Generic::Have_CXSA\n            && !$ENV{'ROSE_OBJECT_NO_CLASS_XSACCESOR'} )\n        {\n            $methods{$name} = {\n                make_method => sub {\n                    my ( $name, $target_class, $options ) = @_;\n\n                    $Debug\n                        && warn\n                        \"Class::XSAccessor make method ($name => $key) in $target_class\\n\";\n\n                    Class::XSAccessor->import(\n                        getters => { $name => $key },\n                        class   => $target_class,\n                        replace => $options->{'override_existing'} ? 1 : 0\n                    );\n                },\n            };\n        }\n        else {\n            $methods{$name} = sub {\n                if ( @_ > 1 ) {\n                    croak \"usage: $name() is read-only (getter not setter)\";\n                }\n                return $_[0]->{$key};\n            };\n        }\n    }\n    else { Carp::croak \"Unknown interface: $interface\" }\n\n    return \\%methods;\n}\n\n\n1",
      "file" : "/var/tmp/arv_FTKVjM/Rose-ObjectX-CAF-0.03/lib/Rose/ObjectX/CAF/MethodMaker.pm",
      "package" : "Rose::ObjectX::CAF::MethodMaker"
   }
]
