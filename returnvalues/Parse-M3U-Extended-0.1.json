[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub m3u_parser {\n\tmy $playlist = shift;\n\n\tif ($playlist =~ /$m3u_parser/) {\n\t\treturn __analyze(\\%/);\n\t}\n}\n\n# The analyze subroutine are used to flatten the structured returned\n# from Regexp::Grammars. If you want the full tree, you can use \n# $Parse::M3U::Extended::parser directly.\nsub __analyze {\n\tmy $res = shift;\n\tmy $ext = 0;\n\tmy @ret;\n\n\t# If the first line is #EXTM3U, then it's an M3UE\n\tif (exists $res->{Line}->[0]->{Directive} and\n\t    $res->{Line}->[0]->{Directive}->{Tag} eq 'EXTM3U') {\n\t    \t$ext = 1;\n\t}\n\n\tfor my $line (@{$res->{Line}}) {\n\t\tif (exists $line->{Directive} and !$ext) {\n\t\t\tmy $dir = $line->{Directive};\n\n\t\t\tpush @ret, {\n\t\t\t\ttype => 'comment',\n\t\t\t\tvalue => \"$dir->{Tag}:$dir->{Value}\",\n\t\t\t};\n\t\t} elsif (exists $line->{Directive}) {\n\t\t\tmy $dir = $line->{Directive};\n\n\t\t\tpush @ret, {\n\t\t\t\ttype => 'directive',\n\t\t\t\ttag => $dir->{Tag},\n\t\t\t\texists $dir->{Value} ?\n\t\t\t\t\t(value => $dir->{Value}) :\n\t\t\t\t\t()\n\t\t\t};\n\t\t} elsif (exists $line->{Comment}) {\n\t\t\tpush @ret, {\n\t\t\t\ttype => 'comment',\n\t\t\t\tvalue => $line->{Comment}\n\t\t\t};\n\t\t} else {\n\t\t\tpush @ret, {\n\t\t\t\ttype => 'item',\n\t\t\t\tvalue => $line->{Item}\n\t\t\t};\n\t\t}\n\t}\n\n\treturn @ret;\n}\n\n=head1 SEE ALSO\n\n=over\n\n=item * IETF Internet Draft: draft-pantos-http-live-streaming-08\n\n=item * L<Regexp::Grammars>\n\n=back\n\n=head1 COPYRIGHT\n\nCopyright (c) 2012 - Olof Johansson <olof@cpan.org>\nAll rights reserved.\n\nThis program is free software; you can redistribute it and/or \nmodify it under the same terms as Perl itself.\n\n",
      "file" : "/var/tmp/arv_ztycUL/Parse-M3U-Extended-0.1/lib/Parse/M3U/Extended.pm",
      "package" : "Parse::M3U::Extended"
   }
]
