[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "def load($html) {\n    $self->{html} = $html;\n    $self;\n}\n\ndef dump {\n    return $_ if (defined($_ = $self->{markapl}));\n    return $self->convert;\n}\n\ndef convert {\n    return \"\" unless $self->{html};\n\n    my $p = HTML::PullParser->new(\n        doc => $self->{html},\n        start => '\"S\", tagname, @attr',\n        text  => '\"T\", text',\n        end   => '\"E\", tagname',\n    );\n\n    my $current_tag = \"\";\n    my @stack = ();\n    my $indent = 0;\n    while(my $token = $p->get_token) {\n        if ($token->[0] eq 'S') {\n            push @stack, { tag => $token->[1], attr => [@$token[2..$#$token]]};\n            $indent += 1;\n        }\n        elsif ($token->[0] eq 'T') {\n            unless($token->[1] =~ /^\\s*$/s ) {\n                push @stack, { text => $token->[1] }\n            }\n        }\n        elsif ($token->[0] eq 'E') {\n            my @content;\n            my $content = pop @stack;\n            while (!$content->{tag} || $content->{tag} ne $token->[1]) {\n                push @content, $content;\n                $content = pop @stack;\n            }\n\n            my $start_tag = $content;\n\n            my $indent_str = \" \" x ($indent * $indent_offset);\n            my $indent_str2 = \" \" x ( ($indent + 1) * $indent_offset);\n\n            my $attr = \"\";\n            my @attr = @{$start_tag->{attr}};\n            if (@attr) {\n                while (my ($k, $v) = splice(@attr, 0, 2)) {\n                    $attr .= qq{ $k => \"$v\"};\n                }\n                $attr = \"($attr )\";\n            }\n\n            if (@content == 1) {\n                my $content_text = $content[0]->{code};\n                if (!$content_text && $content[0]->{text}) {\n                    $content_text = \"\\\"$content[0]->{text}\\\"\"\n                }\n                $content_text ||= '';\n                push @stack, {\n                    code => \"\\n${indent_str}$start_tag->{tag}${attr} {\\n${indent_str2}$content_text\\n${indent_str}};\\n\"\n                };\n            }\n            else {\n                for (@content) {\n                    if ($_->{text}) {\n                        $_->{code} = \"outs \\\"$_->{text}\\\";\";\n                        $_->{text} = undef;\n                    }\n                }\n                my $content_code = join \"\\n\", map { $_->{code}||\"\" } reverse @content;\n                push @stack, {\n                    code => \"\\n${indent_str}$start_tag->{tag}${attr} {\\n${indent_str2}$content_code\\n${indent_str}};\\n\"\n                };\n            }\n\n            $indent -= 1;\n        }\n    }\n\n    my $ret = join \"\\n\", \"sub {\", (map { $_->{code} || $_->{text} } @stack), \"\\n}\\n\";\n\n    $ret =~ s/\\n\\s*\\n/\\n/g;\n    $ret =~ s/\\{\\n\\s+\\}(;?)\\n/{}$1\\n/g;\n\n    $ret =~ s/\\{\\n\\s+(\".+\")\\n\\s+\\}(;?)\\n/{ $1 }$2\\n/g;\n\n    return $ret;\n}\n\n1",
      "file" : "/var/tmp/arv_iiObfd/Markapl-FromHTML-0.03/lib/Markapl/FromHTML.pm",
      "package" : "Markapl::FromHTML"
   }
]
