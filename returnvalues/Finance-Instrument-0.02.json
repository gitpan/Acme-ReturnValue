[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method global {\n    $GLOBAL ||= __PACKAGE__->new;\n}\n\nmethod load_default_exchanges {\n    my $file = File::ShareDir::dist_file('Finance-Instrument', 'iso10383_mic.csv');\n    open my $fh, '<:encoding(utf8)', $file or die \"$file: $!\";\n    my $csv = Text::CSV->new;\n    my $header = $csv->getline( $fh );\n    my %header_map = (\n        'MIC' => 'code',\n        'INSTITUTION DESCRIPTION' => 'name',\n        'CC' => 'country',\n        'ACR' => 'abbr',\n    );\n    while ( my $row = $csv->getline( $fh ) ) {\n        my $entry = {};\n        @{$entry}{@$header} = @$row;\n        Finance::Instrument::Exchange->new(\n            domain => $self,\n            map { $header_map{$_} => $entry->{$_} } keys %header_map\n        );\n    }\n}\n\n\nmethod add_exchange($ex) {\n    $self->exchanges->{ $ex->code } = $ex;\n}\n\nmethod load_instrument($args) {\n    my $type = delete $args->{type};\n    $type = 'Finance::Instrument::'.$type\n        unless $type =~ s/^\\+//;\n    Class::Load::load_class($type);\n\n    unless (ref $args->{exchange}) {\n        my $exchange_name = delete $args->{exchange};\n        $args->{exchange} = $self->exchanges->{$exchange_name}\n            ||= Finance::Instrument::Exchange->new( name => $exchange_name,\n                                                    code => $exchange_name,\n                                                    domain => $self);\n    }\n\n    $type->new(%$args, domain => $self);\n}\n\nmethod load_instrument_from_yml($file) {\n    $self->load_instrument(LoadFile($file));\n}\n\nmethod load_default_instrument($name) {\n    $self->load_instrument_from_yml(File::ShareDir::dist_file('Finance-Instrument', $name.'.yml'));\n}\n\nmethod add($i) {\n    $self->instruments->{ $i->exchange->code.'.'.$i->code } = $i;\n}\n\nmethod get($name) {\n    $self->instruments->{ $name };\n}\n\n1",
      "file" : "/var/tmp/arv_9u0ATq/Finance-Instrument-0.02/lib/Finance/Instrument/Domain.pm",
      "package" : "Finance::Instrument::Domain"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method BUILDARGS {\n    my %args = @_;\n    my $strp = DateTime::Format::Strptime->new(\n        pattern     => '%F',\n        time_zone   => $args{futures}->time_zone);\n    for (qw(last_trading_day first_trading_day)) {\n        if ($args{$_}) {\n            $args{$_} = $strp->parse_datetime($args{$_})\n                unless ref $args{$_};\n        }\n    }\n    return \\%args;\n}\n\nmethod expiry { sprintf(\"%04d%02d\", $self->expiry_year, $self->expiry_month) }\n\nmethod code { $self->futures->code.'_'.$self->expiry }\n\nmethod previous_contract {\n    $self->futures->previous_contract($self->expiry_year, $self->expiry_month);\n}\n\n\n\n1",
      "file" : "/var/tmp/arv_9u0ATq/Finance-Instrument-0.02/lib/Finance/Instrument/FuturesContract.pm",
      "package" : "Finance::Instrument::FuturesContract"
   }
]
