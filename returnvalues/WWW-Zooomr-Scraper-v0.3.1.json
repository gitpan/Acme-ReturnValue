[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub upload {\n   my $self = shift;\n   my $config = ref($_[0]) ? $_[0] : {@_};\n\n   my ($updater) = $self->_config_or_default($config, 'updater');\n   my $filename  = $config->{filename};\n   my $ua        = $self->get_agent();\n\n   (my $barename = file($filename)->basename()) =~ s{\\.\\w+\\z}{}mxs;\n\n   my $updating;\n   my $uri = eval {\n      $ua->get($self->get_upload_page())\n         or croak \"couldn't get upload page\\n\";\n\n      $ua->form_with_fields(qw( Filedata labels is_public ))\n         or croak \"no form with fields required for upload\\n\";\n      $ua->set_fields(\n         labels    => $config->{tags}   || '',\n         is_public => $config->{public} || 0,\n         Filedata  => $filename,\n      );\n      $ua->tick('is_friend', 1, $config->{friends});\n      $ua->tick('is_family', 1, $config->{family});\n\n      if ($updater) {\n         local $HTTP::Request::Common::DYNAMIC_FILE_UPLOAD;\n         $HTTP::Request::Common::DYNAMIC_FILE_UPLOAD = 1;\n         my $request = $ua->current_form()->click();    \n\n         my $total = scalar($request->content_length());\n         $updater->post(\n            'start_file',\n            filename     => $filename,\n            barename     => $barename,\n            file_counter => $config->{file_counter},\n            file_octets  => $total,\n         );\n         $updating = 1;\n\n         my $workhorse = $request->content();\n         my $done      = 0;\n         $request->content(\n            sub {\n               my $data_chunk = $workhorse->();\n               return unless defined $data_chunk;\n\n               $done += length $data_chunk;\n               $updater->post('update_file', sent_octets => $done);\n\n               return $data_chunk;\n            },\n         );\n\n         $ua->request($request);\n      } \n      else {\n         $ua->click();\n      }\n\n      my $link = $ua->find_link(text => $barename)\n         or croak \"upload completed but no photo\\n\";\n      $updater->post(\n         'end_file',\n         filename => $filename,\n         uri      => $link->url_abs(),\n         outcome  => 'success'\n      ) if $updater;\n      $link->url_abs();\n   };\n   return $uri if $uri;\n\n   $updater->post(\n      'end_file',\n      filename => $filename,\n      uri => undef,\n      outcome => 'failure',\n   ) if $updater && $updating;\n   croak $@;\n}",
      "file" : "/var/tmp/arv_dtm2Y7/WWW-Zooomr-Scraper-v0.3.1/lib/WWW/Zooomr/Scraper.pm",
      "package" : "WWW::Zooomr::Scraper"
   }
]
