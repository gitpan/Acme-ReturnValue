[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "class Acme::Schlong with MooseX::Getopt::Strict {\n    use 5.010;\n    use feature 'switch';\n\n    use MooseX::StrictConstructor;\n    use MooseX::AlwaysCoerce;\n    use MooseX::Types::Moose -all;\n\n    use MooseX::Attribute::ENV;\n    use MooseX::Types::Path::Class 'Dir';\n    use Path::Class 'dir', 'file';\n    use Config::Any;\n\n    use MooseX::Types::Perl 'StrictVersionStr';\n\n    use App::OS::Detect::MachineCores;\n    use version;\n    use Carp;\n\n    use File::Util;\n\n    use MetaCPAN::API;\n\n    method BUILD {\n        use Acme::Emoticarp;\n        o_O \"Your system is Windows. I won't even bother calculating your schlong-size, sorry!\" unless! ($^O ~~ /Win/ ... /Win/) \n    }\n\n    sub true  { 1 }\n    sub false { 0 }\n\n    has size => (\n        is      => 'rw',\n        isa     => Int,\n        traits  => ['Number'],\n        handles => {\n            set_size => 'set',\n            add_size => 'add',\n            sub_size => 'sub',\n            mul_size => 'mul',\n            div_size => 'div',\n            mod_size => 'mod',\n            abs_size => 'abs',\n        },\n        required      => 1,\n        lazy_build    => 1,\n        documentation => q{The all might, all elementary information!},\n    );\n\n    has perl_specific   => ( is => 'ro', isa => Bool, traits => ['Getopt'], cmd_aliases => ['P'], default => 0 );\n\n    has username        => ( is => 'ro', isa => Str,  traits => ['ENV'], env_key => 'user' );\n    has home_directory  => ( is => 'ro', isa => Dir,  traits => ['ENV'], env_key => 'home' );\n    has term            => ( is => 'ro', isa => Str,  traits => ['ENV'] );\n\n    has useraccounts    => ( is => 'ro', isa => Int,  lazy_build => 1, documentation => q{Check if system is like /home/b/bruder ... then you have to also supply the hidden \"I'm the administrator switch\"} );\n    has username_length => ( is => 'ro', isa => Int,  lazy_build => 1, documentation => q{self explanatory} );\n    has shell           => ( is => 'ro', isa => Str,  lazy_build => 1, documentation => q{self explanatory} );\n    has harddrive_size  => ( is => 'ro', isa => Int,  lazy_build => 1, documentation => q{self explanatory} );\n    has harddrive_used  => ( is => 'ro', isa => Int,  lazy_build => 1, documentation => q{self explanatory} );\n    has uptime          => ( is => 'ro', isa => Any,  lazy_build => 1, documentation => q{self explanatory} );\n    has users           => ( is => 'ro', isa => Any,  lazy_build => 1, documentation => q{The number of users logged in on the system} );\n    has cores           => ( is => 'ro', isa => Any,  lazy_build => 1, documentation => q{The Number of cores of this machine} );\n    has using_multiplex => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{using screen or tmux});\n    has using_byobu     => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{using byobu as multiplexer frontend!} );\n    has using_tmux      => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{using tmux as multiplexer} );\n    has using_screen    => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{using screen as multiplexer} );\n\n    has perl_version           => ( is => 'ro', isa => StrictVersionStr, lazy_build => 1, documentation => q{The executing Perl's version number});\n    has perl_version_is_dev    => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{The executing Perl's version number});\n    has directories_in_path    => ( is => 'ro', isa => Int,  lazy_build => 1, documentation => q{The number of directories set in $PATH} );\n    has using_perlbrew         => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    has using_cpanm            => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    has using_cpanm_customized => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{Has the user set specific flags to cpanm?} );\n    has using_bash             => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    has using_zsh              => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    has using_ksh              => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    has using_tcsh             => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    has using_csh              => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    has using_dzil             => ( is => 'ro', isa => Bool, lazy_build => 1, documentation => q{self explanatory} );\n    \n    has pause_name             => ( is => 'ro', isa => Maybe[Str], lazy_build => 1, documentation => q{self explanatory});\n    has cpan_modules           => ( is => 'ro', isa => Num,        lazy_build => 1, documentation => q[self explanatory]);\n\n    has perls_installed        => ( is => 'ro', isa => Int, lazy_build => 1, documentation => q{the number of perls installed through perlbrew} );\n\n    has known_hosts => ( is => 'ro', isa => Int, lazy_build => 1, documentation => q{self explanatory});\n    has f => ( is => 'ro', isa => 'File::Util', default => sub { File::Util->new } );\n\n    \n\n\n    method _build_useraccounts           { scalar grep { !/Shared/ } grep { -d $_ } glob ( dir( $self->home_directory => '..') . '/*'); } \n    method _build_username_length        { length $self->username }\n    method _build_shell                  { $_ = $ENV{SHELL}; s/.*\\/(.*?)$/$1/; $_ } \n    method _build_harddrive_size         { $_=`df -l | grep '\\\\/\\$' | awk '{print \\$2}'`; chomp; $_ } \n    method _build_harddrive_used         { $_=`df -l | grep '\\\\/\\$' | awk '{print \\$3}'`; chomp; $_ } \n    method _build_uptime                 { 100 }\n    method _build_users                  {  5  }\n    method _build_cores                  { App::OS::Detect::MachineCores->new->cores }\n    method _build_using_multiplex        { $self->using_byobu or $self->using_tmux or $self->using_screen ? true : false }\n    method _build_using_byobu            { exists $ENV{BYOBU_BACKEND} ? 1 : 0 }\n    method _build_using_tmux             { $ENV{TERM} ~~ 'tmux'       ? 1 : 0 }\n    method _build_using_screen           { $ENV{TERM} ~~ 'screen'     ? 1 : 0 }\n    method _build_perl_version           { $_ = `$^X --version`; m/perl.*\\((?<vstring>v\\d\\.\\d+.\\d+)\\) built for.*/; $+{vstring} }\n    method _build_directories_in_path    { scalar split q<:> =>      $ENV{PATH}         }\n    method _build_using_perlbrew         { (grep { /perlbrew/i  }    keys %ENV) ? 1 : 0 }\n    method _build_using_cpanm            { (grep { /cpanm/i     }    keys %ENV) ? 1 : 0 }\n    method _build_using_cpanm_customized { !! (grep { /cpanm_opt/i } keys %ENV) || 0    } \n    method _build_using_bash             { $self->shell ~~ 'bash' || 0 }\n    method _build_using_zsh              { $self->shell ~~ 'zsh'  || 0 }\n    method _build_using_ksh              { $self->shell ~~ 'ksh'  || 0 }\n    method _build_using_tcsh             { $self->shell ~~ 'tcsh' || 0 }\n    method _build_using_csh              { $self->shell ~~ 'csh'  || 0 }\n    method _build_using_dzil             { (grep {/.dzil/} glob (dir($self->home_directory) . '/' . '.*')) ? 1 : 0 }\n\n    method _build_pause_name {\n        Config::Any->load_files( {\n            files => [ file($self->home_directory, '.dzil', 'config.ini') ],\n            flatten_to_hash => 1,\n            use_ext => 1 }\n        )->{file($self->home_directory, '.dzil', 'config.ini')}\n         ->{'%PAUSE'}\n         ->{'username'};\n    }\n    method _build_cpan_modules  { scalar MetaCPAN::API->new->release(search => {author => $self->pause_name, filter => \"distribution\", fields=>\"name\"})->{hits}->{hits} }\n    method _build_perls_installed { $_ =()= $self->f->list_dir(\"$ENV{PERLBREW_ROOT}/perls\", '--dirs-only', '--no-fsdots') if exists $ENV{PERLBREW_ROOT} }\n    method _build_known_hosts { $_ = `wc -l ~/.ssh/known_hosts | awk '{print \\$1}'`; chomp; $_ }\n    method _build_size {\n\n        $self->size(0);\n\n        \n\n        $self->add_size(10)  if $self->using_zsh;\n        $self->add_size(100) if $self->using_multiplex;\n\n        $self->add_size( 100 * $self->cores );\n\n        $self->sub_size( 10 * $self->username_length );\n\n        $self->abs_size\n    }\n\n    method testdrive {\n        say \"Your Acme Schlong size is: \", $self->size;\n        say \"Your username is: \", $self->username;\n        say \"Your home directory is: \", $self->home_directory;\n        say \"The number of useraccounts is \", $self->useraccounts;\n        say \"Your TERM is \", $self->term;\n        say \"Your shell is \", $self->shell;\n        say \"You are using byobu \", $self->using_byobu;\n        say \"Your username length is \", $self->username_length;\n        say \"You harddrive_size is \", $self->harddrive_size;\n        say \"The number of cores is \", $self->cores;\n        say \"Your perl version is  \", $self->perl_version;\n        say \"You have this many dirs in PATH: \", $self->directories_in_path;\n        say \"You are using a multiplexer: \", $self->using_multiplex;\n        say \"You are using perlbrew: \", $self->using_perlbrew;\n        say \"You are using zsh: \", $self->using_zsh;\n        say \"You are using bash: \", $self->using_bash;\n        say \"You are using cpanm: \", $self->using_cpanm;\n        say \"You are using cpanm customized: \", $self->using_cpanm_customized;\n        say \"You are using Dist::Zilla: \", $self->using_dzil;\n        say \"You have this many perls installed \", $self->perls_installed;\n        say \"Your PAUSE name is \", $self->pause_name;\n        say \"Your number of known hosts is \", $self->known_hosts;\n    }\n\n}",
      "file" : "/var/tmp/arv_AK4gAA/Acme-Schlong-0.001/lib/Acme/Schlong.pm",
      "package" : "Acme::Schlong"
   }
]
