[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub AUTOLOAD {\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne.pm",
      "package" : "WebDyne"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub err_eval {\n    \n    my ($self, $message, @param)=@_;\n    \n\n    my $param_ar=pop @param;\n    unless (ref($param_ar) eq ARRAY) {\n        return err('err_eval called without array ref to eval error param')\n    }\n    \n    \n    $self->{'_err_eval_ar'}=$param_ar;\n    \n    \n    return &err($message, @param);\n    \n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Err.pm",
      "package" : "WebDyne::Err"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub handler : method {\n\n\n    my ($self,$r)=(shift, shift);\n    my $cache=$r->dir_config('WebDyneCacheHandler') ||\n      return $self->err_html(\n        'unable to get cache handler name - have you set the WebDyneCacheHandler var ?');\n    $self->cache($cache);\n    $self->SUPER::handler($r,@_);\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Cache.pm",
      "package" : "WebDyne::Cache"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$_=\\%Constant",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Constant.pm",
      "package" : "WebDyne::Constant"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub import {\n\n\n    my ($class, @param)=@_;\n    my $self_cr=UNIVERSAL::can(scalar caller, 'self') || return;\n    my $self=$self_cr->() || return;\n    my %param=(@param==1) ? (handler => @param) : @param;\n    $self->set_handler($param{'handler'});\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Handler.pm",
      "package" : "WebDyne::Handler"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub cache_dn {\n\n\n    my $prefix=shift();\n    \n\n    my $cache_dn;\n    \n\n    if ($WEBDYNE_CACHE_DN) {\n\t$cache_dn=$WEBDYNE_CACHE_DN;\n    }\n    \n    elsif ($prefix && ($prefix ne $Config{'prefix'})) {\n\t$cache_dn=File::Spec->catdir($prefix, 'cache');\n    }\n    \n    \n    else {\n        $cache_dn=$DIR_CACHE_DEFAULT;\n    }\n    \n    \n    return $cache_dn;\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Install.pm",
      "package" : "WebDyne::Install"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub handler : method {\n\n\n    my $self=shift();\n    $self->static(1);\n    $self->SUPER::handler(@_);\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Static.pm",
      "package" : "WebDyne::Static"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parse {\n\n\n    my ($self, $html_or, $meta_hr)=@_;\n    my ($line_no, $line_no_tag_end)=@{$html_or}{'_line_no', '_line_no_tag_end'};\n    debug(\"parse $self, $html_or line_no $line_no line_no_tag_end $line_no_tag_end\");\n\n\n    my @data;\n    @data[\n        $WEBDYNE_NODE_NAME_IX,\n        $WEBDYNE_NODE_ATTR_IX,\n        $WEBDYNE_NODE_CHLD_IX,\n        $WEBDYNE_NODE_SBST_IX,\n        $WEBDYNE_NODE_LINE_IX,\n        $WEBDYNE_NODE_LINE_TAG_END_IX,\n        $WEBDYNE_NODE_SRCE_IX\n    ]=(\n        undef, undef, undef, undef, $line_no, $line_no_tag_end, $meta_hr->{'manifest'}[0]\n    );\n\n\n    my $html_tag=$html_or->tag();\n\n\n    $html_tag=$CGI_Tag_Ucase{$html_tag} || $html_tag;\n\n\n    if (my %attr=map { $_=>$html_or->{$_} } (grep {!/^_/} keys %{$html_or})) {\n\n\n\n\n\tif ($html_or->{'_code'} && $attr{'perl'}) {\n\t    push @{$meta_hr->{'perl'}}, \\$attr{'perl'};\n\t    push @{$meta_hr->{'perl_debug'}}, [$line_no_tag_end, $meta_hr->{'manifest'}[0]];\n        }\n\telse {\n\t    @data[$WEBDYNE_NODE_NAME_IX, $WEBDYNE_NODE_ATTR_IX]=($html_tag, \\%attr);\n        }\n\n    }\n    else {\n\n\n\t$data[$WEBDYNE_NODE_NAME_IX]=$html_tag;\n\n    }\n\n\n    my @html_child=@{$html_or->content()};\n\n\n    foreach my $html_child_or (@html_child) {\n\n\tdebug(\"html_child_or $html_child_or\");\n\n\n\tif (ref($html_child_or)) {\n\n\n            $line_no=$html_child_or->{'_line_no'};\n            my $data_ar=$self->parse($html_child_or, $meta_hr) ||\n\t\treturn err();\n\n\n            if ($data_ar->[$WEBDYNE_NODE_NAME_IX]) {\n\t\tpush @{$data[$WEBDYNE_NODE_CHLD_IX]}, $data_ar;\n            }\n\n\t}\n\telse {\n\n\t    push (@{$data[$WEBDYNE_NODE_CHLD_IX]}, $html_child_or) \n\t\tunless  ($html_child_or=~/^\\s*$/ &&\n\t\t\t     ($html_tag ne 'pre') && ($html_tag ne 'textarea') && !$WEBDYNE_COMPILE_NO_SPACE_COMPACTING);\n\n\t}\n\n    }\n\n\n    return \\@data;\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Compile.pm",
      "package" : "WebDyne::Compile"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub errstack {\n\n    return @_ ? \\(@Err=@{$_[1]}) : \\@Err;\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Base.pm",
      "package" : "WebDyne::Base"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$_=\\%Constant",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Install/Constant.pm",
      "package" : "WebDyne::Install::Constant"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub install {\n\n\n    my ($class, $prefix, $installbin, $option_hr)=@_;\n\n\n    unless ($Uninstall_fg) {\n\tWebDyne::Install->install($prefix, $installbin) ||\n\t    return err();\n    }\n    else {\n\tWebDyne::Install->uninstall($prefix, $installbin) ||\n\t    return err();\n    }\n\n\n    (my $class_dn=$class.q(.pm))=~s/::/\\//g;\n\n\n    $class_dn=$INC{$class_dn} ||\n\treturn err(\"unable to find location for $class in \\%INC\");\n\n\n    my $class_fn=(File::Spec->splitpath($class_dn))[2];\n    $class_dn=~s/\\Q$class_fn\\E$//;\n    my @class=reverse split(/::/, $class);\n\n\n    my $cache_dn=&WebDyne::Install::cache_dn($prefix);\n\n\n    my %constant=(\n\n\t%WebDyne::Constant::Constant,\n\t%WebDyne::Install::Constant::Constant,\n\t%WebDyne::Install::Apache::Constant::Constant,\n\tDIR_INSTALLBIN\t    => $installbin,\n\tWEBDYNE_CACHE_DN    => $cache_dn,\n\n       );\n    my $config_hr=\\%constant;\n    debug('config_hr %s', Dumper($config_hr));\n\n\n    return err(\"unable to find apache binary\")\n      unless $config_hr->{'HTTPD_BIN'};\n\n\n    my $template_dn=File::Spec->catdir($class_dn, $class[0]);\n    my $template_fn=File::Spec->catfile(\n\t$template_dn, $config_hr->{'FILE_WEBDYNE_CONF_TEMPLATE'});\n\n\n    my $template_or=Text::Template->new(\n\n        type    =>  'FILE',\n        source  =>  $template_fn,\n\n       ) || return err(\"unable to open template $template_fn, $!\");\n\n\n    my $webdyne_conf=$template_or->fill_in(\n\n        HASH\t    =>  $config_hr,\n\tDELIMITERS  =>  [ '<!--', '-->' ],\n\n       ) || return err(\"unable to fill in template $template_fn, $Text::Template::ERROR\");\n\n\n\n    my $apache_conf_dn=$config_hr->{'DIR_APACHE_CONF'} ||\n\treturn err('unable to determine Apache config directory');\n\n\n    my $webdyne_conf_fn=File::Spec->catfile(\n\t$apache_conf_dn, $config_hr->{'FILE_WEBDYNE_CONF'});\n\n\n    unless ($Uninstall_fg) {\n        message \"writing Apache config file '$webdyne_conf_fn'.\";\n\tmy $webdyne_conf_fh=IO::File->new($webdyne_conf_fn, O_CREAT|O_WRONLY|O_TRUNC) ||\n\t    return err(\"unable to open file $webdyne_conf_fn, $!\");\n\tprint $webdyne_conf_fh $webdyne_conf;\n\t$webdyne_conf_fh->close();\n    }\n    else {\n\n\tif (-f $webdyne_conf_fn) {\n\t    unlink($webdyne_conf_fn) && message \"remove config file $webdyne_conf_fn\";\n\t}\n\n    }\n\n\n    unless ($config_hr->{'HTTPD_SERVER_CONFIG_SKIP'}) {\n\n\n\tmy $apache_conf_fn=$config_hr->{'HTTPD_SERVER_CONFIG_FILE'} ||\n\t    return err(\"unable to determine main server config file\");\n\t($apache_conf_fn=~/^\\//) || (\n\t    $apache_conf_fn=File::Spec->catfile(\n\t\t$config_hr->{'HTTPD_ROOT'},$apache_conf_fn));\n\tmy $apache_conf_fh=IO::File->new($apache_conf_fn, O_RDONLY) ||\n\t    return err(\"unable to open file $apache_conf_fn, $!\");\n\tmessage \"Apache config file '$apache_conf_fn'\";\n\n\n\tmy ($delim, @delim)=$config_hr->{'FILE_APACHE_CONF_DELIM'};\n\n\n\tmy ($index, @apache_conf);\n\twhile (my $line=<$apache_conf_fh>) {\n\t    push @apache_conf, $line;\n\t    push(@delim, $index) if $line=~/\\Q$delim\\E/;\n\t    $index++;\n\t}\n\n\n\tif (@delim!=2 and @delim!=0) {\n\n\t    return err(\n\t\t\"found %s '$delim' delimiter%s in $apache_conf_fn at line%s %s, expected exactly 2 delimiters\",\n\t\tscalar @delim,\n\t\t($#delim ? 's' : '') x 2,\n\t\tjoin(',', @delim)\n\t       );\n\n\t}\n\n\n\tunless (@delim) { @delim=($index, $index-1) }\n\t$delim[1]++;\n\n\n\t$apache_conf_fh->close();\n\n\n\tsplice(@apache_conf, $delim[0], $delim[1]-$delim[0]);\n\n\n\tmy $lineno=$delim[0]-1;\n\tfor (undef; $lineno > 0; $lineno--) {\n\n\n\t    my $line=$apache_conf[$lineno];\n\t    chomp($line);\n\n\n\t    if ($line=~/^\\s*$/) {\n\n\n\t\tsplice(@apache_conf, $lineno, 1);\n\n\t    }\n\t    else {\n\n\n\t\t$lineno++;\n\t\tlast;\n\n\t    }\n\t}\n\n\n\tunless ($Uninstall_fg) {\n\n\n\t    $template_fn=File::Spec->catfile(\n\t\t$template_dn, $config_hr->{'FILE_APACHE_CONF_TEMPLATE'});\n\n\n\t    $template_or=Text::Template->new(\n\n\t\ttype    =>  'FILE',\n\t\tsource  =>  $template_fn,\n\n\t       ) || return err(\"unable to open template $template_fn, $!\");\n\n\n\t    my $apache_conf=$template_or->fill_in(\n\n\t\tHASH\t    => $config_hr,\n\t\tDELIMITERS  => [ '<!--', '-->' ],\n\n\t       ) || return err(\"unable to fill in template $template_fn, $Text::Template::ERROR\");\n\n\n\t    splice(@apache_conf, $lineno, undef, $apache_conf);\n\n\n\t}\n\n\n\tunless ($Uninstall_fg && ($delim[0] == $delim[1])) {\n\t    $apache_conf_fh=IO::File->new($apache_conf_fn, O_TRUNC|O_WRONLY) ||\n\t\treturn err(\"unable to open file $apache_conf_fn, $!\");\n\t    print $apache_conf_fh join('', @apache_conf);\n\t    $apache_conf_fh->close();\n\t    message \"Apache config file '$apache_conf_fn' updated.\";\n\t}\n\n    }\n    else {\n\n\tmessage 'Apache uses conf.d directory - not changing httpd.conf file';\n\n    }\n\n\n\n    unless ($Uninstall_fg) {\n\n\tif ($cache_dn) {\n\t    unless ($cache_dn eq File::Spec->tmpdir()) {\n\t\tmessage\n\t\t    \"Granting Apache ($APACHE_UNAME.$APACHE_GNAME) ownership of cache directory '$cache_dn'.\";\n\t\tchown($APACHE_UID, $APACHE_GID, $cache_dn) ||\n\t\t    return err(\"unable to chown $cache_dn to $APACHE_UNAME.$APACHE_GNAME\");\n\n\n\t\tif ($SELINUX_ENABLED_BIN) {\n\t\t    \n\n\t\t    if ((system($SELINUX_ENABLED_BIN)>>8)==0) {\n\n\t\t\tmessage(\"SELinux appears enabled - attempting to set cache directory file contexts appropriately.\");\n\t\t\tif (my $chcon_bin=$SELINUX_CHCON_BIN) {\n\n\t\t\t    message(\"Adding SELinux context '$SELINUX_CONTEXT_HTTPD' to cache directory '$cache_dn' via chcon\");\n\t\t\t    if (my $rc=system($chcon_bin, '-R', '-t', $SELINUX_CONTEXT_HTTPD, $cache_dn)>>8) {\n\t\t\t\tmessage(\"WARNING: SELinux chcon of $cache_dn to $SELINUX_CONTEXT_HTTPD failed with error code $rc\\n\")\n\t\t\t    }\n\n\n\t\t\t    my @module_so_fn;\n\t\t\t    while (my ($module_so, $module_so_fn)=each %{$SELINUX_SO_CHECK}) {\n\t\t\t      if (eval(\"require $module_so\")) {\n                                foreach my $symbol (keys %::) {\n                                  if ($symbol=~/^_<(.*)\\/\\Q$module_so_fn\\E$/) {\n                                    push @module_so_fn, File::Spec->catfile($1,$module_so_fn);\n                                  }\n                                }\n                              }\n                            }\n\n                            foreach my $module_so_fn (@module_so_fn) {\n\n                                my $context_ls=qx/ls -lZ $module_so_fn/ ||\n                                  message(\"WARNING: unable to get context of file $module_so_fn\");\n                                my @context_ls=split(/\\s+/,$context_ls);\n                                my $context=$context_ls[3];\n                                my ($user,$role,$type)=split(/\\:/,$context);\n                                if (($type ne $SELINUX_CONTEXT_LIB) && !$option_hr->{'setcontext'}) {\n                                  message;\n                                  message(\"WARNING: SELinux context type of '$module_so_fn' is '$type'\");\n                                  message(\"WARNING: file may not be loadable by Apache ! Use $installbin --setcontext to change or fix manually\");\n                                  message;\n                                }\n                                elsif (($type ne $SELINUX_CONTEXT_LIB) && $option_hr->{'setcontext'}) {\n\n                                  message(\"Adding SELinux context '$SELINUX_CONTEXT_LIB' to module library '$module_so_fn' via chcon\");\n\n                                  if (my $rc=system($chcon_bin, '-t', $SELINUX_CONTEXT_LIB, $module_so_fn)>>8) {\n                                      message(\"WARNING: SELinux chcon of '$module_so_fn' to '$SELINUX_CONTEXT_LIB' failed with error code $rc\\n\")\n                                  }\n                                  \n                                }\n\n                            }\n\n    \t\t\t}\n\t\t\telse {\n\t\t\t    message('WARNING: SELinux appears enabled, but the \\'chcon\\' command was not found - '.\n\t\t\t\t    \"your cache directory may not be writable\\n\");\n\t\t\t}\n\n\t\t\tif (my $semanage_bin=$SELINUX_SEMANAGE_BIN) {\n\n\t\t\t    my $selist=qx/$SELINUX_SEMANAGE_BIN fcontext -l -n/;\n\t\t\t    unless ($selist=~/^\\Q$cache_dn\\E/m) {\n\n\t\t\t\tmessage(\"Adding SELinux context '$SELINUX_CONTEXT_HTTPD' to cache directory '$cache_dn' via semanage\");\n\t\t\t\tif (my $rc=system($semanage_bin, 'fcontext', '-a', '-t', $SELINUX_CONTEXT_HTTPD, \"${cache_dn}(/.*)?\")>>8) {\n\t\t\t\t    message(\"WARNING: SELinux semanage of $cache_dn to $SELINUX_CONTEXT_HTTPD failed with error code $rc\\n\")\n\t\t\t\t}\n\t\t\t    }\n\t\t\t}\n\t\t\telse {\n\t\t\t    message('WARNING: SELinux semanage utility not found - chcon changes will be lost if SELinux relabel takes place.')\n\t\t\t}\n\t\t    }\n\t\t}\n\n\n\t\tmessage 'install completed.'\n\n\t    }\n\t}\n    }\n    else {\n\n\tmessage 'uninstall completed'\n\n    };\n\n\n    message;\n    return \\undef;\n\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Install/Apache.pm",
      "package" : "WebDyne::Install::Apache"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$_=\\%Constant",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Install/Apache/Constant.pm",
      "package" : "WebDyne::Install::Apache::Constant"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DESTROY {\n\n    my $r=shift();\n    if (my $cr_ar=delete $r->{'register_cleanup'}) {\n\tforeach my $cr (@{$cr_ar}) {\n\t    $cr->($r);\n\t}\n    }\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Request/Fake.pm",
      "package" : "WebDyne::Request::Fake"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$_=\\%Constant",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/Err/Constant.pm",
      "package" : "WebDyne::Err::Constant"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub include {\n\n\n    my ($self, $method)=(shift,shift);\n    debug(\"block self $self, method $method, @_ text_fg $Text_fg\");\n    $self->$method(@_);\n\n\n}",
      "file" : "/var/tmp/arv_RZ1quw/WebDyne-1.213/lib/WebDyne/HTML/TreeBuilder.pm",
      "package" : "WebDyne::HTML::TreeBuilder"
   }
]
