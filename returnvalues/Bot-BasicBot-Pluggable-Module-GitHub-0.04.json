[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub tick {\n    my $self = shift;\n\n    my $issue_state_file = 'last-issues-state.json';\n    \n    my $seconds_between_checks = $self->get('poll_issues_interval') || 60 * 5;\n    return if time - $self->get('last_issues_poll') < $seconds_between_checks;\n    $self->set('last_issues_poll', time);\n\n    open my $fh, '<', $issue_state_file\n        or die \"Failed to open $issue_state_file - $!\";\n    my $json;\n    { local $/; $json = <$fh> }\n    close $fh;\n    my $seen_issues = $json ? JSON::from_json($json) : {};\n\n\n    my $channels_and_projects = $self->channels_and_projects;\n    channel:\n    for my $channel (keys %$channels_and_projects) {\n        my $project = $channels_and_projects->{$channel};\n        my %notifications;\n        warn \"Looking for issues for $project for $channel\";\n\n        my $ng = $self->ng($project) or next channel;\n\n        my $issues = $ng->issue->list('open');\n\n        for my $issue (@$issues) {\n            my $issuenum = $issue->{number};\n            my $details = {\n                title      => $issue->{title},\n                url        => $issue->{html_url},\n                created_by => $issue->{user},\n            };\n\n            if (my $existing = $seen_issues->{$project}{$issuenum}) {\n                if ($existing->{state} eq 'closed') {\n                    push @{ $notifications{reopened} }, \n                        [ $issuenum, $details ];\n                    $existing->{state} = 'open';\n                }\n            } else {\n                push @{ $notifications{opened} },\n                    [ $issuenum, $details ];\n                $seen_issues->{$project}{$issuenum} = {\n                    state => 'open',\n                    details => $details,\n                };\n            }\n        }\n\n        for my $issuenum (keys %{ $seen_issues->{$project} }) {\n            my $existing = $seen_issues->{$project}{$issuenum};\n            my $current = grep { \n                $_->{number} == $issuenum \n            } @$issues;\n\n            if ($existing->{state} eq 'open' && !$current) {\n                push @{ $notifications{closed} },\n                    [ $issuenum, $existing->{details} ];\n                $existing->{state} = 'closed';\n            }\n        }\n\n        for my $type (keys %notifications) {\n            my $s = scalar $notifications{$type} > 1 ? 's':'';\n\n            $self->say(\n                channel => $channel,\n                body => \"Issue$s $type : \"\n                    . join ', ', map { \n                        sprintf \"%d (%s) by %s : %s\", \n                        $_->[0], \n                        @{$_->[1]}{qw(title created_by url)}\n                    } @{ $notifications{$type} }\n            );\n        }\n    }\n\n    my $store_json = JSON::to_json($seen_issues);\n    open my $storefh, '>', $issue_state_file\n        or die \"Failed to write to $issue_state_file - $!\";\n    print {$storefh} $store_json;\n    close $storefh;\n    return;\n\n}",
      "file" : "/var/tmp/arv_SAjo0s/Bot-BasicBot-Pluggable-Module-GitHub-0.04/lib/Bot/BasicBot/Pluggable/Module/GitHub/Announce.pm",
      "package" : "Bot::BasicBot::Pluggable::Module::GitHub::Announce"
   }
]
