[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method content_type ($url) {\n    my $request  = HTTP::Request->new(HEAD => $url);\n    my $response = $self->ua->request($request);\n    my $content_type = '';\n\n    if ($response->is_success) {\n        ($content_type) = scalar($response->header('Content-Type')) =~ /^([^;]+)/;\n        $self->log(\"content type: $content_type\");\n    }\n\n    return $content_type;\n}\n\nmethod download ($url, $filename) {\n    my $ua = $self->ua;\n    my $request = HTTP::Request->new(GET => $url);\n    my $response = $ua->request($request, $filename);\n    my $status = $response->status_line;\n\n    die \"can't save URL ($url) to filename ($filename): $status\", $/ unless ($response->is_success);\n}\n\nmethod usage {\n    my $name = $self->app_name;\n    die \"usage: $name [OPTIONS] program [OPTIONS] ...\", $/;\n}\n\nmethod log {\n    warn ('wax: ', @_, $/) if ($self->debug);\n}\n\nmethod extension($url) {\n    my $split = $self->is_url($url);\n\n    return unless ($split);\n\n    my ($scheme, $domain, $path, $query, $fragment) = @$split;\n    my $content_type = $self->content_type($url);\n\n    return unless ($content_type); \n\n    my $extension;\n\n    if ($content_type eq 'text/plain') {\n        if (not(defined $query) && not(defined($fragment)) && $path && ($path =~ /\\w+(\\.\\w+)$/)) {\n            $extension = $1;\n        }\n    }\n\n    unless ($extension) {\n        my $mime_type = $self->mime_types->type($content_type);\n        my @extensions = $mime_type->extensions;\n        if (@extensions) {\n            $extension = '.' . $extensions[0];\n        }\n    }\n\n    $self->log('extension: ', $extension ? $extension : '');\n    return $extension;\n}\n\nmethod is_url($url) {\n    if ($url =~ m{^[a-zA-Z][\\w+]*://}) { \n        my ($scheme, $domain, $path, $query, $fragment) = uri_split($url);\n        if ($scheme && ($domain || $path)) { \n            return [ $scheme, $domain, $path, $query, $fragment ];\n        }\n    }\n}\n\nmethod url_to_temp_file($url) {\n    return unless ($self->is_url($url));\n\n    $self->log(\"url: $url\");\n\n    my $suffix = $self->extension($url);\n    my $template = sprintf('%s_%s', $self->app_name, TEMPLATE);\n    my $temp_file = File::Temp->new($suffix ? (SUFFIX => $suffix) : (), TEMPLATE => $template, TMPDIR => 1);\n\n    $self->log('filename: ', $temp_file->filename);\n    $self->download($url, $temp_file->filename);\n\n    return $temp_file; \n}\n\nmethod run ($argv) {\n    $self->usage unless (@$argv);\n\n    my $wax_options = 1;\n    my $seen_url = 0;\n    my ($command, @command, @files);\n\n    while (@$argv) {\n        my $arg = shift @$argv;\n\n        if ($wax_options) {\n            if ($arg =~ /^(?:-d|--debug)$/) {\n                $self->debug(1);\n            } elsif ($arg =~ /^(?:-[?h]|--help)$/) {\n                exec('perldoc', $self->app_name);\n            } elsif ($arg =~ /^(?:-s|--separator)$/) {\n                $self->separator(shift @$argv);\n            } elsif ($arg =~ /^(?:-S|--no-separator)$/) {\n                $self->separator(undef);\n            } elsif ($arg =~ /^(?:-t|--timeout)$/) {\n                $self->timeout(shift @$argv);\n            } elsif ($arg =~ /^(?:-u|--user-agent)$/) {\n                $self->agent(shift @$argv);\n            } elsif ($arg =~ /^-/) { \n                $self->usage;\n            } else { \n                $command = $arg;\n                $wax_options = 0;\n            }\n        } elsif (defined($self->separator) && ($arg eq $self->separator)) {\n            push @command, @$argv;\n            last;\n        } elsif ($self->is_url($arg)) {\n            unless ($seen_url) {\n                $self->log('user-agent: ', $self->user_agent);\n                $self->log('timeout: ', $self->timeout);\n                $seen_url = 1;\n            }\n            my $temp_file = $self->url_to_temp_file($arg);\n            push @files, $temp_file; \n            push @command, $temp_file->filename;\n        } else {\n            push @command, $arg;\n        }\n    }\n\n    $self->log(\"command: $command @command\");\n    system($command, @command);\n    my $exit_code = $? >> 8;\n    $self->log(\"exit code: $exit_code\");\n    return $exit_code;\n}\n\n1",
      "file" : "/var/tmp/arv_OQt9Xr/App-Wax-0.3.1/lib/App/Wax.pm",
      "package" : "App::Wax"
   }
]
