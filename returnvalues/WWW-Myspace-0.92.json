[
   {
      "PPI" : "PPI::Statement::Variable",
      "bad" : "my sub save_friend_info {\n\n    $self->current_page->decoded_content =~ /name=\"friendCount\"\\s+value=\"([0-9]+)\"/io;\n    $self->{_friend_count} = $1;\n    warn \"Didn't get friend count\" unless ( $self->{_friend_count} );\n\n    $self->current_page->decoded_content =~ /name=\"userName\"\\s+value=\"([^\"]*)\"/io;\n    $self->{_user_name} = $1;\n    warn \"Didn't get user_name\" unless ( $self->{_user_name} );\n\n    $self->current_page->decoded_content =~\n            /of(&nbsp;|\\s)+<a href=\"javascript:NextPage\\('|([0-9]+)'\\)/io;\n    $self->{_friend_pages} = $2;\n    if ( ( $self->{_friend_count} && ( $self->{_friend_count} < 40 ) ) &&\n         ( ! $self->{_friend_pages} ) ) {\n        $self->{_friend_pages} = 1;\n    }\n    warn \"Didn't get friend_pages\" unless ( $self->{_friend_pages} );\n\n\n\n}\n\n\nsub _next_button {\n\n    my ( $content ) = @_;\n\n    unless ( $content ) {\n        $content = $self->current_page->decoded_content;\n    }\n\n\n    $content =~ /<a [^>]*href=\\\"[^\\\"]*\\\"[^>]*>(\\s|&nbsp;)*Next(\\s|&nbsp;|&rsaquo;|&gt;)*<\\/a>/io;\n\n}\n\n\nsub _previous_button {\n\n    my ( $content ) = @_;\n\n    unless ( $content ) {\n        $content = $self->current_page->decoded_content;\n    }\n\n    $content =~ /(&lt;\\s*<a [^>]+>|<a .*?>\\s*\\&lsaquo;)\\s*Previous\\s*<\\/a>/io;\n\n}\n\n\nmy sub count_keys {\n\n    my ( $hashref ) = @_;\n\n    return keys( %{$hashref} );\n\n}\n\n\nsub _format_html {\n\n    my ( $text ) = @_;\n\n    $text =~ s/\\n/<br>\\n/gs;\n\n    return $text;\n\n}\n\n\nsub _go_home {\n\n    unless ( $self->logged_in ) {\n        $self->get_page( $BASE_URL ) or return;\n        return 1;\n    }\n\n    if ( $self->mech->uri =~ /[\\?&;]fuseaction=user([&;]|$)/io ) {\n        return 1;\n    }\n\n\n    $self->get_page( $HOME_PAGE ) or return undef;\n\n    return 1;\n\n}\n\n\nsub _validate_page_request {\n\n    my %args = ( );\n\n\n    if ( scalar @_ == 1 ) {\n        my $friend_id = shift;\n        if ( $friend_id && $friend_id !~ /[^0-9]/ ) {\n            $args{'friend_id'} = $friend_id;\n        }\n        else {\n            croak \"if passing one parameter, please pass a valid friend_id\";\n        }\n    }\n    elsif ( scalar @_ == 0 ) {\n        $args{'page'} = $self->current_page;\n    }\n    else {\n        %args = @_;\n    }\n\n    my $page = undef;\n\n    if ( exists $args{'page'} && defined $args{'page'}) {\n        $page = $args{'page'};\n    }\n    elsif ( exists $args{'friend_id'} ) {\n\n        $args{'no_validation'}=0 unless $args{'no_validation'};\n        my $res = $self->get_profile( $args{'friend_id'}, $args{'no_validation'} );\n        $page = $res unless ( $self->error );\n    }\n    else {\n        $self->error( \"You must provide either a friend_id or a response object\" );\n        return;\n    }\n\n    return $page;\n}\n\n\nsub _regex {\n\n    my $requested = shift;\n\n    if ( exists $regex{$requested} ) {\n        return $regex{$requested};\n    }\n}\n\n\nsub _apply_regex {\n\n    my %args = @_;\n\n    unless ( $args{'page'} || $args{'source'} ) { $args{'page'} = $self->current_page }\n\n    if ( exists $regex{$args{'regex'}} ) {\n        if ( $args{'page'} && ( $args{'page'}->decoded_content =~ $regex{$args{'regex'}} ) ) {\n            if ( $1 ) { return $1 } else { return 1 };\n        }\n        if ( $args{'source'} && ( $args{'source'} =~ $regex{$args{'regex'}} ) ) {\n            if ( $1 ) { return $1 } else { return 1 };\n        }\n    }\n\n}\n\n\n\n\nsub captcha_killer_handler {\n\n    return if ( ! $self->captcha_killer_api_key ); \n\n    my $data = shift;\n    my $filename = catfile( $self->cache_dir, \"captcha$$\" );\n\n    if ( !open FILE, \">$filename\" )\n    {\n        warn \"Couldn't write '$filename':  $!\\n\";\n        return;\n    }\n    print FILE $data->{'image_data'};\n    close FILE;\n\n    my $solution = $self->_use_captcha_killer(\n        $data->{'image_url'},\n        $filename\n    );\n\n    unlink ( $filename );\n\n    return { response => $solution };\n}\n\nsub _use_captcha_killer {\n\n    my $api_key = $self->captcha_killer_api_key;\n\n    my ( $captcha_url, $upload_filename ) = @_;\n\n    my $ua = LWP::UserAgent->new;\n    $ua->default_headers->push_header('CAPTCHA-Client' => \"WWW-Myspace-$VERSION\");\n\n    push @{ $ua->requests_redirectable }, \"POST\";\n\n    my $captcha_id = \"\";\n    my $expire = $self->captcha_tries * 10;\n    print \"Expire set to $expire seconds\\n\";\n    my $response = $ua->post( \"http://www.captchakiller.com/api.php\",\n            Content_Type => 'form-data',\n            Content => [ api_key => $api_key, method => \"upload_captcha\",\n            captcha_url => $captcha_url, expire => $expire, file => [ $upload_filename ] ] );\n    $captcha_id = \"\";\n    if ( $response->is_success ) {\n        print $response->decoded_content;\n        if ( $response->decoded_content =~ /SUCCESS: captcha_id=([\\w\\-]+)/o ) {\n            $captcha_id = $1;\n            print \"GOT CAPTCHA ID: $captcha_id\\n\";\n        } else {\n            return; \n        }\n    }\n    else {\n        return; \n    }\n\n    my $captcha_result = undef;\n    for ( my $cnt = 1; $cnt < $self->captcha_tries; $cnt++ ) {\n        print \"ATTEMPT $cnt of \" . $self->captcha_tries . \"\\n\";\n        my $response = $ua->post( \"http://www.captchakiller.com/api.php\",\n            Content => [ api_key => $api_key, method => \"get_result\", captcha_id => $captcha_id ] );\n        if ( $response->is_success ) {\n            print $response->decoded_content;\n            next if ( $response->decoded_content =~ /^WAIT/o );\n            last if ( $response->decoded_content =~ /^(ERROR|FAILURE)/o );\n            if ( $response->decoded_content =~ /^SUCCESS: captcha_result=\\\"(.*)\\\"$/o ) {\n                $captcha_result = $1;\n                last;\n            }\n        }\n        sleep 2;\n    }\n    return $captcha_result;\n}\n\n\n\nsub _handle_captcha {\n\n    if (!defined $self->captcha_handler) {\n        print \"No CAPTCHA handler set\\n\" if $DEBUG;\n        return undef;\n    }\n\n\n    my $data = shift;\n   \n    if ( ref $data ne \"HASH\" ) {\n        my $image_url = $data;\n        $data = {};\n        $data->{'image_url'} = $image_url;\n    }\n\n    print \"Getting CAPTCHA image from '\".$data->{'image_url'}.\"'\\n\" if $DEBUG;\n    my $res = $self->mech->get($data->{'image_url'});\n    $data->{'image_data'} = $res->decoded_content;\n    $data->{'image_type'} = $res->header('Content-Type');\n\n\n    print \"Invoking CAPTCHA handler\\n\" if $DEBUG;\n    my $result = &{$self->captcha_handler}($self->captcha_handler_param, $data);\n\n\n    return undef if (!defined $result);\n\n    if (ref $result ne \"HASH\") {\n        warn \"CAPTCHA handler did not return a hash reference as required\";\n        return undef;\n    }\n\n    return $result->{'response'};\n\n}\n\n\nsub ____IN_PROGRESS____ {}",
      "file" : "/var/tmp/arv_uE5O6f/WWW-Myspace-0.92/lib/WWW/Myspace.pm",
      "package" : "WWW::Myspace"
   }
]
