[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub get_config\n{\n\tmy ($config_file, %opts) = @_;\n\n\tmy $raw = read_file($config_file);\n\tmy @sections = split(/^---\\n/m, $raw);\n\n\tmy %metakeys = (\n\t\tEVAL_REPLACE\t=> 'do string replacements with evaluated perl',\n\t\tREPLACE\t\t=> 'do string replacements',\n\t\tNO_REPLACE\t=> 'stop doing string replacements',\n\t\tINCLUDE\t\t=> 'include another file',\n\t\tOVERRIDE_FROM\t=> 'overrides from another file',\n\t);\n\n\tmy $old_behavior = Hash::Merge::get_behavior();\n\tHash::Merge::set_behavior($opts{merge_behavior} || 'RETAINMENT_PRECEDENT');\n\n\tmy %replacements = $opts{replacements} ? %{$opts{replacements}} : ();\n\tmy $config = {};\n\twhile (@sections) {\n\t\tmy $yaml = shift @sections;\n\t\tnext unless $yaml; \n\t\t$yaml =~ s/^(\\t+)/\" \" x length($1) * 8/e;\n\t\tmy $newstuff = eval { Load( { file => $config_file }, \"---\\n$yaml\"); };\n\t\tdie \"When loadking from $config_file, YAML error: $@\" if $@;\n\t\tmy $meta = 0;\n\t\tmy $non_meta = 0;\n\t\tfor my $k (keys %$newstuff) {\n\t\t\tif ($metakeys{$k}) {\n\t\t\t\t$meta++;\n\t\t\t} else {\n\t\t\t\t$non_meta++;\n\t\t\t}\n\t\t}\n\t\tif ($meta && $non_meta) {\n\t\t\tdie;\n\t\t} elsif ($meta) {\n\t\t\tif ($newstuff->{NO_REPLACE}) {\n\t\t\t\tlistify(%$newstuff, 'NO_REPLACE');\n\t\t\t\tdelete @replacements{@{$newstuff->{NO_REPLACE}}};\n\t\t\t}\n\t\t\treplace(%replacements, $yaml);\n\t\t\t$newstuff = Load( { file => $config_file }, \"---\\n$yaml\");\n\t\t\t@replacements{keys %{$newstuff->{REPLACE}}} = values %{$newstuff->{REPLACE}}\n\t\t\t\tif $newstuff->{REPLACE};\n\t\t\tif ($newstuff->{EVAL_REPLACE}) {\n\t\t\t\tdie \"In $config_file, EVAL_REPLACE should be a hash\" \n\t\t\t\t\tunless ref($newstuff->{EVAL_REPLACE}) eq 'HASH';\n\t\t\t\tfor my $ekey (keys %{$newstuff->{EVAL_REPLACE}}) {\n\t\t\t\t\t$replacements{$ekey} = eval $newstuff->{EVAL_REPLACE}{$ekey};\n\t\t\t\t\tdie \"Eval failure for $ekey in $config_file: $@\" if $@;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlistify(%$newstuff, qw(INCLUDE OVERRIDE_FROM));\n\t\t\tfor my $include (@{$newstuff->{INCLUDE}}) {\n\t\t\t\tdie if ref($include);\n\n\t\t\t\tif (! -e $include) {\n\t\t\t\t\tmy $alt = dirname($config_file) . \"/\" . $include;\n\t\t\t\t\t$include = $alt if -e $alt;\n\t\t\t\t}\n\n\t\t\t\tmy $conf = get_config($include, %opts, replacements => \\%replacements);\n\n\t\t\t\t$config = Hash::Merge::merge($config, $conf);\n\t\t\t}\n\t\t\tfor my $override (@{$newstuff->{OVERRIDE_FROM}}) {\n\t\t\t\tmy $conf = get_config($override, %opts, replacements => \\%replacements);\n\t\t\t\tHash::Merge::set_behavior('RIGHT_PRECEDENT');\n\t\t\t\t$config = Hash::Merge::merge($config, $conf);\n\t\t\t\tHash::Merge::set_behavior($opts{merge_behavior} || 'RETAINMENT_PRECEDENT');\n\t\t\t}\n\t\t} else {\n\t\t\treplace(%replacements, $yaml);\n\t\t\t$newstuff = Load( { file => $config_file }, \"---\\n$yaml\");\n\t\t\t$config = Hash::Merge::merge($config, $newstuff);\n\t\t}\n\t}\n\tHash::Merge::set_behavior($old_behavior) if $old_behavior;\n\treturn $config;\n}",
      "file" : "/var/tmp/arv__mFwj0/Config-Checker-0.42/lib/Config/YAMLMacros.pm",
      "package" : "Config::YAMLMacros"
   }
]
