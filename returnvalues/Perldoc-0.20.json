[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub kwid_to_html {\n    my $class = shift;\n\n    require Perldoc::Parser::Kwid;\n    require Perldoc::Emitter::HTML;\n\n    my $html = '';\n    my $receiver = Perldoc::Emitter::HTML->new->init(\n        stringref => \\$html,\n    );\n    my $parser = Perldoc::Parser::Kwid->new(\n        receiver => $receiver,\n    )->init(@_);\n    $parser->parse;\n    return $html;\n}",
      "file" : "/var/tmp/arv_JK5ZGb/Perldoc-0.20/lib/Perldoc.pm",
      "package" : "Perldoc"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub open_handle {\n    my $filepath = $self->filepath;\n    $filepath = \"> $filepath\"\n      unless $filepath =~ /^>/;\n    open my $ouput, $filepath\n      or die \"Can't open '$filepath' for output:\\n$!\";\n    return $filepath;\n}",
      "file" : "/var/tmp/arv_JK5ZGb/Perldoc-0.20/lib/Perldoc/Writer.pm",
      "package" : "Perldoc::Writer"
   },
   {
      "PPI" : "PPI::Statement::Include",
      "bad" : "use Spiffy 0.29 -Base",
      "file" : "/var/tmp/arv_JK5ZGb/Perldoc-0.20/lib/Perldoc/Base.pm",
      "package" : "Perldoc::Base"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _all_filehandle {\n    my $filehandle = $self->filehandle;\n    local $/;\n    return <$filehandle>;\n}",
      "file" : "/var/tmp/arv_JK5ZGb/Perldoc-0.20/lib/Perldoc/Reader.pm",
      "package" : "Perldoc::Reader"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub parse {\n    my @stack;    \n    my @has = (\\$kwid);\n    my $str = $self->reader->all;\n\n    $str = '' unless defined($str);\n    pos($str) = 0;\n\n    PARSE: {\n        my $candidates = join('|',\n            map { \"($_)\" } (\n                (map { $_->[ENDS] } @stack),\n                (map { ($$_)->{begins} } @has)\n            )\n        );\n\n        my $pos = pos($str);\n        my $cur = $pos;\n\n      MATCH:\n        pos($str) = $cur;\n        $str =~ /\\G(?:$candidates)/g or do {\n            if ($str =~ /\\G(?:\\\\.)+/gs) {\n                $cur = pos($str);\n            }\n            else {\n                ++$cur;\n            }\n            goto MATCH;\n        };\n\n        foreach my $idx (1 .. $#+) {\n            no strict 'refs';\n            defined $$idx or next;\n\n            $self->receiver->text(substr($str, $pos, $cur - $pos))\n              if $cur > $pos;\n\n            if ($idx <= @stack) {\n                $self->receiver->ends($_->[EVENT])\n                  for reverse splice(@stack, $idx - 1);\n\n                @stack or last PARSE;\n\n                @has = @{ $stack[-1][HAS] };\n                redo PARSE;\n            }\n\n            my $parser = ${ $has[ $idx - @stack - 1 ] };\n            my $id     = $parser->{id};\n            my $ends   = $parser->{ends};\n            my $event  = $parser->{event} || $id;\n\n            $ends = $ends->($$idx) if ref $ends eq 'CODE';\n            $event = $event->($$idx) if ref $event eq 'CODE';\n\n            my @this_has = ();\n\n          HAS:\n            foreach my $has (@{ $parser->{has} }) {\n                if (($$has)->{nest}) {\n                    push @this_has, $has;\n                }\n                else {\n                    foreach my $frame (@stack) {\n                        next HAS if $frame->[ID] eq ($$has)->{id};\n                    }\n                }\n                push @this_has, $has;\n            }\n\n            push @stack, [ $id, \\@this_has, $ends, $event ];\n            @has = @this_has;\n\n            $self->receiver->begins($event);\n            redo PARSE;\n        }\n    }\n}",
      "file" : "/var/tmp/arv_JK5ZGb/Perldoc-0.20/lib/Perldoc/Parser/Kwid.pm",
      "package" : "Perldoc::Parser::Kwid"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub text {\n    my $output = shift;\n    $output =~ s/\\\\(.)/$1/g;\n    decode_entities($output);\n    encode_entities($output, '<>&\"');\n    $prev_text = $output;\n    $output .= \"\\n\";\n    $self->writer->print($output);\n}",
      "file" : "/var/tmp/arv_JK5ZGb/Perldoc-0.20/lib/Perldoc/Emitter/HTML.pm",
      "package" : "Perldoc::Emitter::HTML"
   }
]
