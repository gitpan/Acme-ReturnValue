[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub install {\n\n\n    my ($class, $prefix, $installbin)=@_;\n\n\n    unless ($Uninstall_fg) {\n\tWebDyne::Install->install($prefix, $installbin) ||\n\t    return err();\n    }\n    else {\n\tWebDyne::Install->uninstall($prefix, $installbin) ||\n\t    return err();\n    }\n\n\n    (my $class_fn=$class.q(.pm))=~s/::/\\//g;\n\n\n    $class_fn=$INC{$class_fn} ||\n\treturn err(\"unable to find location for $class in \\%INC\");\n\n\n    my $class_dn=(File::Spec->splitpath($class_fn))[1];\n    my @class=split(/\\:\\:/, $class);\n\n\n    my $cache_dn=&WebDyne::Install::cache_dn($prefix);\n\n\n    my %constant=(\n\n\t%WebDyne::Constant::Constant,\n\t%WebDyne::Install::Constant::Constant,\n\t%WebDyne::Install::Lighttpd::Constant::Constant,\n\tDIR_INSTALLBIN\t    => $installbin,\n\tWEBDYNE_CACHE_DN    => $cache_dn,\n\n       );\n    my $config_hr=\\%constant;\n    debug('config_hr %s', Dumper($config_hr));\n\n\n    my $template_dn=File::Spec->catdir($class_dn, $class[-1]);\n    my $template_fn=File::Spec->catfile(\n\t$template_dn, $FILE_WEBDYNE_CONF_TEMPLATE);\n\n\n    my $template_or=Text::Template->new(\n\n        type    =>  'FILE',\n        source  =>  $template_fn,\n\n       ) || return err(\"unable to open template $template_fn, $!\");\n\n\n    my $webdyne_conf=$template_or->fill_in(\n\n        HASH\t    =>  $config_hr,\n\tDELIMITERS  =>  [ '<!--', '-->' ], \n\n       ) || return err(\"unable to fill in template $template_fn, $Text::Template::ERROR\");\n\n\n\n    my $lighttpd_conf_dn=$DIR_LIGHTTPD_CONF ||\n\treturn err('unable to determine Lighttpd config directory');\n\n\n    my $webdyne_conf_fn=File::Spec->catfile(\n\t$lighttpd_conf_dn, $FILE_WEBDYNE_CONF);\n\n\n    unless ($Uninstall_fg) {\n        message \"writing Lighttpd config file '$webdyne_conf_fn'.\";\n\tmy $webdyne_conf_fh=IO::File->new($webdyne_conf_fn, O_CREAT|O_WRONLY|O_TRUNC) ||\n\t    return err(\"unable to open file $webdyne_conf_fn, $!\");\n\tprint $webdyne_conf_fh $webdyne_conf;\n\t$webdyne_conf_fh->close();\n    }\n    else {\n\n\tif (-f $webdyne_conf_fn) {\n\t    unlink($webdyne_conf_fn) && message \"remove config file $webdyne_conf_fn\";\n\t}\n\n    }\n\n\n\n\n\n    my $lighttpd_conf_fn=$FILE_LIGHTTPD_CONF ||\n        return err(\"unable to determine main server config file\");\n    my $lighttpd_conf_fh=IO::File->new($lighttpd_conf_fn, O_RDONLY) ||\n        return err(\"unable to open file lighttpd_conf_fn, $!\");\n    message \"Lighttpd config file '$lighttpd_conf_fn'\";\n\n\n    my ($delim, @delim)=$config_hr->{'FILE_LIGHTTPD_CONF_DELIM'};\n\n\n    my ($index, @lighttpd_conf);\n    while (my $line=<$lighttpd_conf_fh>) {\n        push @lighttpd_conf, $line;\n        push(@delim, $index) if $line=~/\\Q$delim\\E/;\n        $index++;\n    }\n\n\n    if (@delim!=2 and @delim!=0) {\n\n        return err(\n            \"found %s '$delim' delimiter%s in $lighttpd_conf_fn at line%s %s, expected exactly 2 delimiters\",\n            scalar @delim,\n            ($#delim ? 's' : '') x 2,\n            join(',', @delim)\n           );\n\n    }\n\n\n    unless (@delim) { @delim=($index, $index-1) }\n    $delim[1]++;\n\n\n    $lighttpd_conf_fh->close();\n\n\n    splice(@lighttpd_conf, $delim[0], $delim[1]-$delim[0]);\n\n\n    my $lineno=$delim[0]-1;\n    for (undef; $lineno > 0; $lineno--) {\n\n\n        my $line=$lighttpd_conf[$lineno];\n        chomp($line);\n\n\n        if ($line=~/^\\s*$/) {\n\n\n            splice(@lighttpd_conf, $lineno, 1);\n\n        }\n        else {\n\n\n            $lineno++;\n            last;\n\n        }\n    }\n\n\n    unless ($Uninstall_fg) {\n\n\n        $template_fn=File::Spec->catfile(\n            $class_dn, $class[-1], $FILE_LIGHTTPD_CONF_TEMPLATE);\n\n\n        $template_or=Text::Template->new(\n\n            type    =>  'FILE',\n            source  =>  $template_fn,\n\n           ) || return err(\"unable to open template $template_fn, $!\");\n\n\n        my $lighttpd_conf=$template_or->fill_in(\n\n            HASH\t=> $config_hr,\n            DELIMITERS  => [ '<!--', '-->' ], \n\n           ) || return err(\"unable to fill in template $template_fn, $Text::Template::ERROR\");\n\n\n        splice(@lighttpd_conf, $lineno, undef, $lighttpd_conf);\n\n\n    }\n\n\n    unless ($Uninstall_fg && ($delim[0] == $delim[1])) {\n        $lighttpd_conf_fh=IO::File->new($lighttpd_conf_fn, O_TRUNC|O_WRONLY) ||\n            return err(\"unable to open file $lighttpd_conf_fn, $!\");\n        print $lighttpd_conf_fh join('', @lighttpd_conf);\n        $lighttpd_conf_fh->close();\n        message \"Lighttpd config file '$lighttpd_conf_fn' updated.\";\n    }\n\n\n    unless ($Uninstall_fg) {\n\n\tif ($cache_dn) {\n\t    unless ($cache_dn eq File::Spec->tmpdir()) {\n\t\tmessage\n\t\t    \"Granting Lighttpd ($LIGHTTPD_UNAME.$LIGHTTPD_GNAME) write access to cache directory '$cache_dn'.\";\n\t\tchown($LIGHTTPD_UID, $LIGHTTPD_GID, $cache_dn) ||\n\t\t    return err(\"unable to chown $cache_dn to $LIGHTTPD_UNAME.$LIGHTTPD_GNAME\");\n\n\t\tmessage \"install completed.\";\n\n\t    }\n\t}\n    }\n    else {\n\n\tmessage \"uninstall completed\";\n\n    };\n\n\n    message;\n    return \\undef;\n\n\n}",
      "file" : "/var/tmp/arv__Ke4GW/WebDyne-Install-Lighttpd-1.009/lib/WebDyne/Install/Lighttpd.pm",
      "package" : "WebDyne::Install::Lighttpd"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$_=\\%Constant",
      "file" : "/var/tmp/arv__Ke4GW/WebDyne-Install-Lighttpd-1.009/lib/WebDyne/Install/Lighttpd/Constant.pm",
      "package" : "WebDyne::Install::Lighttpd::Constant"
   }
]
