[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "method login(Str $login, Str $password) {\n    my $res = $self->_post(POST => 'http://slimtimer.com/users/token',\n            { user => { email => $login, password => $password } },\n            error => \"Failed to login as \\\"$login\\\"\"\n        );\n\n    $self->_set_user_id($res->{user_id});\n    $self->_set_access_token($res->{access_token})\n}\n\n\nmethod _get_tasks_uri(Int $task_id?) {\n    my $uri = \"http://slimtimer.com/users/$self->{user_id}/tasks\";\n    if ( defined $task_id ) {\n        $uri .= \"/$task_id\"\n    }\n\n    return $uri\n}\n\n\nmethod list_tasks(Bool $include_completed = 1) {\n    my $tasks_entries = $self->_request(GET => $self->_get_tasks_uri,\n                params => {\n                    show_completed => $include_completed ? 'yes' : 'no'\n                },\n                error => \"Failed to get the tasks list\"\n            );\n\n    my @tasks;\n    for (@$tasks_entries) {\n        push @tasks, WebService::SlimTimer::Task->new(%$_);\n    }\n\n    return @tasks;\n}\n\n\nmethod create_task(Str $name) {\n    my $res = $self->_post(POST => $self->_get_tasks_uri,\n            { task => { name => $name } },\n            error => \"Failed to create task \\\"$name\\\"\"\n        );\n\n    return WebService::SlimTimer::Task->new($res);\n}\n\n\nmethod delete_task(Int $task_id) {\n    $self->_request(DELETE => $self->_get_tasks_uri($task_id),\n            error => \"Failed to delete the task $task_id\"\n        );\n}\n\n\nmethod get_task(Int $task_id) {\n    my $res = $self->_request(GET => $self->_get_tasks_uri($task_id),\n            error => \"Failed to find the task $task_id\"\n        );\n\n    return WebService::SlimTimer::Task->new($res);\n}\n\n\nmethod complete_task(Int $task_id, TimeStamp $completed_on) {\n    $self->_post(PUT => $self->_get_tasks_uri($task_id),\n            { task => { completed_on => $self->_format_time($completed_on) } },\n            error => \"Failed to mark the task $task_id as completed\"\n        );\n}\n\n\n\nmethod _get_entries_uri(Int $entry_id?) {\n    my $uri = \"http://slimtimer.com/users/$self->{user_id}/time_entries\";\n    if ( defined $entry_id ) {\n        $uri .= \"/$entry_id\"\n    }\n\n    return $uri\n}\n\nmethod _list_entries(\n    Maybe[Int] $taskId,\n    OptionalTimeStamp $start,\n    OptionalTimeStamp $end) {\n    my $uri = defined $taskId\n                ? $self->_get_tasks_uri($taskId) . \"/time_entries\"\n                : $self->_get_entries_uri;\n\n    my %params;\n    $params{'range_start'} = $self->_format_time($start) if defined $start;\n    $params{'range_end'} = $self->_format_time($end) if defined $end;\n\n    my $entries = $self->_request(GET => $uri,\n                params => \\%params,\n                error => \"Failed to get the entries list\"\n            );\n\n    my @time_entries;\n    for (@$entries) {\n        push @time_entries, WebService::SlimTimer::TimeEntry->new($_);\n    }\n\n    return @time_entries;\n}\n\n\nmethod list_entries(TimeStamp :$start, TimeStamp :$end) {\n    return $self->_list_entries(undef, $start, $end);\n}\n\n\nmethod list_task_entries(Int $taskId, TimeStamp :$start, TimeStamp :$end) {\n    return $self->_list_entries($taskId, $start, $end);\n}\n\n\nmethod get_entry(Int $entryId) {\n    my $res = $self->_request(GET => $self->_get_entries_uri($entryId),\n                error => \"Failed to get the entry $entryId\"\n            );\n\n    return WebService::SlimTimer::TimeEntry->new($res);\n}\n\n\nmethod create_entry(Int $taskId, TimeStamp $start, TimeStamp $end?) {\n    $end = DateTime->now if !defined $end;\n\n    my $res = $self->_post(POST => $self->_get_entries_uri, {\n                    time_entry => {\n                        task_id => $taskId,\n                        start_time => $self->_format_time($start),\n                        end_time => $self->_format_time($end),\n                        duration_in_seconds => $end->epoch() - $start->epoch(),\n                    }\n                },\n                error => \"Failed to create new entry for task $taskId\"\n            );\n\n    return WebService::SlimTimer::TimeEntry->new($res);\n}\n\n\nmethod update_entry(\n    Int $entry_id,\n    Int $taskId,\n    TimeStamp $start,\n    TimeStamp $end) {\n    $self->_post(PUT => $self->_get_entries_uri($entry_id), {\n                time_entry => {\n                    task_id => $taskId,\n                    start_time => $self->_format_time($start),\n                    end_time => $self->_format_time($end),\n                    duration_in_seconds => $end->epoch() - $start->epoch(),\n                }\n            },\n            error => \"Failed to update the entry $entry_id\"\n        );\n}\n\n\nmethod delete_entry(Int $entry_id) {\n    $self->_request(DELETE => $self->_get_entries_uri($entry_id),\n            error => \"Failed to delete the entry $entry_id\"\n        );\n}\n\n1",
      "file" : "/var/tmp/arv_eMaZZw/WebService-SlimTimer-0.005/lib/WebService/SlimTimer.pm",
      "package" : "WebService::SlimTimer"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "coerce OptionalTimeStamp,\n    from Str,\n    via { defined $_ ? _DateTime_from_YAML($_) : undef }",
      "file" : "/var/tmp/arv_eMaZZw/WebService-SlimTimer-0.005/lib/WebService/SlimTimer/Types.pm",
      "package" : "WebService::SlimTimer::Types"
   }
]
