[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "sub v2_zoom {\n  my ($this, $zoom_level) = @_;\n\n  $this->{zoom} = $zoom_level;\n}\n\nsub controls {\n  my ($this, @controls) = @_;\n\n  my %valid_controls = map { $_ => 1 } qw(large_map_control\n    small_map_control\n    small_zoom_control\n    map_type_control);\n  return 0 if grep { !$valid_controls{$_} } @controls;\n\n  $this->{controls} = [ @controls ];\n}\n\nsub dragging {\n  my ($this, $dragging) = @_;\n\n  $this->{dragging} = $dragging;\n}\n\nsub info_window {\n  my ($this, $info) = @_;\n\n  $this->{info_window} = $info;\n}\n\nsub map_type {\n  my ($this, $type) = @_;\n\n  my %valid_types = (map_type => 'G_NORMAL_MAP',\n    satellite_type => 'G_SATELLITE_MAP',\n    normal => 'G_NORMAL_MAP',\n    satellite => 'G_SATELLITE_MAP',\n    hybrid => 'G_HYBRID_MAP');\n  return 0 unless $valid_types{$type};\n\n  $this->{type} = $valid_types{$type};\n}\n\nsub map_id {\n  my ($this, $id) = @_;\n  $this->{id} = $id;\n}\n\nsub add_marker {\n  my ($this, %opts) = @_;\n    \n  return 0 if $opts{icon} && $opts{icon} !~ /^[A-J]$/\n    && !$this->{icon_hash}{$opts{icon}};\n\n  my $point = $this->_text_to_point($opts{point});\n  return 0 unless $point;\n\n  push @{$this->{points}}, { point => $point,\n    icon => $opts{icon},\n    html => $opts{html},\n    format => !$opts{noformat} };\n}\n\nsub add_icon {\n  my ($this, %opts) = @_;\n\n  return 0 unless $opts{image} && $opts{shadow} && $opts{name};\n    \n  $this->{icon_hash}{$opts{name}} = 1;\n  push @{$this->{icons}}, \\%opts;\n}\n\nsub add_polyline {\n  my ($this, %opts) = @_;\n\n  my @points = map { $this->_text_to_point($_) } @{$opts{points}};\n  return 0 if grep { !$_ } @points;\n\n  push @{$this->{poly_lines}}, { points => \\@points,\n    color => $opts{color} || \"\\#0000ff\",\n    weight => $opts{weight} || 5,\n    opacity => $opts{opacity} || .5 };\n}\n\nsub onload_render {\n  my ($this) = @_;\n\n  $this->{id} ||= 'map';\n  $this->{height} ||= '400px';\n  $this->{width} ||= '600px';\n  $this->{dragging} = 1 unless defined $this->{dragging};\n  $this->{info_window} = 1 unless defined $this->{info_window};\n  $this->{type} ||= \"G_NORMAL_MAP\";\n  $this->{zoom} ||= 13;\n  $this->{center} ||= $this->_find_center;\n\n  if ( $this->{width} =~ m/^\\d+$/ ) {\n      $this->{width} .= 'px';\n  }\n  if ( $this->{height} =~ m/^\\d+$/ ) {\n      $this->{height} .= 'px';\n  }\n\n  my $header = sprintf(\n    '<script src=\"http://maps.google.com/maps?file=api&amp;v=2&amp;key=%s\" '\n      . 'type=\"text/javascript\"></script>',\n    $this->{key},\n  );\n  my $map = sprintf(\n    '<div id=\"%s\" style=\"width: %s; height: %s\"></div>',\n    $this->{id},\n    $this->{width},\n    $this->{height},\n  );\n\n  $header .= <<SCRIPT;\n  $header .= \"      map.setCenter(new GLatLng($this->{center}[0], $this->{center}[1]));\\n\"\n    if $this->{center};\n  $header .= \"      map.setZoom($this->{zoom});\\n\"\n    if $this->{zoom};\n\n  $header .= \"      map.setMapType($this->{type});\\n\";\n\n  if ($this->{controls}) {\n    foreach my $control (@{$this->{controls}}) {\n      $control =~ s/_(.)/uc($1)/ge;\n      $control = ucfirst($control);\n      $header .= \"      map.addControl(new G${control}());\\n\";\n    }\n  }\n  unless ($this->{dragging}) {\n    $header .= \"      map.disableDragging();\\n\";\n  }\n\n  my %icons = map { $_->{icon} => 1 } \n    grep { defined $_->{icon} && $_->{icon} =~ /^([A-J])$/; } \n      @{$this->{points}};\n  foreach my $icon (keys %icons) {\n    $header .= \"      var icon_$icon = new GIcon();\n      icon_$icon.shadow = \\\"http://www.google.com/mapfiles/shadow50.png\\\";\n      icon_$icon.iconSize = new GSize(20, 34);\n      icon_$icon.shadowSize = new GSize(37, 34);\n      icon_$icon.iconAnchor = new GPoint(9, 34);\n      icon_$icon.infoWindowAnchor = new GPoint(9, 2);\n      icon_$icon.image = \\\"http://www.google.com/mapfiles/marker$icon.png\\\";\\n\\n\"\n  }\n\n  foreach my $icon (@{$this->{icons}}) {\n    $header .= \"      var icon_$icon->{name} = new GIcon();\\n\";\n    $header .= \"      icon_$icon->{name}.shadow = \\\"$icon->{shadow}\\\"\\n\"\n      if $icon->{shadow};\n    $header .= \"      icon_$icon->{name}.iconSize = new GSize($icon->{icon_size}[0], $icon->{icon_size}[1]);\\n\"\n      if ref($icon->{icon_size}) eq \"ARRAY\";\n    $header .= \"      icon_$icon->{name}.shadowSize = new GSize($icon->{shadow_size}[0], $icon->{shadow_size}[1]);\\n\"\n      if ref($icon->{shadow_size}) eq \"ARRAY\";\n    $header .= \"      icon_$icon->{name}.iconAnchor = new GPoint($icon->{icon_anchor}[0], $icon->{icon_anchor}[1]);\\n\"\n      if ref($icon->{icon_anchor}) eq \"ARRAY\";\n    $header .= \"      icon_$icon->{name}.infoWindowAnchor = new GPoint($icon->{info_window_anchor}[0], $icon->{info_window_anchor}[1]);\\n\"\n      if ref($icon->{info_window_anchor}) eq \"ARRAY\";\n    $header .= \"      icon_$icon->{name}.image = \\\"$icon->{image}\\\";\\n\\n\";\n  }\n\n  my $i;\n  foreach my $point (@{$this->{points}}) {\n    $i++;\n\n    my $icon = '';\n    if (defined $point->{icon}) {\n      $point->{icon} =~ s/(.+)/icon_$1/;\n      $icon = \", $point->{icon}\";\n    }\n\n    my $point_html = $point->{html};\n    if ($point->{format} && $point->{html}) {\n      $point_html = sprintf(\n        '<div style=\"width:350px;height:200px;\">%s</div>',\n        $point->{html},\n      );\n    }\n\n    $header .= \"      var marker_$i = new GMarker(new GLatLng($point->{point}[0], $point->{point}[1]) $icon);\\n\";\n    if ( $point->{html} ) {\n        $point_html =~ s/'/\\\\'/g;\n    $header .= \"      GEvent.addListener(marker_$i, \\\"click\\\", function () {  marker_$i.openInfoWindowHtml('$point_html'); });\\n\"\n    }\n    $header .= \"      map.addOverlay(marker_$i);\\n\";\n  }\n\n  $i = 0;\n  foreach my $polyline (@{$this->{poly_lines}}) {\n    $i++;\n    my $points = \"[\" . join(\", \", map { \"new GLatLng($_->[0], $_->[1])\" } @{$polyline->{points}}) . \"]\";\n    $header .= \"      var polyline_$i = new GPolyline($points, \\\"$polyline->{color}\\\", $polyline->{weight}, $polyline->{opacity});\\n\";\n    $header .= \"      map.addOverlay(polyline_$i);\\n\";\n  }\n\n  $header .= \"    }\n  }\n    //]]>\n    </script>\";\n\n  return ($header, $map);\n}\n\nsub render {\n  my ($this) = @_;\n  my ($header, $map) = $this->onload_render;\n  ($header, my $text) = split(/\\n/, $header, 2);\n  $text =~ s/(.*})/$1\\n  html_googlemaps_initialize();/s;\n\n  return ($header, $map, $text);\n}\n\n1",
      "file" : "/var/tmp/arv_kANcy9/HTML-GoogleMaps-10/lib/HTML/GoogleMaps.pm",
      "package" : "HTML::GoogleMaps"
   }
]
