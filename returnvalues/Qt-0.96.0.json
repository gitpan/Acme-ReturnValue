[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub lineNumberAreaPaintEvent {\n    my ($event) = @_;\n    my $painter = Qt::Painter(this->lineNumberArea);\n    $painter->fillRect($event->rect(), Qt::Brush(Qt::Color(Qt::lightGray())));\n\n\n    my $block = this->firstVisibleBlock();\n    my $blockNumber = $block->blockNumber();\n    my $top = int this->blockBoundingGeometry($block)->translated(this->contentOffset())->top();\n    my $bottom = $top + int this->blockBoundingRect($block)->height();\n\n    while ($block->isValid() && $top <= $event->rect()->bottom()) {\n        if ($block->isVisible() && $bottom >= $event->rect()->top()) {\n            my $number = $blockNumber + 1;\n            $painter->setPen(Qt::Color(Qt::black()));\n            $painter->drawText(0, $top, this->lineNumberArea->width(), this->fontMetrics()->height(),\n                             Qt::AlignRight(), $number);\n        }\n\n        $block = $block->next();\n        $top = $bottom;\n        $bottom = $top + int this->blockBoundingRect($block)->height();\n        ++$blockNumber;\n    }\n\n    $painter->end();\n}",
      "file" : "/var/tmp/arv_SdTz84/Qt-0.96.0/qtgui/examples/widgets/codeeditor/CodeEditor.pm",
      "package" : "CodeEditor"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "void NorwegianWoodStyle::drawControl(ControlElement element,\n                                     const Qt::StyleOption *option,\n                                     Qt::Painter *painter,\n                                     const Qt::Widget *widget) const\n{\n    switch (element) {\n    case CE_PushButtonLabel:\n        {\n            Qt::StyleOptionButton myButtonOption;\n            const Qt::StyleOptionButton *buttonOption =\n                    qstyleoption_cast<const Qt::StyleOptionButton *>(option);\n            if (buttonOption) {\n                myButtonOption = *buttonOption;\n                if (myButtonOption.palette.currentColorGroup()\n                        != Qt::Palette::Disabled) {\n                    if (myButtonOption.state & (State_Sunken | State_On)) {\n                        myButtonOption.palette.setBrush(Qt::Palette::ButtonText,\n                                myButtonOption.palette.brightText());\n                    }\n                }\n            }\n            Qt::MotifStyle::drawControl(element, &myButtonOption, painter, widget);\n        }\n        break;\n    default:\n        Qt::MotifStyle::drawControl(element, option, painter, widget);\n    }\n}\n\nvoid NorwegianWoodStyle::setTexture(Qt::Palette &palette, Qt::Palette::ColorRole role,\n                                    const Qt::Pixmap &pixmap)\n{\n    for (int i = 0; i < Qt::Palette::NColorGroups; ++i) {\n        Qt::Color color = palette.brush(Qt::Palette::ColorGroup(i), role).color();\n        palette.setBrush(Qt::Palette::ColorGroup(i), role, Qt::Brush(color, pixmap));\n    }\n}\n\nQt::PainterPath NorwegianWoodStyle::roundRectPath(const Qt::Rect &rect)\n{\n    int radius = qMin(rect.width(), rect.height()) / 2;\n    int diam = 2 * radius;\n\n    int x1, y1, x2, y2;\n    rect.getCoords(&x1, &y1, &x2, &y2);\n\n    Qt::PainterPath path;\n    path.moveTo(x2, y1 + radius);\n    path.arcTo(Qt::Rect(x2 - diam, y1, diam, diam), 0.0, +90.0);\n    path.lineTo(x1 + radius, y1);\n    path.arcTo(Qt::Rect(x1, y1, diam, diam), 90.0, +90.0);\n    path.lineTo(x1, y2 - radius);\n    path.arcTo(Qt::Rect(x1, y2 - diam, diam, diam), 180.0, +90.0);\n    path.lineTo(x1 + radius, y2);\n    path.arcTo(Qt::Rect(x2 - diam, y2 - diam, diam, diam), 270.0, +90.0);\n    path.closeSubpath();\n    return path;\n}\n\n1",
      "file" : "/var/tmp/arv_SdTz84/Qt-0.96.0/qtgui/examples/widgets/styles/NorwegianWoodStyle.pm",
      "package" : "NorwegianWoodStyle"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub write\n{\n    my ($device) = @_;\n    out->setDevice($device);\n    out->setCodec('UTF-8');\n    no warnings 'void';\n    out << \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n",
      "file" : "/var/tmp/arv_SdTz84/Qt-0.96.0/qtgui/examples/xml/saxbookmarks/XbelGenerator.pm",
      "package" : "XbelGenerator"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub exportAsVCard\n{\n    my $name = this->{nameLine}->text();\n    my $address = this->{addressText}->toPlainText();\n    my $firstName;\n    my $lastName;\n    my @nameList;\n\n    if ($name =~ m/ /) {\n        @nameList = split m/\\s+/, $name;\n        $firstName = $nameList[0];\n        $lastName = $nameList[-1];\n    } else {\n        $firstName = $name;\n        $lastName = '';\n    }\n\n    my $fileName = Qt::FileDialog::getSaveFileName(this,\n        this->tr('Export Contact'), '',\n        this->tr('vCard Files (*.vcf);;All Files (*)'));\n        \n    if (!$fileName) {\n        return;\n    }\n\n    my $file = Qt::File($fileName);\n    \n    if (!$file->open(Qt::IODevice::WriteOnly())) {\n        Qt::MessageBox::information(this, this->tr('Unable to open file'),\n            $file->errorString());\n        return;\n    }\n\n    my $out = Qt::TextStream($file);\n\n    no warnings qw(void);\n    $out << \"BEGIN:VCARD\\n\"\n",
      "file" : "/var/tmp/arv_SdTz84/Qt-0.96.0/qtgui/examples/tutorial/addressbook/part7/AddressBook.pm",
      "package" : "AddressBook"
   },
   {
      "PPI" : "PPI::Statement::Include",
      "bad" : "use overload\n    '==' => \\&op_equality",
      "file" : "/var/tmp/arv_SdTz84/Qt-0.96.0/qtcore/lib/QtCore4.pm",
      "package" : "Qt::base"
   }
]
