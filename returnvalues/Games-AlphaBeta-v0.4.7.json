[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub apply ($) {\n    my ($self, $move) = @_;\n\n    my $me      = $self->{player};\n    my $not_me  = 3 - $self->{player};\n\n    unless ($move) {\n        $self->{player} = $not_me;\n        return $self;\n    }\n\n    my $size    = $self->{size};\n    my $b       = $self->{board};\n    my ($x, $y) = @$move;\n\n    my ($tx, $ty, $flipped);\n\n    if ($x < 0 || $x >= $size || $y < 0 || $y >= $size) {\n        return undef;\n    }\n    elsif ($b->[$x][$y]) {\n        return undef;\n    }\n\n    for ($tx = $x - 1; $tx >= 0 && $b->[$tx][$y] == $not_me; $tx--) {\n        ;\n    }\n    if ($tx >= 0 && $tx != $x - 1 && $b->[$tx][$y] == $me) {\n        $tx = $x - 1;\n        while ($tx >= 0 && $b->[$tx][$y] == $not_me) {\n            $b->[$tx][$y] = $me;\n            $tx--;\n        }\n        $flipped++;\n    }\n\n    for ($tx = $x + 1; $tx < $size && $b->[$tx][$y] == $not_me; $tx++) {\n        ;\n    }\n    if ($tx < $size && $tx != $x + 1 && $b->[$tx][$y] == $me) {\n        $tx = $x + 1;\n        while ($tx < $size && $b->[$tx][$y] == $not_me) {\n            $b->[$tx][$y] = $me;\n            $tx++;\n        }\n        $flipped++;\n    }\n\n    for ($ty = $y - 1; $ty >= 0 && $b->[$x][$ty] == $not_me; $ty--) {\n        ;\n    }\n    if ($ty >= 0 && $ty != $y - 1 && $b->[$x][$ty] == $me) {\n        $ty = $y - 1;\n        while ($ty >= 0 && $b->[$x][$ty] == $not_me) {\n            $b->[$x][$ty] = $me;\n            $ty--;\n        }\n        $flipped++;\n    }\n    \n    for ($ty = $y + 1; $ty < $size && $b->[$x][$ty] == $not_me; $ty++) {\n        ;\n    }\n    if ($ty < $size && $ty != $y + 1 && $b->[$x][$ty] == $me) {\n        $ty = $y + 1;\n        while ($ty < $size && $b->[$x][$ty] == $not_me) {\n            $b->[$x][$ty] = $me;\n            $ty++;\n        }\n        $flipped++;\n    }\n    \n    $tx = $x - 1;\n    $ty = $y - 1; \n    while ($tx >= 0 && $ty >= 0 && $b->[$tx][$ty] == $not_me) {\n        $tx--;\n        $ty--;\n    }\n    if ($tx >= 0 && $ty >= 0 && $tx != $x - 1 && $ty != $y - 1 && \n            $b->[$tx][$ty] == $me) {\n        $tx = $x - 1;\n        $ty = $y - 1;\n        while ($tx >= 0 && $ty >= 0 && $b->[$tx][$ty] == $not_me) {\n            $b->[$tx][$ty] = $me;\n            $tx--; \n            $ty--;\n        }\n        $flipped++;\n    }\n\n    $tx = $x - 1;\n    $ty = $y + 1; \n    while ($tx >= 0 && $ty < $size && $b->[$tx][$ty] == $not_me) {\n        $tx--;\n        $ty++;\n    }\n    if ($tx >= 0 && $ty < $size && $tx != $x - 1 && $ty != $y + 1 && \n            $b->[$tx][$ty] == $me) {\n        $tx = $x - 1;\n        $ty = $y + 1;\n        while ($tx >= 0 && $ty < $size && $b->[$tx][$ty] == $not_me) {\n            $b->[$tx][$ty] = $me;\n            $tx--;\n            $ty++;\n        }\n        $flipped++;\n    }\n    \n    $tx = $x + 1;\n    $ty = $y + 1; \n    while ($tx < $size && $ty < $size && $b->[$tx][$ty] == $not_me) {\n        $tx++;\n        $ty++;\n    }\n    if ($tx < $size && $ty < $size && $tx != $x + 1 && $ty != $y + 1 && \n            $b->[$tx][$ty] == $me) {\n        $tx = $x + 1;\n        $ty = $y + 1;\n        while ($tx < $size && $ty < $size && $b->[$tx][$ty] == $not_me) {\n            $b->[$tx][$ty] = $me;\n            $tx++;\n            $ty++;\n        }\n        $flipped++;\n    }\n\n    $tx = $x + 1;\n    $ty = $y - 1;\n    while ($tx < $size && $ty >= 0 && $b->[$tx][$ty] == $not_me) {\n        $tx++;\n        $ty--;\n    }\n    if ($tx < $size && $ty >= 0 && $tx != $x + 1 && $ty != $y - 1 && \n            $b->[$tx][$ty] == $me) {\n        $tx = $x + 1;\n        $ty = $y - 1;\n        while ($tx < $size && $ty >= 0 && $b->[$tx][$ty] == $not_me) {\n            $b->[$tx][$ty] = $me;\n            $tx++;\n            $ty--;\n        }\n        $flipped++;\n    }\n\n    unless ($flipped) {\n        return undef;\n    }\n\n    $b->[$x][$y] = $me;\n    $self->{player} = $not_me;\n\n    return $self;\n}",
      "file" : "/var/tmp/arv_qitI6L/Games-AlphaBeta-v0.4.7/lib/Games/AlphaBeta/Reversi.pm",
      "package" : "Games::AlphaBeta::Reversi"
   }
]
