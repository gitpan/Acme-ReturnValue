[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub test_cookie {\n  my ($self,$cookie)=@_;\n  $self->{\"test-cookie\"}=$cookie if $cookie;\n  return $self->{\"test-cookie\"};\n}",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link.pm",
      "package" : "WWW::Link"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "$VERSION = sprintf ( \"%d.%02d\", $REVISION =~ /(\\d+).(\\d+)/ )",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link/Change.pm",
      "package" : "WWW::Link::Change"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "merge ($$) {\n  my ($first, $second) = @_;\n\n  croak \"link urls must be identical for merge\" \n    unless $first->{\"url\"} eq $second->{\"url\"};\n\n  my $result=new WWW::Link $first->{\"url\"};\n\n  ($first->{\"last_refresh\"} > $second->{\"last_refresh\"} \n  && $result->{\"last_refresh\"} > $first->{\"last_refresh\"} );\n\n\n  die \"not implemented\"\n\n  return $result\n  \n}",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link/Merge.pm",
      "package" : "pm"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "new {\n  my $class = shift;\n  my $self = bless {}, $class;\n  my $self->{\"translations\"}=[];\n}\n\nadd_translation ($) {\n}\n\n\npackage WWW::Link::Repair::Mapper::Translation;\n\n\nsub new ($$@) {\n  my $class=shift;\n  my $self = bless {}, $class;\n  my $self->{\"regexp\"}=shift;\n}\n\n",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link/Repair/ResourceMapper.pm",
      "package" : "WWW::Link::Repair::Mapper"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub correct_form {\n  my $self=shift;\n  my $action=shift;\n  my $orig_url=shift;\n  croak \"correct_form called without original url\\n\" unless defined $orig_url;\n  my $array=shift;\n\n  $self->FORM(METHOD=>\"POST\", ACTION=>$action);\n  $self->INPUT(NAME=>\"orig-url\", VALUE=>$orig_url, TYPE=>\"HIDDEN\");\n  $self->nl->t(\"Set new end point for link.\")->nl->UL;\n  if ($array) {\n    foreach (@$array) {\n      $self -> LI\n\t    -> INPUT(TYPE=>\"radio\", NAME=>\"canned-suggestion\", VALUE=>$_)\n\t    -> Link($_)\n\t    -> _LI ->nl;\n    }\n    $self -> LI\n          -> INPUT(TYPE=>\"radio\", NAME=>\"canned-suggestion\", VALUE=>\"user\")\n\t  -> t(\"set new url below\")\n\t  -> _LI ->nl;\n  }\n  $self -> LI\n        ->INPUT(TYPE=>\"text\", NAME=>\"user_suggestion\")\n        ->INPUT(TYPE=>\"submit\", NAME=>\"Repair Link\")\n        -> _LI;\n  $self->_UL\n       ->_FORM;\n  return $self;\n}",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link/Reporter/RepairForm.pm",
      "package" : "WWW::Link::Reporter::RepairForm"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub page_list {\n  my $self=shift;\n  my @worklist=();\n  my @unresolve=();\n  my $url_to_file=$self->{\"url_to_file\"};\n  foreach my $url (@_) {\n    my $file = &$url_to_file($url);\n    if ($file) {\n      push @worklist, quotemeta ($file);\n    } else {\n      push @unresolve,  $url;\n    }\n  }\n  if ( @worklist ) {\n    my $workfile=join ' ', @worklist;\n    print `ls -l $workfile`;\n  }\n  print 'unresolved:-  ', join (\"\\nunresolved:-  \", @unresolve), \"\\n\"\n    if @unresolve;\n}",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link/Reporter/LongList.pm",
      "package" : "WWW::Link::Reporter::LongList"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub Link {\n  my $self=shift;\n  my $url=shift;\n  $self -> A(HREF=>$url)\n\t-> t($url)\n\t-> _A  ;\n  return $self;\n}",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link/Reporter/HTML.pm",
      "package" : "WWW::Link::Reporter::HTML"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub filename {\n  my $self=shift;\n  my $name=shift;\n  $self->{filename}=$name if defined $name;\n  return $self->{filename} if defined $self->{filename};\n  return $ARGV if defined $ARGV;\n  return \"unknown file\";\n}",
      "file" : "/var/tmp/arv_YntYgJ/WWW-Link-0.036/lib/WWW/Link/Reporter/Compile.pm",
      "package" : "WWW::Link::Reporter::Compile"
   }
]
