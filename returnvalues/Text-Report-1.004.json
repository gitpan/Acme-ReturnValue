[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub AUTOLOAD\n{\n   my $self = shift;\n   my %profile;\n   \n   my $type = shift;\n   \n   if($type){$profile{$type} = 1;}\n   \n   my %this = @_;\n   \n   return if $AUTOLOAD =~ /::DESTROY$/;\n   \n   my $meth = $AUTOLOAD; $meth =~ s/.*://; \n   \n   unless($meth =~ /^profile/){$self->_debug(3, \"Bad method - $meth\"); return(undef);}\n   \n   unless($Text::Report::stor_loaded)\n   {\n      $self->_debug(3, 'Cannot load module Storable; In order to use '.\n            '\"NamedPages\", Storable.pm must be installed & in @INC');\n      return(undef);\n   }\n   \n   unless(defined $this{path}){$this{path} = '/tmp';}\n   \n   $this{path} =~ s|^(.*)/$|$1|;\n   \n   \n   unless(-e $this{path})\n   {\n      $self->_debug(3, \"Cannot access profile storage area\\; Path \".\n            \"($this{path}) does not exist\");\n      return(undef);\n   }\n   \n   \n   my $tmp = \"$this{path}/stor.test.\".int(time);\n   \n   unless(open F, \"+>$tmp\")\n   {\n      $self->_debug(3, \"Insufficient file creation rights in profile \".\n            \"storage area - Path ($this{path})\");\n      return(undef);\n   }\n   \n   $self->_debug(1, \"Created tmp file $tmp\");\n   \n   close F;\n   \n   my @ret = grep{unlink} $tmp;\n   \n   $self->_debug(1, \"Removed tmp file(s)\".join(', ', @ret));\n   \n   \n   if($this{name})\n   {\n      while($this{name} =~ s/\\s+//g){};\n      \n      unless($this{name} =~ /^\\w+$/ && $this{name} !~ /^$/)\n      {\n         $self->_debug(3, \"No empty strings or special chars allowed in profile \".\n               \"name($this{name})\\; Create a name that conforms to UNIX file \".\n               \"naming standards\");\n         return(undef);\n      }\n   }\n   else\n   {\n      $self->_debug(2, \"No profile name passed as \\$obj->profile(\\'load\\', name => \".\n            \"\\'myname\\')\\; Assigning default profile name \\'default\\'\");\n      \n      $this{name} = 'default';\n   }\n   \n   if($profile{load})\n   {\n      my $msg = \"Cannot load stored profile ($this{name})\";\n      \n      my $temp;\n      \n      eval{$temp->{_block} = retrieve(\"$this{path}/stor.rpt\\.$this{name}\\.\\_block\");};\n      \n      $self->_debug(4, \"$msg\\; $@\"), return undef if $@;\n      \n      eval{$temp->{_page} = retrieve(\"$this{path}/stor.rpt\\.$this{name}\\.\\_page\");};\n      \n      $self->_debug(4, \"$msg\\; $@\"), return undef if $@;\n      \n      eval{$temp->{_order} = retrieve(\"$this{path}/stor.rpt\\.$this{name}\\.\\_order\");};\n      \n      $self->_debug(4, \"$msg\\; $@\"), return undef if $@;\n      \n      $self->{_block} = $temp->{_block};\n      $self->{_page} =  $temp->{_page};\n      $self->{_order} =  $temp->{_order};\n      \n      return(1);\n   }\n   if($profile{save})\n   {\n      my $temp;\n      \n      $temp->{_block} = dclone($self->{_block});\n      \n      for(keys %{$temp->{_block}{_profile}})\n      {\n         delete $temp->{_block}{_profile}{$_}{data} unless /^\\_/; \n         delete $temp->{_block}{_profile}{$_}{_csv};\n      }\n      \n      store($temp->{_block}, \"$this{path}/stor.rpt\\.$this{name}\\.\\_block\");\n      store($self->{_page}, \"$this{path}/stor.rpt\\.$this{name}\\.\\_page\");\n      store($self->{_order}, \"$this{path}/stor.rpt\\.$this{name}\\.\\_order\");\n      \n      return(1);\n   }\n   \n   return(undef);\n}",
      "file" : "/var/tmp/arv_XIfvb8/Text-Report-1.004/lib/Text/Report.pm",
      "package" : "Text::Report"
   }
]
