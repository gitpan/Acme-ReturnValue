[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "role BPM::Engine::Handler::ProcessDefinitionHandler {\n\n  use BPM::Engine::Types qw/Exception LibXMLDoc UUID/;\n  use BPM::Engine::Exceptions qw/throw_engine throw_model throw_store/;\n\n  method get_packages (@args) {\n\n      return $self->schema->resultset('Package')->search_rs(@args);\n      }\n\n  method get_package (UUID|HashRef $id, HashRef $args = {}) {\n\n      my $pid = ref($id) ? $id : { package_id => $id };\n\n      return $self->schema->resultset('Package')->find($pid, $args)\n          || do {\n            my $pack = $pid->{package_id} || $pid->{package_uid} || '';\n            my $error = \"Package $pack not found\";\n            $self->logger->error($error);\n            throw_store(error => $error);\n            };\n      }  \n  \n  method create_package (Str|ScalarRef|LibXMLDoc $args) {\n\n      my $package = eval {\n          $self->schema->resultset('Package')->create_from_xpdl($args);\n          };\n      if(my $err = $@) {\n          $self->error($err);\n          is_Exception($err) ? $err->rethrow() : throw_model(error => $err);\n          }\n\n      return $package;\n      }\n\n  method delete_package (UUID|HashRef $id) {\n\n      my $package = $self->schema->resultset('Package')->find($id)\n          or do {\n            $id = $id->{package_id} || $id->{package_uid} || '' if (ref($id));\n            $self->error(\"Package '$id' not found\");\n            throw_store(error => \"Package '$id' not found\")\n            };\n\n      return $package->delete;\n      }\n\n  method get_process_definitions (@args) {\n\n      return $self->schema->resultset('Process')->search_rs(@args);\n      }\n\n  method get_process_definition (UUID|HashRef $id, HashRef $args = {}) {\n\n      my $pid = ref($id) ? $id : { process_id => $id };\n\n      return $self->schema->resultset('Process')->find($pid, $args)\n          || do {\n            my $proc = $pid->{process_id} || $pid->{process_uid} || '';\n            my $error = \"Process $proc not found\";\n            $self->logger->error($error);\n            throw_store(error => $error);\n            };\n      }\n\n}\n\n1",
      "file" : "/var/tmp/arv_gzs7CG/BPM-Engine-0.01/lib/BPM/Engine/Handler/ProcessDefinitionHandler.pm",
      "package" : "BPM::Engine::Handler::ProcessDefinitionHandler"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "role BPM::Engine::Handler::ProcessInstanceHandler {\n\n  use Scalar::Util qw/blessed/;\n  use BPM::Engine::Types qw/UUID/;  \n  use BPM::Engine::Exceptions qw/throw_store throw_abstract/;\n  use aliased 'BPM::Engine::Store::Result::Process';\n  use aliased 'BPM::Engine::Store::Result::ProcessInstance';\n\n  requires 'runner';\n  requires 'get_process_definition';\n\n  method create_process_instance (UUID|Process $process, HashRef $args = {}) {\n\n      $process =\n        $self->get_process_definition($process, { prefetch => 'package' })\n        unless blessed($process);\n\n      return $process->new_instance($args);\n      }\n\n  method get_process_instances (@args) {\n\n      return $self->schema->resultset('ProcessInstance')->search_rs(@args);\n      }\n\n  method get_process_instance (Int|HashRef $id, HashRef $args = {}) {\n\n      return $self->schema->resultset('ProcessInstance')->find($id, $args)\n          || throw_store(error => \"Process instance '$id' not found\");\n      }\n\n  method start_process_instance (Int|ProcessInstance $pi, HashRef $args = {}) {\n\n      $pi = $self->get_process_instance($pi) unless(blessed $pi);\n      foreach (keys %{$args}) {\n          $pi->attribute($_ => $args->{$_});\n          }\n\n      my $runner = $self->runner($pi);\n      $runner->start_process();\n      \n      return;\n      }\n\n  method delete_process_instance (Int|HashRef|ProcessInstance $pi) {\n\n      $pi = $self->get_process_instance($pi) unless(blessed $pi);\n      return $pi->delete;\n      }\n\n  method process_instance_attribute \n      (Int|HashRef|ProcessInstance $pi, Str $attr, Str $value?) {\n\n      $pi = $self->get_process_instance($pi) unless(blessed $pi);\n      return defined($value) ?\n          $pi->attribute($attr => $value ) :\n          $pi->attribute($attr);\n      }\n\n  method change_process_instance_state (Int|ProcessInstance $pi, Str $state) {\n\n      $pi = $self->get_process_instance($pi) unless(blessed $pi);\n      $pi->apply_transition($state);\n      }\n\n  method terminate_process_instance (Int|ProcessInstance $pi) {\n\n      $pi = $self->get_process_instance($pi) unless(blessed $pi);\n      throw_abstract(error => 'Method not implemented');\n      }\n\n  method abort_process_instance (Int|ProcessInstance $pi) {\n\n      $pi = $self->get_process_instance($pi) unless(blessed $pi);\n      throw_abstract(error => 'Method not implemented');\n      }\n\n}\n\n1",
      "file" : "/var/tmp/arv_gzs7CG/BPM-Engine-0.01/lib/BPM/Engine/Handler/ProcessInstanceHandler.pm",
      "package" : "BPM::Engine::Handler::ProcessInstanceHandler"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "role BPM::Engine::Handler::ActivityInstanceHandler {\n\n  requires 'runner';\n\n  use Scalar::Util qw/blessed/;\n  use BPM::Engine::Exceptions qw/throw_store/;\n  use aliased 'BPM::Engine::Store::Result::ActivityInstance';\n\n  method get_activity_instances (@args) {\n\n      return $self->schema->resultset('ActivityInstance')->search_rs(@args);\n      }\n\n  method get_activity_instance (Int|HashRef $id, HashRef $args = {}) {\n\n      return $self->schema->resultset('ActivityInstance')->find($id, $args)\n          || throw_store(error => \"ActivityInstance '$id' not found\");\n      }\n\n  method change_activity_instance_state \n      (Int|HashRef|ActivityInstance $ai, Str $state) {\n\n      $ai = $self->get_activity_instance(\n          $ai, { prefetch => ['process_instance', 'activity'] }\n          ) unless(blessed $ai);\n\n      if ($state eq 'assign' || $state eq 'finish') {\n          my $activity         = $ai->activity;\n          my $process_instance = $ai->process_instance;\n          my $runner           = $self->runner($process_instance);\n          if($state eq 'assign') {\n              $runner->start_activity($activity, $ai, 1);\n              }\n          elsif($state eq 'finish') {\n              $runner->complete_activity($activity, $ai, 1);\n              }\n          }\n      else {\n          $ai->apply_transition($state);\n          }\n\n      return $ai;\n      }\n\n  method activity_instance_attribute (Int|ActivityInstance $ai, @args) {\n\n      $ai = $self->get_activity_instance($ai) unless(blessed $ai);\n      return $ai->attribute(@args);\n      }\n\n}\n\n1",
      "file" : "/var/tmp/arv_gzs7CG/BPM-Engine-0.01/lib/BPM/Engine/Handler/ActivityInstanceHandler.pm",
      "package" : "BPM::Engine::Handler::ActivityInstanceHandler"
   }
]
