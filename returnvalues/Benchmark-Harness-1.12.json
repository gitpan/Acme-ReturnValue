[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "DESTROY {\n  $_[0]->close();\n}\n\nsub FindHandler {\n    my ($self, $pckg, $subName) = @_;\n    for ( @{$self->{EventList}} ) {\n        if ( $_->[HNDLR_NAME] eq $subName\n          && $_->[HNDLR_PACKAGE] eq $pckg\n        ) {\n            return $_;\n        }\n    }\n    return undef;\n}\n\nsub harnessPrintReport {\n    my $self = ref($_[0])?shift:$Benchmark::Harness::Harness;\n    return unless ref($self);\n    my ($mode,$trace) = @_;\n\n    my $rpt = $self->{report};\n    return unless $rpt;\n\n    my $fh = $self->{_outFH};\n    return unless $fh;\n\n    print $fh '<'.(defined($rpt->[0])?$rpt->[0]:'T').\" _i='$trace->{id}' _m='$mode'\";\n    my $closeTag = '/>';\n\n    my $hsh = $rpt->[1];\n    map { print $fh \" $_='$hsh->{$_}'\" } keys %$hsh;\n\n    if ( defined $rpt->[2] ) {\n        print $fh '>'; $closeTag = '</'.(defined($rpt->[0])?$rpt->[0]:'T').'>';\n        for ( @{$rpt->[2]} ) {\n\n        }\n    }\n\n    if ( defined $rpt->[3] ) {\n        print $fh '>'; $closeTag = '</'.(defined($rpt->[0])?$rpt->[0]:'T').'>';\n        print $fh $rpt->[3];\n    }\n\n    print $fh $closeTag;\n    $self->{report} = undef;\n}\n\nsub xmlHeaders {\n  my $pckg = ref($_[0]);\n  $pckg =~ s{Benchmark\\:\\:Harness\\:\\:}{};\n  $pckg =~ s{::}{/}g;\n  my $hdr .= \" xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\";\n  $hdr .= \" xsi:noNamespaceSchemaLocation='http://schemas.benchmark-harness.org/$pckg.xsd'\";\n  return $hdr;\n}\n\nsub Initialize { \n    my $self = shift;\n\n    for ( @_ ) {\n        m/^0?$/ && do { return $self; }; \n        m/^\\|\\d/ && do {\n                $self->{_isHotpipe} = 1;\n                $_ =~ s/^\\|//;\n            }; \n        m/^\\d+$/ && do {\n                $self->{_outFilename} = (($^O eq 'MSWin32')?$ENV{TEMP}:'/tmp').'/harness.'.$$.'.xml';\n                $self->{_outFH} = new FileHandle(\">$self->{_outFilename}\")\n                        or die \"Can't open Harness file '$self->{_outFilename}': $!\";\n                $self->{_isTemp} = 1;\n                $self->{_outFH}->autoflush(1) if ( $self->{_isHotpipe} );;\n                next;\n            };\n        m/^\\|./ && do {\n                $self->{_isHotpipe} = 1;\n                $_ =~ s/^\\|//;\n            }; \n        m/^./ && do {\n                $self->{_outFilename} = $_;\n                $self->{_outFH} = new FileHandle(\">$self->{_outFilename}\")\n                       or die \"Can't open Harness file '$self->{_outFilename}': $!\";\n                $self->{_isTemp} = 0;\n                $self->{_outFH}->autoflush(1) if ( $self->{_isHotpipe} );;\n                next;\n            };\n        }\n    return $self;\n}\n\nsub GenerateEvents {\n    my $self = shift;\n    $self->{EventList} = [];\n    my $handler = ref($self); $handler =~ s{(\\:\\:[\\w\\d]+)$}{::Handler$1};\n\n    for ( @_ ) {\n        my ($modifiers, $pckg, $method) = (m/^(?:\\(([^)]*)\\))?(.*)::([^:]+)$/);\n        eval \"require $pckg\"; die $@ if $@;\n        if ( $method !~ m/[\\.\\?\\*\\[\\(]/ ) {\n            $handler->new($self, $modifiers, $pckg, $method);\n        } else {\n            no strict;\n            local *stash;\n            *stash = *{ \"${pckg}::\" };\n            local $rgx = qr($method);\n            for (keys %stash)\n            {\n                my $glob = Devel::Peek::CvGV(\\&{$stash{$_}});\n                $handler->new($self, $modifiers, $pckg, $_)\n                    if ( defined &{ $stash{$_} }\n                        and $glob eq \"\\*$pckg\\:\\:$_\"\n                        and m/$rgx/\n                        and !m/(import|export|AUTOLOAD)/ );\n            }\n        }\n    }\n    return 1;\n}\n1",
      "file" : "/var/tmp/arv_Lwascn/Benchmark-Harness-1.12/Harness.pm",
      "package" : "Benchmark::Harness"
   }
]
