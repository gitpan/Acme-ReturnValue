[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "AUTOLOAD {\n    my ($self) = @_;\n\n    my $module = $AUTOLOAD;\n    $module =~ s/.*:://;\n    $module =~ s/=.*//;\n    my $class = \"Pipe::Tube::\" . ucfirst $module;\n    $self->logger(\"AUTOLOAD: '$AUTOLOAD', module: '$module', class: '$class'\");\n    eval \"use $class\";\n    die \"Could not load '$class' $@\\n\" if $@;\n\n    if ($self eq \"Pipe\") {\n        $self = bless {}, \"Pipe\";\n    }\n    $self->logger(\"context: $_: \" . want($_)) for (qw(VOID SCALAR LIST OBJECT));\n\n    $self->logger(\"params: \" . join \"|\", @_);\n    my $obj = $class->new(@_);\n    push @{ $self->{Pipe} }, $obj;\n\n    return $self;\n}\n\nsub run {\n    my ($self) = @_;\n    $self->logger(\"Pipe::run_pipe called\");\n    return if not @{ $self->{Pipe} };\n\n    my $in = shift @{ $self->{Pipe} };\n    my $in_finished = 0;\n    my @results;\n    while (1) {\n        $self->logger(\"Pipe::run_pipe calls in: $in\");\n        my @res = $in->run;\n        $self->logger(\"Pipe::run_pipe resulted in {\" . join(\"|\", @res) . \"}\");\n        if (not @res) {\n            $self->logger(\"Pipe::run_pipe calling finish\");\n            @res = $in->finish();\n            $in_finished = 1;\n        }\n        foreach my $i (0..@{ $self->{Pipe} }-1) {\n            my $call = $self->{Pipe}[$i];\n            $self->logger(\"Pipe::run_pipe calls: $call\");\n            @res = $call->run(@res);\n            $self->logger(\"Pipe::run_pipe results: {\" . join(\"}{\", @res) . \"}\");\n            last if not @res;\n        }\n        push @results, @res;\n        if ($in_finished) {\n            $self->logger(\"IN finished\");\n            $in = shift @{ $self->{Pipe} };\n            last if not defined $in;\n            $in_finished = 0;\n        }\n    }\n    return @results;\n}\n\n\n\n\nDESTROY {\n}\n\n\n\n\n\n\n\n\n\n \n1",
      "file" : "/var/tmp/arv_1kKNSc/Pipe-0.05/lib/Pipe.pm",
      "package" : "Pipe"
   }
]
