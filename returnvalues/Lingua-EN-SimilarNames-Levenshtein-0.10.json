[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "class Person {\n    has 'first_name' => (isa => 'Str', is => 'ro', default => '');\n    has 'last_name'  => (isa => 'Str', is => 'ro', default => '');\n    has 'full_name'  => (\n        isa        => 'Str',\n        is         => 'ro',\n        lazy_build => 1,\n    );\n\n    method say_name() {\n        say $self->full_name;\n      }\n\n      method _build_full_name {\n        return $self->first_name . ' ' . $self->last_name;\n      }\n}\n\n\nclass CompareTwoNames {\n    has 'one_person'     => (isa => 'Person', is => 'rw');\n    has 'another_person' => (isa => 'Person', is => 'rw');\n    has 'distance_between' => (\n        isa        => 'Int',\n        is         => 'ro',\n        lazy_build => 1,\n    );\n\n    method _build_distance_between() {\n        return Text::LevenshteinXS::distance($self->one_person->first_name,\n            $self->another_person->first_name) +\n          Text::LevenshteinXS::distance($self->one_person->last_name,\n            $self->another_person->last_name);\n    };\n}\n\n\nclass SimilarNames {\n    has 'list_of_people' => (\n        isa        => 'ArrayRef[Person]',\n        is         => 'ro',\n        lazy_build => 1\n    );\n    has 'minimum_distance' => (isa => 'Int', is => 'rw', default => 1);\n    has 'maximum_distance' => (isa => 'Int', is => 'rw', default => 3);\n    has 'list_of_people_with_similar_names' => (\n        isa        => 'ArrayRef[ArrayRef[Person]]',\n        is         => 'ro',\n        lazy_build => 1\n    );\n    has 'list_of_similar_name_pairs' => (\n        isa        => 'ArrayRef[ArrayRef[ArrayRef[Str]]]',\n        is         => 'ro',\n        lazy_build => 1\n    );\n\n    method _build_list_of_people_with_similar_names() {\n        my $people_tuples = Math::Combinatorics->new(\n            count => 2,                       \n            data  => $self->list_of_people,\n        );\n          my @list_of_people_with_similar_names;\n          while (my ($first_person, $second_person) = $people_tuples->next_combination()) {\n            my $name_comparison = CompareTwoNames->new(\n                one_person     => $first_person,\n                another_person => $second_person,\n            );\n            my $distance_between_names = $name_comparison->distance_between();\n            if (   ($distance_between_names >= $self->minimum_distance)\n                && ($distance_between_names <= $self->maximum_distance))\n            {\n                push @list_of_people_with_similar_names, [ $first_person, $second_person ];\n            }\n        }\n\n        return \\@list_of_people_with_similar_names\n    };\n\n    method _build_list_of_similar_name_pairs() {\n        my @list_of_similar_name_pairs;\n        foreach my $pair_of_people (@{ $self->list_of_people_with_similar_names }) {\n            push @list_of_similar_name_pairs,\n              [\n                [ $pair_of_people->[0]->first_name, $pair_of_people->[0]->last_name ],\n                [ $pair_of_people->[1]->first_name, $pair_of_people->[1]->last_name ]\n              ];\n        }\n        return \\@list_of_similar_name_pairs\n    };\n}",
      "file" : "/var/tmp/arv_aJ_cV9/Lingua-EN-SimilarNames-Levenshtein-0.10/lib/Lingua/EN/SimilarNames/Levenshtein.pm",
      "package" : "Lingua::EN::SimilarNames::Levenshtein"
   }
]
