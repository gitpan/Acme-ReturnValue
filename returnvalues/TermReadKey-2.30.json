[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub DeducePrototype {\n\n        my (@types, $checkreturn, $checknilargs, $checkniletcargs, $checkreturnnil);\n        \n\tif($firstdeduce) {\n\t\t$firstdeduce=0;\n\t\tmy $checknumber=!Compile(\"extern int func(int a,int b); \n\t\t\t\t\t\t\t\t\t extern int func(int a,int b,int c); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\t$checkreturn=!Compile(\"extern int func(int a,int b); \n\t\t\t\t\t\t\t\t\t extern long func(int a,int b); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\tmy $checketc=   !Compile(\"extern int func(int a,int b); \n\t\t\t\t\t\t\t\t\t extern long func(int a,...); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\tmy $checknumberetc=!Compile(\"extern int func(int a,int b); \n\t\t\t\t\t\t\t\t\t extern int func(int a,int b,...); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\tmy $checketcnumber=!Compile(\"extern int func(int a,int b,int c,...); \n\t\t\t\t\t\t\t\t\t extern int func(int a,int b,...); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\tmy $checkargtypes=!Compile(\"extern int func(int a); \n\t\t\t\t\t\t\t\t\t extern int func(long a); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\tmy $checkargsnil=!Compile(\"extern int func(); \n\t\t\t\t\t\t\t\t\t extern int func(int a,int b,int c); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\t$checknilargs=!Compile(\"extern int func(int a,int b,int c); \n\t\t\t\t\t\t\t\t\t extern int func(); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\tmy $checkargsniletc=!Compile(\"extern int func(...); \n\t\t\t\t\t\t\t\t\t extern int func(int a,int b,int c); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\t\t$checkniletcargs=!Compile(\"extern int func(int a,int b,int c); \n\t\t\t\t\t\t\t\t\t extern int func(...); \n\t\t\t\t\t\t\t\t\t main(){}\");\n\n\t\tmy $checkconst=!Compile(\"extern int func(const int * a);\n\t\t\t\t\t\t\t\t\t\textern int func(int * a);\n\t\t\t\t\t\t\t\t\t\tmain(){ }\");\n\n\t\tmy $checksign=!Compile(\"extern int func(int a);\n\t\t\t\t\t\t\t\t\t\textern int func(unsigned int a);\n\t\t\t\t\t\t\t\t\t\tmain(){ }\");\n\n\t\t$checkreturnnil=!Compile(\"extern func(int a);\n\t\t\t\t\t\t\t\t\t\textern void func(int a);\n\t\t\t\t\t\t\t\t\t\tmain(){ }\");\n\n\t\t@types = sort grep(Compile(\"main(){$_ a;}\"),\n\t\t\t\"void\",\"int\",\"long int\",\"unsigned int\",\"unsigned long int\",\"long long int\",\n\t\t\t\"long long\",\"unsigned long long\",\n\t\t\t\"unsigned long long int\",\"float\",\"long float\",\n\t\t\t\"double\",\"long double\",\n\t\t\t\"char\",\"unsigned char\",\"short int\",\"unsigned short int\");\n\n\t\tif(Compile(\"main(){flurfie a;}\")) { @types = (); }\n\n\t\t$Verbose=0;\n\n                my ( $i, $j );\n\t\tif($checkargtypes) {\n\t\t\tfor ($i=0;$i<=$#types;$i++) {\n\t\t\t\tfor ($j=$i+1;$j<=$#types;$j++) {\n\t\t\t\t\tnext if $j==$i;\n\t\t\t\t\tif(Compile(\"extern void func($types[$i]);\n\t\t\t\t\t\t\t\t\t\t  extern void func($types[$j]); main(){}\")) {\n\t\t\t\t\t\tprint \"Removing type $types[$j] because it equals $types[$i]\\n\";\n\t\t\t\t\t\tsplice(@types,$j,1);\n\t\t\t\t\t\t$j--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} elsif($checkreturn) {\n\t\t\tfor ($i=0;$i<=$#types;$i++) {\n\t\t\t\tfor ($j=$i+1;$j<=$#types;$j++) {\n\t\t\t\t\tnext if $j==$i;\n\t\t\t\t\tif(Compile(\"$types[$i] func(void);\n\t\t\t\t\t\t\t\t\t\t  extern $types[$j] func(void); main(){}\")) {\n\t\t\t\t\t\tprint \"Removing type $types[$j] because it equals $types[$i]\\n\";\n\t\t\t\t\t\tsplice(@types,$j,1);\n\t\t\t\t\t\t$j--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$Verbose=1;\n\n\t\tprint \"Detect differing numbers of arguments: $checknumber\\n\";\n\t\tprint \"Detect differing return types: $checkreturn\\n\";\n\t\tprint \"Detect differing argument types if one is ...: $checketc\\n\";\n\t\tprint \"Detect differing numbers of arguments if ... is involved: $checknumberetc\\n\";\n\t\tprint \"Detect differing numbers of arguments if ... is involved #2: $checketcnumber\\n\";\n\t\tprint \"Detect differing argument types: $checkargtypes\\n\";\n\t\tprint \"Detect differing argument types if first has no defined args: $checkargsnil\\n\";\n\t\tprint \"Detect differing argument types if second has no defined args: $checknilargs\\n\";\n\t\tprint \"Detect differing argument types if first has only ...: $checkargsniletc\\n\";\n\t\tprint \"Detect differing argument types if second has only ...: $checkniletcargs\\n\";\n\t\tprint \"Detect differing argument types by constness: $checkconst\\n\";\n\t\tprint \"Detect differing argument types by signedness: $checksign\\n\";\n\t\tprint \"Detect differing return types if one is not defined: $checkreturnnil\\n\";\n\t\tprint \"Types known: \",join(\",\",@types),\"\\n\";\n\n\t}\n\n\tmy($function,@headers) = @_;\n\t@headers = CheckHSymbol($function,@headers);\n\treturn undef if !@headers;\n\n\tmy $rettype = undef;\n\tmy @args = ();\n\tmy @validcount = ();\n\n\tif($checkreturn and (!$checknilargs or !$checkniletcargs)) {\n\t\tfor (@types) {\n\t\t\tif(ApplyHeaders(\"extern $_ $function(\". ($checknilargs?\"...\":\"\").\");main(){}\",[@headers])) {\n\t\t\t\t$rettype = $_; \n\t\t\t\tlast;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!defined($rettype) and $checkreturnnil) {\n\t\tdie \"No way to deduce function prototype in a rational amount of time\";\n\t}\n\n\tmy $numargs=-1;\n\tmy $varargs=0;\n\tfor (0..32) {\n\t\t\tif(ApplyHeaders(\"main(){ $function(\".join(\",\",(\"0\") x $_).\");}\",@headers)) {\n\t\t\t\t$numargs=$_;\n\t\t\t\tif(ApplyHeaders(\"main(){ $function(\".join(\",\",(\"0\") x ($_+1)).\");}\",@headers)) {\n\t\t\t\t\t$varargs=1;\n\t\t\t\t}\n\t\t\t\tlast\n\t\t\t} \n\t}\n\n\tdie \"Unable to deduce number of arguments\" if $numargs==-1;\n\n\tif($varargs) { $args[$numargs]=\"...\"; }\n\t\n\n\n\tif(@args>0 and !defined($rettype)) {\n\t\tfor (@types) {\n\t\t\tif(defined(ApplyHeaders(\"extern $_ $function(\".join(\",\",@args).\");main(){}\",[@headers]))) {\n\t\t\t\t$rettype = $_; \n\t\t\t\tlast;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprint \"Return type: $rettype\\nArguments: \",join(\",\",@args),\"\\n\";\n\tprint \"Valid number of arguments: $numargs\\n\";\n\tprint \"Accepts variable number of args: $varargs\\n\";\n}",
      "file" : "/var/tmp/arv_vgkMhp/TermReadKey-2.30/Configure.pm",
      "package" : "Configure"
   }
]
