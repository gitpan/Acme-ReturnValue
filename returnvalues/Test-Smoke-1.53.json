[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub mail {\n    my $self = shift;\n\n    eval { require MIME::Lite; };\n\n    $self->{error} = $@ and return undef;\n\n    my $subject = $self->fetch_report();\n    my $cc = $self->_get_cc( $subject );\n\n    my %message = (\n        To      => $self->{to},\n        Subject => $subject,\n        Type    => \"TEXT\",\n        Data    => $self->{body},\n    );\n    $message{Cc}   = $cc  if $cc;\n    $message{Bcc}   = $self->{bcc} if $self->{bcc};\n    $message{From} = $self->{from} if $self->{from};\n\n    MIME::Lite->send( smtp => $self->{mserver}, Debug => ( $self->{v} > 1 ) )\n        if $self->{mserver};\n\n    my $ml_msg = MIME::Lite->new( %message );\n    $ml_msg->attr( 'content-type.charset' => 'UTF8' )\n        if exists $ENV{LANG} && $ENV{LANG} =~ /utf-?8$/i;\n\n    $self->{v} > 1 and print \"[MIME::Lite]\\n\";\n    $self->{v} and print \"Sending report to $self->{to} \";\n\n    $ml_msg->send or $self->{error} = \"Problem sending mail\";\n\n    $self->{v} and print $self->{error} ? \"not OK\\n\" : \"OK\\n\";\n\n    return ! $self->{error};\n}",
      "file" : "/var/tmp/arv_oNMQBQ/Test-Smoke-1.53/lib/Test/Smoke/Mailer.pm",
      "package" : "Test::Smoke::Mailer"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub call_patch {\n    my( $self, $ref_to_content, $switches, $descr ) = @_;\n\n    local *PATCHBIN;\n\n    my $opts = $self->_make_opts( $switches );\n\n    my $redir = $self->{v} ? \"\" : \">\" . File::Spec->devnull . \" 2>&1\";\n\n    my $cwd = cwd();\n    chdir $self->{pdir} or do {\n        require Carp;\n        Carp::croak( \"Cannot chdir($self->{pdir}): $!\" );\n    };\n\n    $self->{v} > 1 and \n        print \"[$self->{pfinfo}] | $self->{patchbin} $opts $redir\\n\";\n\n    if ( open PATCHBIN, \"| $self->{patchbin} $opts $redir\" ) {\n        binmode PATCHBIN;\n        print PATCHBIN $$ref_to_content;\n        close PATCHBIN or do {\n            require Carp;\n            Carp::croak( \"Error while patching from '$self->{pfinfo}': $!\" );\n        };\n    } else {\n        require Carp;\n        Carp::croak( \"Cannot fork ($self->{patchbin}): $!\" );\n    }\n\n    if ( defined $descr ) {\n        require Test::Smoke::Util;\n        Test::Smoke::Util::set_local_patch( $self->{pdir}, $descr );\n    }\n\n    chdir $cwd or do {\n        require Carp;\n        Carp::croak( \"Cannot chdir($cwd) back: $!\" );\n    };\n}",
      "file" : "/var/tmp/arv_oNMQBQ/Test-Smoke-1.53/lib/Test/Smoke/Patcher.pm",
      "package" : "Test::Smoke::Patcher"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub sync {\n    my $self = shift;\n\n    my %args = map { ( $_ => $self->{ $_ } ) } keys %$self;\n    $args{ddir} = $self->{mdir};\n    $self->{v} and print \"Prepare to sync ($self->{fsync}|$args{ddir})\\n\";\n    my $syncer = Test::Smoke::Syncer->new( $self->{fsync}, \\%args );\n    $syncer->sync;\n\n    $args{ddir} = $self->{fdir};\n    $args{hdir} = $self->{mdir};\n    $self->{v} and print \"Prepare to sync (hardlink|$args{ddir})\\n\";\n    $syncer = Test::Smoke::Syncer->new( hardlink => \\%args );\n    $syncer->sync;\n\n    if ( -e File::Spec->catfile( $self->{fdir}, 'regen_headers.pl' ) ) {\n        $self->{v} and print \"Run 'regen_headers.pl' ($self->{fdir})\\n\";\n        my $cwd = Cwd::cwd();\n        chdir $self->{fdir} or do {\n            require Carp;\n            Carp::croak( \"Cannot chdir($self->{fdir}) in forest: $!\" );\n        };\n        system( \"$^X regen_headers.pl\" ) == 0 or do {\n            require Carp;\n            Carp::carp( \"Error while running 'regen_headers.pl'\" );\n        };\n        chdir $cwd or do {\n            require Carp;\n            Carp::croak( \"Cannot chdir($cwd) back: $!\" );\n        };\n    }\n\n    $args{ddir} = $self->{ddir};\n    $args{hdir} = $self->{fdir};\n    $self->{v} and print \"Prepare to sync (hardlink|$args{ddir})\\n\";\n    $syncer = Test::Smoke::Syncer->new( hardlink => \\%args );\n    my $plevel = $syncer->sync;\n\n    return $plevel;\n}",
      "file" : "/var/tmp/arv_oNMQBQ/Test-Smoke-1.53/lib/Test/Smoke/Syncer.pm",
      "package" : "Test::Smoke::Syncer"
   }
]
