[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _isa\n{\n\tmy $val  = shift;\n\tmy $type = shift;\n\tdefined($type) or die 'undefined arg:type';\n\tdefined($val)  or return; \n\tif( defined(ref($val)) )\n\t{\n\t\treturn ref($val) eq $type || (blessed($val) && $val->isa($type));\n\t}else\n\t{\n\t\tlocal($@);\n\t\tlocal($SIG{__DIE__}) = 'DEFAULT';\n\t\tmy $ret = eval { $val->isa($type); };\n\t\t$@ and print STDERR __PACKAGE__.\"._isa: $@\";\n\t\t$ret;\n\t}\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail.pm",
      "package" : "Tripletail"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub flush_all {\n\tmy $this = shift;\n\n\t$this->{memd}->flush_all;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/MemCached.pm",
      "package" : "Tripletail::MemCached"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub getKeys {\n\tmy $this = shift;\n\treturn keys %{ $this->{_filters} };\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Validator.pm",
      "package" : "Tripletail::Validator"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __postRequest {\n\tmy $this = shift;\n\n\twhile(my ($fpath, $lastmod) = each %{$this->{lastmod}}) {\n\t\tmy $current = (stat($fpath))[9];\n\t\tif(!$current) {\n\t\t\tdie __PACKAGE__.\"#postRequest: failed to stat [$fpath]: $! (ファイルをstatできませんでした)\\n\";\n\t\t}\n\n\t\tif($current != $lastmod) {\n\t\t\tmy $time = localtime($current);\n\n\t\t\t$TL->log(\"File Update: file [$fpath] has been updated at [$time]\");\n\t\t\t$TL->_fcgi_restart(1);\n\t\t}\n\t}\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/FileSentinel.pm",
      "package" : "Tripletail::FileSentinel"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _getoptSend {\n\tmy $this = shift;\n\tmy $pkg = ref($this);\n\n\tmy $data = do {\n\t\tmy %hash = @_;\n\t\t%hash = map {\n\t\t\tmy $key = $_;\n\t\t\tmy $val = $hash{$key};\n\n\t\t\t$key =~ s/^-//;\n\t\t\t$key => $val;\n\t\t} keys %hash;\n\t\t\t\\%hash;\n\t};\n\n\tif(!defined($data->{data})) {\n\t\tdie \"$pkg#send: arg[data] is not defined. (dataが指定されていません)\\n\";\n\t}\n\n\tif(!defined($data->{from}) || !defined($data->{rcpt})) {\n\n\t\tlocal *addr = sub {\n\t\t\tmy $str = shift;\n\t\t\tdefined $str or return undef;\n\n\t\t\t$str =~ s/^\\s*|\\s*$//g;\n\n\t\t\tif($str =~ m/<(.+?)>\\s*$/) {\n\t\t\t\t$1;\n\t\t\t} else {\n\t\t\t\t$str;\n\t\t\t}\n\t\t};\n\n\t\tmy $mail = $TL->newMail->set($data->{data});\n\t\t$data->{from} = addr($mail->getHeader('From'));\n\t\t$data->{rcpt} = addr($mail->getHeader('to'));\n\t}\n\n\tif(!defined($data->{from})) {\n\t\tdie \"$pkg#send: arg[from] is undef but the data don't have a valid `From' header. (fromが指定されておらず、dataからも推測できません)\\n\";\n\t}\n\tif(!defined($data->{rcpt})) {\n\t\tdie \"$pkg#send: arg[rcpt] is undef but the data don't have a valid `To' header. (rcptが指定されておらず、dataからも推測できません)\\n\";\n\t}\n\n\tif(ref($data->{rcpt}) ne 'ARRAY') {\n\t\t$data->{rcpt} = [ $data->{rcpt} ];\n\t}\n\n\t$data;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Sendmail.pm",
      "package" : "Tripletail::Sendmail"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __makeSetCookie {\n    my Tripletail::RawCookie $this = shift;\n    my @result;\n\n    while (my ($key, $value) = each %{$this->{setCookies}}) {\n        my @parts;\n        push @parts, sprintf('%s=%s', $key, defined $value ? $value : '');\n\n        if (defined $value) {\n            if (defined $this->{expires}) {\n                push @parts,\n                  'expires='.$this->__cookieTime(\n                                 time + $TL->parsePeriod($this->{expires}));\n            }\n        }\n        else {\n            push @parts, \"expires=\".$this->__cookieTime(0);\n        }\n\n        if (defined $this->{path}) {\n            push @parts, \"path=$this->{path}\";\n        }\n        if (defined $this->{domain}) {\n            push @parts, \"domain=$this->{domain}\";\n        }\n        if ($this->{secure}) {\n            push @parts, 'secure';\n        }\n        if ($this->{httpOnly}) {\n            push @parts, 'httponly';\n        }\n\n        my $line = join '; ', @parts;\n        if (length($line) > 1024 * 4) {\n            die __PACKAGE__.\"#_makeSetCookies: the cookie became too large. \".\n              \"Decrease its content. [$line] (クッキーが大きくなりすぎました。\".\n                \"保存するデータを減らしてください)\";\n        }\n\n        push @result, $line;\n    }\n\n    @result;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/RawCookie.pm",
      "package" : "Tripletail::RawCookie"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub tagbreak {\n\tmy $this = shift;\n\n\tif(@_) {\n\t\t$this->{tagbreak} = shift;\n\t}\n\n\t$this->{tagbreak};\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/TagCheck.pm",
      "package" : "Tripletail::TagCheck"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __fillHeader {\n\tmy $this = shift;\n\n\tmy $h = $this->{entity}->head;\n\tif(!($h->count('Date'))) {\n\t\t$h->add(Date => $this->_makeMailDate(time));\n\t}\n\tif(!$h->count('Message-Id')) {\n\t\t$h->add(\n\t\t\t'Message-Id' => sprintf(\n\t\t\t\t'<%d.%d.%d.tmmlib7@%s>',\n\t\t\t\t$MAIL_ID_COUNT++,\n\t\t\t\ttime,\n\t\t\t\t$$,\n\t\t\t\t$this->_getHostname\n\t\t\t)\n\t\t);\n\t}\n\tif(!$h->count('MIME-Version')) {\n\t\t$h->add('MIME-Version' => '1.0');\n\t}\n\tif(!$h->count('Content-Type')) {\n\t\t$h->mime_attr('Content-Type' => 'text/plain');\n\t\t$h->mime_attr('Content-Type.charset' => 'ISO-2022-JP');\n\t}\n\tif(!$h->count('Content-Transfer-Encoding')) {\n\t\t$h->add('Content-Transfer-Encoding' => '7bit');\n\t}\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Mail.pm",
      "package" : "Tripletail::Mail"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __load_default_error_template\n{\n\t<<'END';\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Error.pm",
      "package" : "Tripletail::Error"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __postRequest {\n\n\n\tforeach my $db (values %INSTANCES) {\n\t\tif(my $dbh = $db->{locked_dbh}) {\n\t\t\t$db->unlock;\n\n\t\t\tmy $setname = $dbh->getSetName;\n\t\t\t$TL->log(\n\t\t\t\t__PACKAGE__,\n\t\t\t\t\"DB [$db->{group}] (DB Set [$setname]) has been left locked after the last request.\".\n\t\t\t\t\" Tripletail::DB automatically unlocked it for safety.\".\n\t\t\t\t\" (DB [$db->{group}] (DB Set [$setname]) はロックしたままリクエスト処理を終えました。安全のため自動的にunlockしました)\"\n\t\t\t);\n\t\t}\n\t\tif(my $dbh = $db->{trans_dbh}) {\n\t\t\t$db->rollback;\n\n\t\t\tmy $setname = $dbh->getSetName;\n\t\t\t$TL->log(\n\t\t\t\t__PACKAGE__,\n\t\t\t\t\"DB [$db->{group}] (DB Set [$setname]) has been left in transaction after the last request.\".\n\t\t\t\t\" Tripletail::DB automatically rollbacked it for safety.\".\n\t\t\t\t\" (DB [$db->{group}] (DB Set [$setname]) はトランザクション中のままリクエスト処理を終えました。安全のため自動的にrollbackしました)\"\n\t\t\t);\n\t\t}\n\n\t\t$db->setDefaultSet($TL->INI->get($db->{group} => defaultset => undef));\n\t}\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/DB.pm",
      "package" : "Tripletail::DB"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __getGregorian {\n\tmy $this = shift;\n\tmy $tz = shift || $this->{tz};\n\n\tlocal($_);\n\n\tif($_ = $this->{greg_cache}) {\n\t\treturn $_;\n\t}\n\n\tmy $greg = $this->{greg_cache} = {};\n\n\tmy $jd = $this->{jd} + 0.5 + $tz / 86400;\n\t$greg->{wday} = int($jd + 1) % 7;\n\n\tmy $z = int($jd);\n\tmy $f = $jd - $z;\n\tmy $aa= int(($z - 1867216.25) / 36524.25);\n\tmy $a = int($z + 1 + $aa - int($aa / 4));\n\tmy $b = $a + 1524;\n\tmy $c = int(($b - 122.1) / 365.25);\n\tmy $k = int(365.25 * $c);\n\tmy $e = int(($b - $k) / 30.6001);\n\n\t$greg->{day} = int($b - $k - int(30.6001 * $e));\n\n\tif($e < 13.5) {\n\t\t$greg->{mon} = $e - 1;\n\t} else {\n\t\t$greg->{mon} = $e - 13;\n\t}\n\n\tif($greg->{mon} > 2.5) {\n\t\t$greg->{year} = $c - 4716;\n\t} else {\n\t\t$greg->{year} = $c - 4715;\n\t}\n\n\t$greg->{hour} = $f * 24;\n\t$greg->{hour} = int($greg->{hour});\n\t$greg->{min} = ($f * 24 - $greg->{hour}) * 60;\n\t$greg->{min} = int($greg->{min});\n\t$greg->{sec} = ($f * 24 * 60 - $greg->{hour} * 60 - $greg->{min}) * 60;\n\t$greg->{sec} = int($greg->{sec} + ($greg->{sec} >= 0 ? 0.5 : -0.5));\n\n\tif($greg->{sec} == 60) {\n\t\t$greg->{sec} = 0;\n\t\t$greg->{min}++;\n\t}\n\tif($greg->{min} == 60) {\n\t\t$greg->{min} = 0;\n\t\t$greg->{hour}++;\n\t}\n\n\t$greg->{tz} = $tz;\n\t$greg;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/DateTime.pm",
      "package" : "Tripletail::DateTime"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _getHTTP {\n\tmy $this = shift;\n\tmy $url = shift;\n\n\tmy $ua = new LWP::UserAgent;\n\t$ua->timeout($this->{timeout});\n\t$ua->agent('TripleTail/1.0' . ' ' . $ua->agent);\n\tif(defined($this->{proxy})) {\n\t\t$ua->proxy(\"http://$this->{proxy}/\");\n\t}\n\n\tmy $req = new HTTP::Request GET => $url;\n\n\tmy $res = $ua->request($req);\n\n\tmy $status = $res->status_line;\n\t$this->_event(\"(Status:$status)．．．\\n\");\n\n\tif(!$res->is_success) {\n\t\tdie \"ダウンロードに失敗しました．<br>\\nURL: $url<br>Status: $status<br>\\n\";\n\t}\n\n\t$res;\n\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/HtmlMail.pm",
      "package" : "Tripletail::HtmlMail"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _urlDecodeString {\n\tmy $this = shift;\n\tmy $str = shift;\n\n\t$str =~ tr/+/ /;\n\t$str =~ s{\\%([0-9a-fA-F][0-9a-fA-F])|\\%u([0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])}{\n\t\tdefined($1) ? pack(\"C\", hex($1)) : pack(\"n\", hex($2));\n\t}eg;\n\t$str =~ s/\\r\\n/\\n/g; \n\t$str =~ s/\\r/\\n/g; \n\n\t$str;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/InputFilter.pm",
      "package" : "Tripletail::InputFilter"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _makeSetCookies {\n    return map { $_->__makeSetCookie } values %_INSTANCES;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Cookie.pm",
      "package" : "Tripletail::Cookie"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __postRequest {\n\tmy $this = shift;\n\n\tif(!defined($this->{initial})) {\n\t\t$this->{initial} = $this->getMemorySize;\n\t}\n\n\tmy $initial = $this->{initial};\n\tmy $current = $this->getMemorySize;\n\tmy $allowed = $this->getTotalPermissibleSize;\n\tmy $filecache = $TL->_filecacheMemorySize;\n\tmy $remaining = $initial + $filecache + $allowed - $current;\n\n\tmy $mem_usage = sprintf(\n\t\t\"Memory Usage: \\n\".\n\t\t\"  [current: %s KiB]\\n\".\n\t\t\"  [initial: %s KiB]\\n\".\n\t\t\"  [filecache: %s KiB]\\n\".\n\t\t\"  [allowed: %s KiB]\\n\".\n\t\t\"  [remaining: %s KiB]\",\n\t\t$current, $initial, $filecache, $allowed, $remaining);\n\n\tmy $switch = $TL->INI->get(TL => 'memorylog', 'leak');\n\tif (($switch eq 'leak' and $remaining < 0) or $switch eq 'full') {\n\t\t$TL->log(\n\t\t\t__PACKAGE__, $mem_usage);\n\t}\n\n\tif ($switch ne 'leak' and $switch ne 'full') {\n\t\t$TL->log(\n\t\t\t__PACKAGE__,\n\t\t\tsprintf('unknown [TL]memoryleak parameter: \"%s\"', $switch));\n\t}\n\n\tif ($remaining < 0) {\n\t\t$TL->log(\"Tripletail::MemorySentinel detected a possible memory leak.\\n\\n$mem_usage\");\n\t\t$TL->_fcgi_restart(1);\n\t}\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/MemorySentinel.pm",
      "package" : "Tripletail::MemorySentinel"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub next {\n\tmy $this = shift;\n\n\tif ($this->{fh}->eof) {\n\t\treturn;\n\t}\n\telse {\n\t\tif (my $row = $this->{csv}{csv}->getline($this->{fh})) {\n\t\t\t$row;\n\t\t}\n\t\telse {\n\t\t\tdie __PACKAGE__.\"#next: parse error. (不正なCSV形式です)\\n\";\n\t\t}\n\t}\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/CSV.pm",
      "package" : "Tripletail::CSV"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _paging {\n\tmy $this = shift;\n\tmy $resulttype = shift; \n\tmy $node = shift;\n\tmy $query = shift;\n\tmy @params = @_;\n\tmy $result;\n\n    my $DB = $this->{db};\n\n\tif(ref($query) eq 'ARRAY') {\n\t\t($query, $this->{maxrows}) = @$query;\n\t}\n\n\tif(!defined($node)) {\n\t\tdie __PACKAGE__.\"#paging: ARG[2] is not defined. (第2引数が指定されていません)\\n\";\n\t} elsif(ref($node) ne 'Tripletail::Template::Node') {\n\t\tdie __PACKAGE__.\"#paging: ARG[2] is a reference. [$node] (第2引数がリファレンスです)\\n\";\n\t}\n\t\n\tif(!defined($query)) {\n\t\tdie __PACKAGE__.\"#paging: ARG[3] is not defined. (第3引数が指定されていません)\\n\";\n\t} elsif(ref($query)) {\n\t\tdie __PACKAGE__.\"#paging: ARG[3] is a reference. [$query] (第3引数がリファレンスです)\\n\";\n\t}\n\n\tmy $query_back = $query;\n\n\tif(defined($this->{maxrows})) {\n\t\tif(ref($this->{maxrows})) {\n\t\t\tdie __PACKAGE__.\"#paging: ARG[3] is a reference. [$this->{maxrows}] (第3引数がリファレンスです)\\n\";\n\t\t} elsif($this->{maxrows} !~ /^\\d+$/ || $this->{maxrows} < 0) {\n\t\t\tdie __PACKAGE__.\"#paging: ARG[3] is not a positive number. [$this->{maxrows}] (第3引数が正の整数ではありません)\\n\";\n\t\t}\n\t} else {\n        if($this->{dbtype} eq 'mysql') {\n            $query =~ s/SELECT/SELECT SQL_CALC_FOUND_ROWS/i;\n        }\n\t}\n    \n    $query = $this->_set_limitoffset($query);\n\n\tif($resulttype == 0) {\n\t\tmy $sth = $DB->execute($query, @params);\n\t\twhile(my $row = $sth->fetchHash) {\n\t\t\t$node->node('Row')->add($row);\n\t\t}\n\t\t$this->{rows} = $sth->rows + 0;\n\t\t$result = $this->{rows};\n\t} elsif($resulttype == 1) {\n\t\t$result = $DB->selectAllArray($query, @params);\n\t\t$this->{rows} = scalar(@$result);\n\t} elsif($resulttype == 2) {\n\t\t$result = $DB->selectAllHash($query, @params);\n\t\t$this->{rows} = scalar(@$result);\n\t}\n\n    if ($this->{dbtype} eq 'mysql') {\n        unless (defined($this->{maxrows})) {\n            my $sth   = $DB->execute(q{SELECT FOUND_ROWS() as ROWS});\n            my $count = $sth->fetchArray;\n            $sth->finish;\n\n            $this->{maxrows} = $count->[0];\n        }\n    }\n    else {\n        unless (defined($this->{maxrows})) {\n            my $count_query = $query_back;\n            my $replaced    = $count_query =~ s/SELECT.+?FROM/SELECT COUNT(*) FROM/si;\n            if (!$replaced) {\n                die __PACKAGE__.\"#paging, failed to rewrite the SELECT statement to count total number of rows.\".\n                  \" (総行数を得るための SELECT 文の書換に失敗しました。)\\n\";\n            }\n\n            my $sth   = $DB->execute($count_query, @params);\n            my $count = $sth->fetchArray;\n            $sth->finish;\n\n            $this->{maxrows} = $count->[0];\n        }\n    }\n\n\tif($this->{maxrows} == 0) {\n\t\treturn 0;\n\t}\n\n\t$this->{maxpages} = int(($this->{maxrows} - 1) / $this->{pagesize}) + 1;\n\tif($this->{current} > $this->{maxpages}) {\n\t\tif($this->{pagingtype} == 1){\n\t\t\t$this->{current} = $this->{maxpages};\n\n            $query_back = $this->_set_limitoffset($query_back);\n\n\t\t\tif($resulttype == 0) {\n\t\t\t\tmy $sth = $DB->execute($query_back, @params);\n\t\t\t\twhile(my $row = $sth->fetchHash) {\n\t\t\t\t\t$node->node('Row')->add($row);\n\t\t\t\t}\n\t\t\t\t$this->{rows} = $sth->rows + 0;\n\t\t\t\t$result = $this->{rows};\n\t\t\t} elsif($resulttype == 1) {\n\t\t\t\t$result = $DB->selectAllArray($query_back, @params);\n\t\t\t\t$this->{rows} = scalar(@$result);\n\t\t\t} elsif($resulttype == 2) {\n\t\t\t\t$result = $DB->selectAllHash($query_back, @params);\n\t\t\t\t$this->{rows} = scalar(@$result);\n\t\t\t}\n\t\t} else {\n\t\t\t$this->{linkstart} = $this->{maxpages} - int($this->{maxlinks} / 2);\n\t\t\tif($this->{linkstart} < 1) {\n\t\t\t\t$this->{linkstart} = 1;\n\t\t\t}\n\n\t\t\t$this->{linkend} = $this->{linkstart} + $this->{maxlinks} - 1;\n\t\t\tif($this->{linkend} > $this->{maxpages}) {\n\t\t\t\t$this->{linkend} = $this->{maxpages};\n\n\t\t\t\t$this->{linkstart} = $this->{linkend} - $this->{maxlinks} + 1;\n\t\t\t\tif($this->{linkstart} < 1) {\n\t\t\t\t\t$this->{linkstart} = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn undef;\n\t\t}\n\t}\n\n\tif($this->{current} == 1) {\n\t\t$node->node('NoPrevLink')->add;\n\t} else {\n\t\t$node->node('PrevLink')->add(\n\t\t\tPREVLINK => $this->{formparam}->set(\n\t\t\t\t\t$this->{formkey} => $this->{current} - 1\n\t\t\t\t)->toLink($this->{tolink}),\n\t\t);\n\t}\n\n\tif($this->{current} == $this->{maxpages}) {\n\t\t$node->node('NoNextLink')->add;\n\t} else {\n\t\t$node->node('NextLink')->add(\n\t\t\tNEXTLINK => $this->{formparam}->set(\n\t\t\t\t\t$this->{formkey} => $this->{current} + 1\n\t\t\t\t)->toLink($this->{tolink}),\n\t\t);\n\t}\n\n\t$this->{linkstart} = $this->{current} - int($this->{maxlinks} / 2);\n\tif($this->{linkstart} < 1) {\n\t\t$this->{linkstart} = 1;\n\t}\n\n\t$this->{linkend} = $this->{linkstart} + $this->{maxlinks} - 1;\n\tif($this->{linkend} > $this->{maxpages}) {\n\t\t$this->{linkend} = $this->{maxpages};\n\n\t\t$this->{linkstart} = $this->{linkend} - $this->{maxlinks} + 1;\n\t\tif($this->{linkstart} < 1) {\n\t\t\t$this->{linkstart} = 1;\n\t\t}\n\t}\n\n    if ($node->exists('PageNumLinks')) {\n        foreach my $i ($this->{linkstart} .. $this->{linkend}) {\n            if($i == $this->{current}) {\n                $node->node('PageNumLinks')->node('ThisPage')->add(\n                    PAGENUM => $i,\n                   );\n            }\n            else {\n                $node->node('PageNumLinks')->node('OtherPage')->add(\n                    PAGELINK => $this->{formparam}->set(\n\t\t\t\t\t\t$this->{formkey} => $i,\n                       )->toLink($this->{tolink}),\n                    PAGENUM  => $i,\n                   );\n            }\n            $node->node('PageNumLinks')->add;\n        }\n    }\n\t\n\tif($node->exists('MaxRows')) {\n\t\t$node->node('MaxRows')->add(MAXROWS => $this->{maxrows});\n\t}\n\n\tif($node->exists('FirstRow')) {\n\t\t$node->node('FirstRow')->add(FIRSTROW => $this->{beginrow} + 1);\n\t}\n\n\tif($node->exists('LastRow')) {\n\t\t$node->node('LastRow')->add(LASTROW => $this->{beginrow} + $this->{rows});\n\t}\n\n\tif($node->exists('MaxPages')) {\n\t\t$node->node('MaxPages')->add(MAXPAGES => $this->{maxpages});\n\t}\n\n\tif($node->exists('CurPage')) {\n\t\t$node->node('CurPage')->add(CURPAGE => $this->{current});\n\t}\n\n\t$result;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Pager.pm",
      "package" : "Tripletail::Pager"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub toHash {\n    return shift->{form};\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Form.pm",
      "package" : "Tripletail::Form"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __new {\n    my $class = shift;\n    my $this  = bless {} => $class;\n\n    return $this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/CharConv.pm",
      "package" : "Tripletail::CharConv"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub addSessionCheck {\n\tmy $this = shift;\n\n\t$this->{root}->addSessionCheck(@_);\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Template.pm",
      "package" : "Tripletail::Template"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub reset {\n\tmy $this = shift;\n\n\t$this->{header_flushed} = undef;\n\t%{$this->{replacement}} = ();\n\t%{$this->{addition}} = ();\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter.pm",
      "package" : "Tripletail::Filter"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _createSessionCheck\n{\n\tmy $this     = shift;\n\tmy $issecure = shift;\n\n\tmy $sessiongroup = $this->{group};\n\tmy $csrfkey = $TL->INI->get($sessiongroup => 'csrfkey', undef);\n\tif( !defined($csrfkey) )\n\t{\n\t\tmy $err = \"csrfkey is not defined for the INI group [$sessiongroup]. (INI [$sessiongroup] で csrfkey を設定してください)\\n\";\n\t\treturn (undef, undef, $err);\n\t}\n\n\tmy ($key, $sid, $checkval) = $this->getSessionInfo($issecure);\n\n\tif( !defined($sid) )\n\t{\n\t\tmy $err = \"no session ID has been created. You must prepare one before. (セッションがありません。事前にセッションを生成してください)\\n\";\n\t\treturn (undef, undef, $err);\n\t}\n\n\t$key = 'C' . $key;\n\tmy $value = hmac_sha1_hex(join('.', $sid, $checkval), $csrfkey);\n\n\t($key, $value, undef);\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Session.pm",
      "package" : "Tripletail::Session"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __tmpl_db_popup {\n\tmy $this = shift;\n\n\t$TL->newTemplate->setTemplate(qq{\n    <table>\n      <tr>\n        <th>グループ</th>\n        <th>セット</th>\n        <th>コネクション</th>\n        <th>クエリ</th>\n        <th>パラメータ</th>\n        <th>execute実行時間</th>\n        <th>詳細</th>\n      </tr>\n      <!begin:entry>\n      <tr>\n        <td><&GROUP></td>\n        <td><&SET></td>\n        <td><&DB></td>\n    <td><&QUERY></td>\n    <td><&PARAMS></td>\n    <td><&ELAPSED></td>\n    <td>\n      <ul>\n        <!begin:explain-link>\n        <li>\n          <a href=\"javascript:tl_debug_toggle_display('TL_EXPLAIN_<&EXPLAIN_ID>')\">\n        Explain\n          </a>\n        </li>\n        <!end:explain-link>\n        <!begin:fetch-link>\n        <li>\n          <a href=\"javascript:tl_debug_toggle_display('TL_FETCH_<&FETCH_ID>')\">\n        結果\n          </a>\n        </li>\n        <!end:fetch-link>\n      </ul>\n    </td>\n      </tr>\n      <!begin:explain-frame>\n      <tr>\n    <td colspan=\"7\">\n      <div class=\"initial-hidden\" id=\"TL_EXPLAIN_<&EXPLAIN_ID>\">\n        <table>\n          <tr><!begin:label><th><&LABEL></th><!end:label></tr>\n          <!begin:rows>\n          <tr><!begin:column><td><&COLUMN></td><!end:column></tr>\n          <!end:rows>\n        </table>\n      </div>\n    </td>\n      </tr>\n      <!end:explain-frame>\n      <!begin:fetch-frame>\n      <tr>\n    <td colspan=\"7\">\n      <div class=\"initial-hidden\" id=\"TL_FETCH_<&FETCH_ID>\">\n        <table>\n          <tr><!begin:label><th><&LABEL></th><!end:label></tr>\n          <!begin:rows>\n          <tr><!begin:column><td><&COLUMN></td><!end:column></tr>\n          <!end:rows>\n        </table>\n      </div>\n    </td>\n      </tr>\n      <!end:fetch-frame>\n      <!end:entry>\n    </table>\n\n    <script type=\"text/javascript\"><!--\n    function tl_debug_toggle_display(id) {\n      var elem = document.getElementById(id);\n      if (elem.style.display == \"block\") {\n        elem.style.display = \"none\";\n      }\n      else {\n        elem.style.display = \"block\";\n      }\n    }\n    // --></script>\n});\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Debug.pm",
      "package" : "Tripletail::Debug"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _getrawgroupname {\n\tmy $this = shift;\n\tmy $group = shift;\n\t\n\tmy @group;\n\tforeach my $spec (@Tripletail::specialization, '') {\n\t\tmy $groupname = (length $spec ? \"$group:$spec\" : $group);\n\t\tforeach my $rawgroup ($this->getGroups(1)) {\n\t\t\tnext if(!defined($rawgroup));\n\t\t\tif($rawgroup =~ m/^([^\\@]+)/) {\n\t\t\t\tnext if($groupname ne $1);\n\t\t\t\tmy $matchflag = 1;\n\t\t\t\tif($rawgroup =~ m/\\@server:([^\\@:]+)/){\n\t\t\t\t\t$matchflag = 0;\n\t\t\t\t\tmy $servermask = $this->get('HOST' => $1,undef,1);\n\t\t\t\t\tif(defined($servermask)) {\n\t\t\t\t\t\tmy $server = $ENV{SERVER_ADDR};\n\t\t\t\t\t\tif(!defined($server)){\n\t\t\t\t\t\t\t$server = $TL->_readcmd(\"hostname -i 2>&1\");\n\t\t\t\t\t\t\t$server = $server && $server =~ /^\\s*([0-9.]+)\\s*$/ ? $1 : undef;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(defined($server)) {\n\t\t\t\t\t\t\tif($TL->newValue->set($server)->isIpAddress($servermask)) {\n\t\t\t\t\t\t\t\t$matchflag = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif($matchflag == 1 && $rawgroup =~ m/\\@remote:([^\\@:]+)/){\n\t\t\t\t\t$matchflag = 0;\n\t\t\t\t\tmy $remotemask = $this->get('HOST' => $1,undef,1);\n\t\t\t\t\tif(defined($remotemask)) {\n\t\t\t\t\t\tif(my $remote = $ENV{REMOTE_ADDR}) {\n\t\t\t\t\t\t\tif($TL->newValue->set($remote)->isIpAddress($remotemask)) {\n\t\t\t\t\t\t\t\t$matchflag = 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif($matchflag == 1) {\n\t\t\t\t\tpush(@group,$rawgroup);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t@group;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Ini.pm",
      "package" : "Tripletail::Ini"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _ip_match {\n\tmy $this = shift;\n\tmy $a = shift;\n\tmy $b = shift;\n\tmy $bits = shift;\n\tmy $i = 0;\n\n\twhile($bits > 0) {\n\t\tif($bits >= 8) {\n\t\t\t$a->[$i] != $b->[$i]\n\t\t\t  and return 0;\n\n\t\t\t$bits -= 8;\n\t\t} else {\n\t\t\t(($a->[$i] >> (8 - $bits)) & (2 ** $bits - 1)) !=\n\t\t\t  (($b->[$i] >> (8 - $bits)) & (2 ** $bits - 1))\n\t\t\t\tand return 0;\n\n\t\t\t$bits = 0;\n\t\t}\n\t\t$i++;\n\t}\n\t\n\t1;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Value.pm",
      "package" : "Tripletail::Value"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub reset {\n\tmy $this = shift;\n\t$this->SUPER::reset;\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/HeaderOnly.pm",
      "package" : "Tripletail::Filter::HeaderOnly"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub reset {\n\tmy $this = shift;\n\t$this->SUPER::reset;\n\t\n\t$this->{buffer} = '';\n\t\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/MemCached.pm",
      "package" : "Tripletail::Filter::MemCached"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _make_header {\n\tmy $this = shift;\n\t\n\t\n\tmy %opts = ();\n\tif(defined $this->{locationurl}) {\n\t\tif(!$TL->getDebug->{location_debug}) {\n\t\t\t%opts = (Location => $this->_relink(url => $this->{locationurl}));\n\t\t}\n\t}\n\t\n\treturn {\n\t\t%opts,\n\t};\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/MobileHTML.pm",
      "package" : "Tripletail::Filter::MobileHTML"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub reset {\n\tmy $this = shift;\n\t$this->SUPER::reset;\n\n\t$this->{content_printed} = undef;\n\t\n\t$this->{save} = $TL->newForm->set(\n\t\tCCC => '愛',\n\t);\n\t$this->setHeader('Content-Type' => $this->{option}{contenttype});\n\n\t$this->{buffer} = '';\n\t$this->{locationurl} = undef;\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/HTML.pm",
      "package" : "Tripletail::Filter::HTML"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __makeLink {\n\tmy $this = shift;\n\tmy $link = shift;\n\tmy $query = shift;\n\n\tlocal($_);\n\n\tmy @params;\n\tforeach my $key (@{$this->{order}}) {\n\t\tif($query->exists($key)) {\n\t\t\tforeach my $value (sort $query->getValues($key)) {\n\t\t\t\tpush(@params, $key, $value);\n\t\t\t}\n\t\t\t$query->delete($key);\n\t\t}\n\t}\n\tforeach my $key (sort $query->getKeys) {\n\t\tnext if($key eq 'INT');\n\t\tforeach my $value (sort $query->getValues($key)) {\n\t\t\tpush(@params, $key, $value);\n\t\t}\n\t}\n\n\tmy $path_info = join(\n\t\t'/', map {\n\t\t\t$TL->encodeURL($_);\n\t\t} @params);\n\n\tif(defined($_ = $query->getFragment)) {\n\t\t$path_info .= '#' . $TL->encodeURL($_);\n\t}\n\n\t(my $file = $link) =~ s/\\?.*$//;\n\n\tif($this->{option}{hide_extension}) {\n\t\t$file =~ s/\\..+$//;\t\t\n\t}\n\n\tmy $new_url = $file . ($path_info ? \"/$path_info\" : '');\n\n\t$new_url;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/SEO.pm",
      "package" : "Tripletail::Filter::SEO"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub reset {\n\tmy $this = shift;\n\t$this->SUPER::reset;\n\n\t$this->{content_printed} = undef;\n\n\t$this->setHeader('Content-Type' => $this->{option}{contenttype});\n\n\tif(defined($this->{option}{filename})) {\n\t\tmy $filename = $this->{option}{filename};\n\t\t$filename = $TL->charconv($filename, 'UTF-8' => $this->{option}{charset});\n\t\t$this->setHeader('Content-Disposition' => qq{attachment; filename=\"$filename\"});\n\t}\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/CSV.pm",
      "package" : "Tripletail::Filter::CSV"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub reset {\n\tmy $this = shift;\n\t$this->SUPER::reset;\n\n\t$this->setHeader('Content-Type' => $this->{option}{contenttype});\n\t\n\tif(defined($this->{option}{filename})) {\n\t\tmy $filename = $this->{option}{filename};\n\t\t$filename = $TL->charconv($filename, 'UTF-8' => 'Shift_JIS');\n\t\t$this->setHeader('Content-Disposition' => qq{attachment; filename=\"$filename\"});\n\t}\n\t\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/Binary.pm",
      "package" : "Tripletail::Filter::Binary"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub reset {\n\tmy $this = shift;\n\t$this->SUPER::reset;\n\n\t$this->{content_printed} = undef;\n\n\t$this->setHeader('Content-Type' => $this->{option}{contenttype});\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Filter/TEXT.pm",
      "package" : "Tripletail::Filter::TEXT"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _raw2utf8 {\n\tmy $this = shift;\n\tmy $str = shift;\n\tmy $incode = shift;\n\n\t$TL->charconv($str, $incode => 'utf8', 1);\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/InputFilter/MobileHTML.pm",
      "package" : "Tripletail::InputFilter::MobileHTML"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub decodeURL {\n\tmy $this = shift;\n\tmy $form = shift;\n\tmy $url = shift; \n\tmy $fragment = shift;\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/InputFilter/Plain.pm",
      "package" : "Tripletail::InputFilter::Plain"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __pairsFromMultipart {\n\tmy $this = shift;\n\n\tlocal($_);\n\n\tif($ENV{REQUEST_METHOD} ne 'POST') {\n\t\treturn ([], {});\n\t}\n\n\tif(!defined($ENV{CONTENT_LENGTH})) {\n\t\treturn ([], {});\n\t}\n\n\tmy $boundary = do {\n\t\tif ($ENV{CONTENT_TYPE} =~ m/boundary=\"([^\"]+)\"/i or\n\t\t\t  $ENV{CONTENT_TYPE} =~ m/boundary=(\\S+)/i) {\n\t\t\t'--' . $1;\n\t\t}\n\t\telse {\n\t\t\tdie __PACKAGE__.\"#__pairsFromMultipart, we found no boundaries \".\n\t\t\t\t\"in the Content-Type. [$ENV{CONTENT_TYPE}]\\n\";\n\t\t}\n\t};\n\n\tif(($ENV{'HTTP_USER_AGENT'} || '') =~ m/MSIE\\s+3\\.0[12];\\s*Mac|DreamPassport/) {\n\t\t$boundary =~ s/^--//;\n\t}\n\n\tmy $req_limit = $TL->parseQuantity(\n\t\t$TL->INI->get(TL => 'maxrequestsize', '8Mi'));\n\n\tmy $file_limit = $TL->parseQuantity(\n\t\t$TL->INI->get(TL => 'maxfilesize', '8Mi'));\n\n\tmy $chunksize = 16 * 1024;\n\tif( $req_limit < $chunksize )\n\t{\n\t\t$chunksize = $req_limit;\n\t\t\n\t\tmy $boundary = ( length($boundary)+2 )*2; \n\t\tif( $req_limit < $boundary )\n\t\t{\n\t\t\t$chunksize = $boundary;\n\t\t}\n\t}\n\n\tmy $buffer = '';\n\tmy $eof = undef;\n\tmy $non_file_count = 0;\n\tmy $file_count = 0;\n\tmy $pairs = [];\n\tmy $filename_h = {};\n\n\tmy $current_key = undef;\n\tmy $current_value = undef;\n\n\tmy $find = sub {\n\t\tmy $substr = shift;\n\t\tindex $buffer, $substr, 0;\n\t};\n\n\tmy $rest_len = $ENV{CONTENT_LENGTH};\n\tmy $fill = sub {\n\t\tif ($eof) {\n\t\t\tdie __PACKAGE__.\": we got EOF while reading from stdin. (stdinからの読み取り途中でEOFを受信しました)\\n\";\n\t\t}\n\n\t\tmy $size = $chunksize - length($buffer);\n\t\tif ($size == 0) {\n\t\t\tdie __PACKAGE__.\": read buffer has been full. (読み込みバッファがあふれました。maxrequestsizeが小さすぎるか、リクエストが大きすぎます)\\n\";\n\t\t}\n\t\tif( $size > $rest_len )\n\t\t{\n\t\t\t$size = $rest_len;\n\t\t\tif ($size <= 0)\n\t\t\t{\n\t\t\t\tdie __PACKAGE__.\": already read CONTENT_LENGTH bytes ($ENV{CONTENT_LENGTH}). (Content-Lengthバイトを読み取りましたがデータが残っています)\\n\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tmy $chunk;\n\t\tmy $read = read STDIN, $chunk, $size;\n\n\t\tif (not defined $read) {\n\t\t\tdie __PACKAGE__.\": we got IO error while reading from stdin. [$!] (stdinからの読み込み中にIOエラーが発生しました)\\n\";\n\t\t}\n\t\telsif ($read == 0) {\n\t\t\t$eof = 1;\n\t\t}\n\t\telse {\n\t\t\t$buffer .= $chunk;\n\t\t\t$rest_len -= length($chunk);\n\t\t}\n\t};\n\n\tmy $fill_until = sub {\n\t\tmy $str = shift;\n\n\t\twhile (index($buffer, $str) == -1) {\n\t\t\t$fill->();\n\t\t}\n\t};\n\n\tmy $remove_until = sub {\n\t\tmy $substr = shift;\n\n\t\tmy $pos = index $buffer, $substr, 0;\n\t\tif ($pos == -1) {\n\t\t\tundef;\n\t\t}\n\t\telse {\n\t\t\tsubstr $buffer, 0, $pos, '';\n\t\t}\n\t};\n\n\tmy $remove = sub {\n\t\tmy $len = shift;\n\n\t\tsubstr $buffer, 0, $len, '';\n\t};\n\n\tmy $next_header_line = sub {\n\n\t\twhile (1) {\n\t\t\t$fill_until->(\"\\x0d\\x0a\");\n\n\t\t\tmy $pos = index $buffer, \"\\x0d\\x0a\";\n\t\t\tif ( $pos>0 && $buffer =~ s/^(.{$pos})\\x0d\\x0a[ \\t]+/$1 /s) {\n\t\t\t\tnext; \n\t\t\t}\n\t\t\tlast;\n\t\t}\n\n\t\t$buffer =~ s/^(.*?)\\x0d\\x0a//\n\t\t  or die __PACKAGE__.\"#__pairsFromMultipart: Internal Error (内部エラー)\\n\";\n\n\t\t$1;\n\t};\n\n\tmy $tempdir = $TL->INI->get(TL => tempdir => undef);\n\tif( defined($tempdir) )\n\t{\n\t\t$tempdir = $tempdir=~/^(.*)\\z/ && $1 or die \"untaint\";\n\t}\n\tmy $new_ih = sub {\n\t\tif (defined $tempdir) {\n\t\t\tif (!-d $tempdir) {\n\t\t\t\tFile::Path::mkpath($tempdir);\n\t\t\t}\n\t\t\t\n\t\t\tmy $filename = \"$tempdir/TL-INPUTFILTER-HTML-$$-$TEMPFILE_COUNTER.tmp\";\n\t\t\t$TEMPFILE_COUNTER++;\n\n\t\t\topen my $fh, '+>', $filename\n\t\t\t  or die __PACKAGE__.\": failed to open $filename for writing. [$!] (${filename}に書き込めません)\\n\";\n\n\t\t\tunlink $filename\n\t\t\t  or die __PACKAGE__.\": failed to unlink $filename. [$!] (${filename}を削除できません)\\n\";\n\n\t\t\t$fh;\n\t\t}\n\t\telse {\n\t\t\tIO::Scalar->new;\n\t\t}\n\t};\n\n\tmy $prepare = sub {\n\t\tmy $key = shift;\n\t\tmy $filename = shift;\n\n\t\tif (defined $current_key) {\n\t\t\tdie __PACKAGE__.\"#__pairsFromMultipart: Internal Error. (内部エラー)\\n\";\n\t\t}\n\n\t\t$current_key = $key;\n\n\t\tif (defined $filename) {\n\t\t\t$filename_h->{$key} = $filename;\n\t\t\t$current_value = $new_ih->();\n\t\t}\n\t\telse {\n\t\t\t$current_value = '';\n\t\t}\n\t};\n\n\tmy $commit = sub {\n\t\tif (not defined $current_key) {\n\t\t\tdie __PACKAGE__.\"#__pairsFromMultipart: Internal Error. (内部エラー)\\n\";\n\t\t}\n\n\t\tif (ref $current_value) {\n\t\t\tseek $current_value, 0, 0;\n\t\t}\n\n\t\tpush @$pairs, [$current_key, $current_value];\n\n\t\tundef $current_key;\n\t\tundef $current_value;\n\t};\n\n\tmy $push = sub {\n\t\tmy $data = shift;\n\t\t\n\t\tif (not defined $current_key) {\n\t\t\tdie __PACKAGE__.\"#__pairsFromMultipart: Internal Error. (内部エラー)\\n\";\n\t\t}\n\n\t\tif (ref $current_value) {\n\t\t\tif (length($data) + $file_count > $file_limit) {\n\t\t\t\tdie __PACKAGE__.\": we are getting too large file which exceeds the limit. (ファイルサイズが制限を超えました。maxfilesizeを確認してください)\\n\";\n\t\t\t}\n\t\t\tprint $current_value $data;\n\t\t\t$file_count += length($data);\n\t\t}\n\t\telse {\n\t\t\tif (length($data) + $non_file_count > $req_limit) {\n\t\t\t\tdie __PACKAGE__.\": we are getting too large request which exceeds the limit. (リクエストサイズが大きすぎます。maxrequestsizeを確認してください)\\n\";\n\t\t\t}\n\t\t\t$current_value .= $data;\n\t\t\t$non_file_count += length($data);\n\t\t}\n\t};\n\n\t\n\twhile (1) {\n\t\tif ($find->($boundary) == -1) {\n\t\t\t$fill->();\n\t\t}\n\t\t\n\t\tif (defined $remove_until->($boundary)) {\n\t\t\t$remove->(length $boundary);\n\t\t\t$fill_until->(\"\\x0d\\x0a\");\n\n\t\t\tif ($find->(\"--\") == 0) {\n\t\t\t\tlast;\n\t\t\t}\n\t\t\t\n\t\t\t$remove_until->(\"\\x0d\\x0a\"); \n\t\t\t$remove->(2);\n\n\t\t\twhile (1) {\n\t\t\t\tmy $line = $next_header_line->();\n\t\t\t\tif (not length $line) {\n\t\t\t\t\tlast;\n\t\t\t\t}\n\t\t\t\telsif ($line =~ m/^Content-Disposition:/i) {\n\t\t\t\t\tmy $key;\n\t\t\t\t\t\n\t\t\t\t\tif ($line =~ m/(?!file)name=\"(.+?)\"/i or $line =~ m/(?!file)name=(\\S+)/i) {\n\t\t\t\t\t\t$key = $1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdie __PACKAGE__.\": we got a part with no name. (名前がないパートがありました)\\n\";\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($line =~ m/filename=\"(.*?)\"/i or $line =~ m/filename=(\\S+)/i) {\n\t\t\t\t\t\tif (not defined $key) {\n\t\t\t\t\t\t\tdie __PACKAGE__.\": we got an isolated filename without name. [$_] (名前がないのにファイル名がありました)\\n\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$prepare->($key, $1);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$prepare->($key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\twhile (1) {\n\t\t\t\tif ($find->(\"\\x0d\\x0a$boundary\") == -1) {\n\t\t\t\t\t$fill->();\n\t\t\t\t}\n\n\t\t\t\tif (defined($_ = $remove_until->(\"\\x0d\\x0a$boundary\"))) {\n\t\t\t\t\t$push->($_);\n\t\t\t\t\t$commit->();\n\t\t\t\t\t\n\t\t\t\t\t$remove->(2); \n\t\t\t\t\tlast;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmy $consume = length($buffer) - (length($boundary) + 2) + 1;\n\t\t\t\t\tif ($consume > 0) {\n\t\t\t\t\t\t$push->($remove->($consume));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t}\n\t}\n\n\t($pairs, $filename_h);\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/InputFilter/HTML.pm",
      "package" : "Tripletail::InputFilter::HTML"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub __pairsFromPathInfo {\n\tmy $this = shift;\n\n\tif(!defined($ENV{PATH_INFO})) {\n\t\treturn ([], undef);\n\t}\n\n\tmy @split = map { $this->_urlDecodeString($_) } split m!/!, $ENV{PATH_INFO};\n\tshift @split; \n\n\tmy @pairs;\n\twhile(@split) {\n\t\tif(defined($split[0]) && $split[0] eq 'SEO') {\n\t\t\tshift(@split);\n\t\t\tshift(@split);\n\t\t\tnext;\n\t\t}\n\t\tmy $key = shift(@split);\n\t\tmy $value = shift(@split);\n\t\tif(!defined($value)) {\n\t\t\t$value = '';\n\t\t}\n\t\tpush @pairs, [$key => $value];\n\t}\n\treturn (\\@pairs, {});\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/InputFilter/SEO.pm",
      "package" : "Tripletail::InputFilter::SEO"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub UNTIE {\n  $TL->log(__PACKAGE__,\n\t   Tripletail::Debug::Watch::_calledLocation . ' ' .\n\t   \"end watch \\%${_[0]->[1]}\\n\"\n\t  );\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Debug/Watch.pm",
      "package" : "Tripletail::Debug::Watch"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _compose {\n\tmy $this = shift;\n\tmy $opts = { @_ };\n\tmy $ret = '';\n\t\n\tmy $save_marks = $opts->{save_marks};\n\n\tif (!$save_marks) {\n\t\tforeach my $seg (@{$this->{tmplvec}}) {\n\t\t\tif(ref $seg ) {\n\t\t\t\tmy $val = $this->{valmap}{${$seg->[2]}};\n\t\t\t\t\n\t\t\t\tif(defined $val) {\n\t\t\t\t\tif( utf8::is_utf8($val) )\n\t\t\t\t\t{\n\t\t\t\t\t\tutf8::encode($val);\n\t\t\t\t\t}\n\t\t\t\t\t$ret .= $val;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n            else {\n\t\t\t\t$ret .= $seg;\n\t\t\t}\n\t\t}\n\t}\n    else {\n\t\tforeach my $seg (@{$this->{tmplvec}}) {\n\t\t\tif (ref($seg)) {\n\t\t\t\tmy $val = $this->{valmap}{${$seg->[2]}};\n                \n\t\t\t\tif (defined $val) {\n\t\t\t\t\tif( utf8::is_utf8($val) )\n\t\t\t\t\t{\n\t\t\t\t\t\tutf8::encode($val);\n\t\t\t\t\t}\n                    $ret .= $val;\n                }\n\t\n                if ($seg->[0] eq 'tag') {\n\t\t\t\t\tif (!defined $val) {\n\t\t\t\t\t\t$ret .= sprintf '<&%s>', $seg->[1];\n\t\t\t\t\t}\n\t\t\t\t}\n                else {\n                    $ret .= sprintf '<!%s:%s>', $seg->[0], $seg->[1];\n                }\n            }\n            else {\n\t\t\t\t$ret .= $seg;\n\t\t\t}\n\t\t}\n\t}\n\n\t$ret;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Template/Node.pm",
      "package" : "Tripletail::Template::Node"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _getResultCode {\n\tmy $this = shift;\n\n\t$this->{status}{resultcode};\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Sendmail/Smtp.pm",
      "package" : "Tripletail::Sendmail::Smtp"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _recover_outgoing {\n\tmy $this = shift;\n\n\tlocal($_);\n\n\tmy $outgoing = \"$this->{queuedir}/outgoing\";\n\tmy $queue = \"$this->{queuedir}/queue\";\n\n\topendir my $dh, $outgoing\n\t\tor die __PACKAGE__.\"#process: failed to opendir [$outgoing] (ディレクトリを開けません)\\n\";\n\n\twhile(defined($_ = readdir $dh)) {\n\t\tmy $fname = $_;\n\t\tmy $fpath = \"$outgoing/$fname\";\n\n\t\tif(-f $fpath and $fpath =~ m/\\.(\\d+)$/) {\n\t\t\tmy $pid = $1;\n\n\t\t\tif(kill 0, $pid) {\n\t\t\t\tnext;\n\t\t\t} else {\n\t\t\t\t$TL->log(\n\t\t\t\t\t__PACKAGE__,\n\t\t\t\t\t\"Outgoing mail [$fpath] seems to be an orphan. Requeueing...\"\n\t\t\t\t);\n\n\t\t\t\tmy $requeue = \"$queue/$fname\";\n                $requeue =~ s/\\.\\d+$//; \n\t\t\t\trename $fpath => $requeue\n\t\t\t\t\tor die __PACKAGE__.\"#process: failed to rename [$fpath] => [$requeue] (リネームできません)\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\tclosedir $dh;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Sendmail/MailQueue.pm",
      "package" : "Tripletail::Sendmail::MailQueue"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub send {\n\tmy $this = shift;\n\tmy $data = $this->_getoptSend(@_);\n\n\topen my $sendmail, '|' . $this->{commandline}\n\t  or die __PACKAGE__.\"#send: failed to execute the sendmail command. [$this->{commandline}] (sendmailコマンドを使用できません)\\n\";\n\t\n\tmy $senddata = $data->{data};\n\t$senddata =~ tr/\\r//d;\n\t\n\tprint $sendmail $senddata;\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Sendmail/Sendmail.pm",
      "package" : "Tripletail::Sendmail::Sendmail"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub send {\n\tmy $this = shift;\n\tmy $data = $this->_getoptSend(@_);\n\n\tmy $DB = $TL->getDB($this->{dbgroup});\n\n\tforeach my $rcpt (@{$data->{rcpt}}) {\n\t\t$DB->execute(\n\t\t\tq{\n\t\t\t\tINSERT INTO mailsend\n\t\t\t\t\t(start, resend, mailfrom, rcptto, hourlimit, resendlimit, data)\n\t\t\t\tVALUES (NOW(), ?     , ?       , ?     , ''       , ?          , ?   )\n\t\t\t},\n\t\t\t$this->{resend} ? 'yes' : 'no',\n\t\t\t$data->{from},\n\t\t\t$rcpt,\n\t\t\t$TL->parsePeriod($this->{resendlimit}),\n\t\t\t$data->{data},\n\t\t);\n\t}\n\n\t$this;\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Sendmail/Esmtp.pm",
      "package" : "Tripletail::Sendmail::Esmtp"
   },
   {
      "PPI" : "PPI::Statement::Variable",
      "bad" : "our %HOLIDAY = (\n\t\n\t  1948 => {\n\t\t  '09-23' => '秋分の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1949 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1950 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1951 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-24' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1952 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1953 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1954 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1955 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-24' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1956 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1957 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1958 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1959 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-10' => '皇太子明仁親王の結婚の儀', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-24' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1960 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-20' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1961 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1962 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1963 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-24' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1964 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-20' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1965 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-23' => '秋分の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1966 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1967 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-24' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1968 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1969 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1970 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1971 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-24' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1972 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1973 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1974 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-06' => '振替休日', '09-15' => '敬老の日', '09-16' => '振替休日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1975 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-24' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', \n\t\t },\n\t\n\t  1976 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '10-11' => '振替休日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1977 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1978 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-15' => '成人の日', '01-16' => '振替休日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1979 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-24' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1980 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', \n\t\t },\n\t\n\t  1981 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-04' => '振替休日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1982 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '03-22' => '振替休日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '10-11' => '振替休日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1983 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1984 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-15' => '成人の日', '01-16' => '振替休日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '天皇誕生日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '09-24' => '振替休日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1985 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-06' => '振替休日', '09-15' => '敬老の日', '09-16' => '振替休日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1986 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', \n\t\t },\n\t\n\t  1987 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-04' => '振替休日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1988 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '03-21' => '振替休日', '04-29' => '天皇誕生日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', \n\t\t },\n\t\n\t  1989 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-15' => '成人の日', '01-16' => '振替休日', '02-11' => '建国記念日', '02-24' => '昭和天皇の大喪の礼', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1990 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-21' => '春分の日', '04-29' => 'みどりの日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '09-15' => '敬老の日', '09-23' => '秋分の日', '09-24' => '振替休日', '10-10' => '体育の日', '11-03' => '文化の日', '11-12' => '即位礼正殿の儀', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', '12-24' => '振替休日', \n\t\t },\n\t\n\t  1991 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-06' => '振替休日', '09-15' => '敬老の日', '09-16' => '振替休日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1992 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-04' => '振替休日', '05-05' => 'こどもの日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1993 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '06-09' => '皇太子徳仁親王の結婚の儀', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '10-11' => '振替休日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1994 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1995 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-15' => '成人の日', '01-16' => '振替休日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1996 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-20' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-06' => '振替休日', '07-20' => '海の日', '09-15' => '敬老の日', '09-16' => '振替休日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1997 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '07-20' => '海の日', '07-21' => '振替休日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1998 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-04' => '振替休日', '05-05' => 'こどもの日', '07-20' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  1999 => {\n\t\t  '01-01' => '元旦', '01-15' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '03-22' => '振替休日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '07-20' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '10-11' => '振替休日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2000 => {\n\t\t  '01-01' => '元旦', '01-10' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '07-20' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-09' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2001 => {\n\t\t  '01-01' => '元旦', '01-08' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-20' => '春分の日', '04-29' => 'みどりの日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '07-20' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '09-24' => '振替休日', '10-08' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', '12-24' => '振替休日', \n\t\t },\n\t\n\t  2002 => {\n\t\t  '01-01' => '元旦', '01-14' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-06' => '振替休日', '07-20' => '海の日', '09-15' => '敬老の日', '09-16' => '振替休日', '09-23' => '秋分の日', '10-14' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2003 => {\n\t\t  '01-01' => '元旦', '01-13' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '07-21' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-13' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2004 => {\n\t\t  '01-01' => '元旦', '01-12' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '07-19' => '海の日', '09-20' => '敬老の日', '09-23' => '秋分の日', '10-11' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2005 => {\n\t\t  '01-01' => '元旦', '01-10' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '03-21' => '振替休日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '07-18' => '海の日', '09-19' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2006 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-09' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => 'みどりの日', '05-03' => '憲法記念日', '05-05' => 'こどもの日', '05-04' => '国民の休日', '07-17' => '海の日', '09-18' => '敬老の日', '09-23' => '秋分の日', '10-09' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2007 => {\n\t\t  '01-01' => '元旦', '01-08' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-21' => '春分の日', '04-29' => '昭和の日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-16' => '海の日', '09-17' => '敬老の日', '09-23' => '秋分の日', '09-24' => '振替休日', '10-08' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', '12-24' => '振替休日', \n\t\t },\n\t\n\t  2008 => {\n\t\t  '01-01' => '元旦', '01-14' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-06' => '振替休日', '05-05' => 'こどもの日', '07-21' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-13' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2009 => {\n\t\t  '01-01' => '元旦', '01-12' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-06' => '振替休日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-20' => '海の日', '09-21' => '敬老の日', '09-23' => '秋分の日', '09-22' => '国民の休日', '10-12' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2010 => {\n\t\t  '01-01' => '元旦', '01-11' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '03-22' => '振替休日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-19' => '海の日', '09-20' => '敬老の日', '09-23' => '秋分の日', '10-11' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2011 => {\n\t\t  '01-01' => '元旦', '01-10' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-18' => '海の日', '09-19' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2012 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-09' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-16' => '海の日', '09-17' => '敬老の日', '09-22' => '秋分の日', '10-08' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', '12-24' => '振替休日', \n\t\t },\n\t\n\t  2013 => {\n\t\t  '01-01' => '元旦', '01-14' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '05-06' => '振替休日', '07-15' => '海の日', '09-16' => '敬老の日', '09-23' => '秋分の日', '10-14' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2014 => {\n\t\t  '01-01' => '元旦', '01-13' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-06' => '振替休日', '05-05' => 'こどもの日', '07-21' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-13' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2015 => {\n\t\t  '01-01' => '元旦', '01-12' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-06' => '振替休日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-20' => '海の日', '09-21' => '敬老の日', '09-23' => '秋分の日', '09-22' => '国民の休日', '10-12' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2016 => {\n\t\t  '01-01' => '元旦', '01-11' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '03-21' => '振替休日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-18' => '海の日', '09-19' => '敬老の日', '09-22' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2017 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-09' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-17' => '海の日', '09-18' => '敬老の日', '09-23' => '秋分の日', '10-09' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2018 => {\n\t\t  '01-01' => '元旦', '01-08' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-21' => '春分の日', '04-29' => '昭和の日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-16' => '海の日', '09-17' => '敬老の日', '09-23' => '秋分の日', '09-24' => '振替休日', '10-08' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', '12-24' => '振替休日', \n\t\t },\n\t\n\t  2019 => {\n\t\t  '01-01' => '元旦', '01-14' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '05-06' => '振替休日', '07-15' => '海の日', '09-16' => '敬老の日', '09-23' => '秋分の日', '10-14' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2020 => {\n\t\t  '01-01' => '元旦', '01-13' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-06' => '振替休日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-20' => '海の日', '09-21' => '敬老の日', '09-22' => '秋分の日', '10-12' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2021 => {\n\t\t  '01-01' => '元旦', '01-11' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-19' => '海の日', '09-20' => '敬老の日', '09-23' => '秋分の日', '10-11' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2022 => {\n\t\t  '01-01' => '元旦', '01-10' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-18' => '海の日', '09-19' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2023 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-09' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-17' => '海の日', '09-18' => '敬老の日', '09-23' => '秋分の日', '10-09' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2024 => {\n\t\t  '01-01' => '元旦', '01-08' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '05-06' => '振替休日', '07-15' => '海の日', '09-16' => '敬老の日', '09-22' => '秋分の日', '09-23' => '振替休日', '10-14' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2025 => {\n\t\t  '01-01' => '元旦', '01-13' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-06' => '振替休日', '05-05' => 'こどもの日', '07-21' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-13' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2026 => {\n\t\t  '01-01' => '元旦', '01-12' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-06' => '振替休日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-20' => '海の日', '09-21' => '敬老の日', '09-23' => '秋分の日', '09-22' => '国民の休日', '10-12' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2027 => {\n\t\t  '01-01' => '元旦', '01-11' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '03-22' => '振替休日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-19' => '海の日', '09-20' => '敬老の日', '09-23' => '秋分の日', '10-11' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2028 => {\n\t\t  '01-01' => '元旦', '01-10' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-17' => '海の日', '09-18' => '敬老の日', '09-22' => '秋分の日', '10-09' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2029 => {\n\t\t  '01-01' => '元旦', '01-08' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-20' => '春分の日', '04-29' => '昭和の日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-16' => '海の日', '09-17' => '敬老の日', '09-23' => '秋分の日', '09-24' => '振替休日', '10-08' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', '12-24' => '振替休日', \n\t\t },\n\t\n\t  2030 => {\n\t\t  '01-01' => '元旦', '01-14' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '05-06' => '振替休日', '07-15' => '海の日', '09-16' => '敬老の日', '09-23' => '秋分の日', '10-14' => '体育の日', '11-03' => '文化の日', '11-04' => '振替休日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2031 => {\n\t\t  '01-01' => '元旦', '01-13' => '成人の日', '02-11' => '建国記念日', '03-21' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-06' => '振替休日', '05-05' => 'こどもの日', '07-21' => '海の日', '09-15' => '敬老の日', '09-23' => '秋分の日', '10-13' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2032 => {\n\t\t  '01-01' => '元旦', '01-12' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-19' => '海の日', '09-20' => '敬老の日', '09-22' => '秋分の日', '09-21' => '国民の休日', '10-11' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2033 => {\n\t\t  '01-01' => '元旦', '01-10' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '03-21' => '振替休日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-18' => '海の日', '09-19' => '敬老の日', '09-23' => '秋分の日', '10-10' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2034 => {\n\t\t  '01-01' => '元旦', '01-02' => '振替休日', '01-09' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-17' => '海の日', '09-18' => '敬老の日', '09-23' => '秋分の日', '10-09' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2035 => {\n\t\t  '01-01' => '元旦', '01-08' => '成人の日', '02-11' => '建国記念日', '02-12' => '振替休日', '03-21' => '春分の日', '04-29' => '昭和の日', '04-30' => '振替休日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-16' => '海の日', '09-17' => '敬老の日', '09-23' => '秋分の日', '09-24' => '振替休日', '10-08' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', '12-24' => '振替休日', \n\t\t },\n\t\n\t  2036 => {\n\t\t  '01-01' => '元旦', '01-14' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-04' => 'みどりの日', '05-06' => '振替休日', '05-05' => 'こどもの日', '07-21' => '海の日', '09-15' => '敬老の日', '09-22' => '秋分の日', '10-13' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '11-24' => '振替休日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n\t  2037 => {\n\t\t  '01-01' => '元旦', '01-12' => '成人の日', '02-11' => '建国記念日', '03-20' => '春分の日', '04-29' => '昭和の日', '05-03' => '憲法記念日', '05-06' => '振替休日', '05-04' => 'みどりの日', '05-05' => 'こどもの日', '07-20' => '海の日', '09-21' => '敬老の日', '09-23' => '秋分の日', '09-22' => '国民の休日', '10-12' => '体育の日', '11-03' => '文化の日', '11-23' => '勤労感謝の日', '12-23' => '天皇誕生日', \n\t\t },\n\t\n   )",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/DateTime/JPHoliday.pm",
      "package" : "Tripletail::DateTime::JPHoliday"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub getFilter {\n\tmy $filter = shift;\n\n\tif ( !defined( $filterCache->{$filter} ) ) {\n\t\teval qq{\\$filterCache->{$filter} = new Tripletail::Validator::Filter::$filter};\n\t\tif ($@) {\n\t\t\tif ( defined( $userFilters->{$filter} ) ) {\n\t\t\t\teval qq{\\$filterCache->{$filter} = new $userFilters->{$filter}};\n\t\t\t}\n\t\t\tif ($@) {\n\t\t\t\tdie qq{Filter [$filter] not found.};\n\t\t\t}\n\t\t}\n\t}\n\treturn $filterCache->{$filter};\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/lib/Tripletail/Validator/FilterFactory.pm",
      "package" : "Tripletail::Validator::FilterFactory"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub toStr {\n    my $this = shift;\n    sprintf '<!-- %s -->', $this->[STR];\n}",
      "file" : "/var/tmp/arv_OYleWo/Tripletail-0.50/ext/Tripletail-HtmlFilter/HtmlFilter.pm",
      "package" : "Tripletail::HtmlFilter"
   }
]
