[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub scrape {\n    my ($html, $selectors, $options) = @_;\n    \n    $options ||= {};\n    my $delete_tree;\n    if (! ref $options->{tree}) {\n        $options->{tree} = HTML::TreeBuilder::XPath->new;\n        $options->{tree}->parse($html);\n        $options->{tree}->eof;\n        $delete_tree = 1;\n    };\n    my $tree = $options->{tree};\n    \n    $options->{make_uri} ||= {};\n    my %make_uri = %{$options->{make_uri}};\n\n    my @rows;\n\n    my %known_uri = (\n        'href' => 1, \n        'src'  => 1, \n    );\n\n    my @selectors;\n    if (ref $selectors eq 'ARRAY') {\n        @selectors = @$selectors\n    } else {\n        @selectors = map { $selectors->{ $_ } } sort keys %$selectors;\n    };\n\n    my $rowidx=0;\n    for my $selector (@selectors) {\n        my ($attr);\n        my $s = $selector;\n        if ($selector =~ s!/?\\@(\\w+)$!!) {\n            $attr = $1;\n        };\n        if ($selector !~ m!^\\.?/!) {\n            $selector = selector_to_xpath( $selector );\n        };\n        $selector = \".$selector\" unless $selector =~ /^\\./;\n        my @nodes;\n        if (! defined $attr) {\n            @nodes = map { $_->as_trimmed_text } $tree->findnodes($selector);\n        } else {\n            $make_uri{ $rowidx } ||= (($known_uri{ lc $attr }) and ! $options->{no_known_uri});\n            @nodes = $tree->findvalues(\"$selector/\\@$attr\");\n        };\n        if ($make_uri{ $rowidx }) {\n            @nodes = map { URI->new_abs( $_, $options->{base} )->as_string } @nodes;\n        };\n        push @rows, \\@nodes;\n        $rowidx++;\n    };\n    \n    my @result;\n    for my $idx (0.. $#{ $rows[0] }) {\n        push @result, [ map { \n                $rows[$_]->[$idx]\n        } 0..$#rows ];\n    };\n    \n    if( ref $selectors eq 'HASH') {\n        @result = map {\n                my $arr = $_;\n                my $i = 0;\n                $_ = +{\n                    map { $_ => $arr->[$i++] } sort keys %$selectors\n                      };\n            } @result\n    };\n\n    $tree->delete\n        if $delete_tree;\n    @result\n}",
      "file" : "/var/tmp/arv_XV1OhI/App-scrape-0.04/lib/App/scrape.pm",
      "package" : "App::scrape"
   }
]
