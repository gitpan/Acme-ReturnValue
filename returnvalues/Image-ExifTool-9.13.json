[
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "%Image::ExifTool::GE::Main = (\n    WRITE_PROC => \\&Image::ExifTool::Exif::WriteExif,\n    CHECK_PROC => \\&Image::ExifTool::Exif::CheckExif,\n    WRITABLE => 1,\n    GROUPS => { 0 => 'MakerNotes', 2 => 'Camera' },\n    NOTES => q{\n        This table lists tags found in the maker notes of some General Imaging\n        camera models.\n    },\n    0x0202 => {\n        Name => 'Macro',\n        Writable => 'int16u',\n        PrintConv => { 0 => 'Off', 1 => 'On' },\n    },\n    0x0207 => {\n        Name => 'GEModel',\n        Format => 'string',\n    },\n    0x0300 => {\n        Name => 'GEMake',\n        Format => 'string',\n    },\n)",
      "file" : "/var/tmp/arv_NClAOb/Image-ExifTool-9.13/lib/Image/ExifTool/GE.pm",
      "package" : "Image::ExifTool::GE"
   },
   {
      "PPI" : "PPI::Statement (but very likely crap)",
      "bad" : "%Image::ExifTool::Reconyx::Main = (\n    GROUPS => { 0 => 'MakerNotes', 2 => 'Camera' },\n    PROCESS_PROC => \\&Image::ExifTool::ProcessBinaryData,\n    WRITE_PROC => \\&Image::ExifTool::WriteBinaryData,\n    CHECK_PROC => \\&Image::ExifTool::CheckBinaryData,\n    TAG_PREFIX => 'Reconyx',\n    FORMAT => 'int16u',\n    WRITABLE => 1,\n    FIRST_ENTRY => 0,\n    NOTES => q{\n        The following tags are extracted from the maker notes of Reconyx Hyperfire\n        cameras such as the HC500, HC600 and PC900.\n    },\n    0x00 => { \n        Name => 'MakerNoteVersion',\n        PrintConv => 'sprintf(\"0x%.4x\", $val)',\n        Writable => 0, \n        PrintConvInv => 'hex $val',\n    },\n    0x01 => { \n        Name => 'FirmwareVersion',\n        Format => 'int16u[3]',\n        PrintConv => '$val=~tr/ /./; $val',\n        Writable => 0, \n    },\n    0x04 => { \n        Name => 'FirmwareDate',\n        Format => 'int16u[2]',\n        ValueConv => q{\n            my @v = split(' ',$val);\n            sprintf('%.4x:%.2x:%.2x', $v[0], $v[1]>>8, $v[1]&0xff);\n        },\n        ValueConvInv => q{\n            my @v = split(':', $val);\n            hex($v[0]) . ' ' . hex($v[1] . $v[2]);\n        },\n    },\n    0x06 => {\n        Name => 'TriggerMode',\n        Format => 'string[2]',\n        PrintConv => {\n            C => 'CodeLoc Not Entered', \n            E => 'External Sensor', \n            M => 'Motion Detection',\n            T => 'Time Lapse',\n        },\n    },\n    0x07 => {\n        Name => 'Sequence',\n        Format => 'int16u[2]',\n        PrintConv => '$val =~ s/ / of /; $val',\n        PrintConvInv => 'join(\" \", $val=~/\\d+/g)',\n    },\n    0x09 => { \n        Name => 'EventNumber',\n        Format => 'int16u[2]',\n        ValueConv => 'my @v=split(\" \",$val); ($v[0]<<16) + $v[1]',\n        ValueConvInv => '($val>>16) . \" \" . ($val&0xffff)',\n    },\n    0x0b => {\n        Name => 'DateTimeOriginal',\n        Description => 'Date/Time Original',\n        Format => 'int16u[6]',\n        Groups => { 2 => 'Time' },\n        Priority => 0, \n        Shift => 'Time',\n        ValueConv => q{\n            my @a = split ' ', $val;\n            # have seen these values written big-endian when everything else is little-endian\n            if ($a[0] & 0xff00 and not $a[0] & 0xff) {\n                $_ = ($_ >> 8) | (($_ & 0xff) << 8) foreach @a;\n            }\n            sprintf('%.4d:%.2d:%.2d %.2d:%.2d:%.2d', @a[5,3,4,2,1,0]);\n        },\n        ValueConvInv => q{\n            my @a = ($val =~ /\\d+/g);\n            return undef unless @a >= 6;\n            join ' ', @a[5,4,3,1,2,0];\n        },\n        PrintConv => '$self->ConvertDateTime($val)',\n        PrintConvInv => '$self->InverseDateTime($val)',\n    },\n    0x12 => {\n        Name => 'MoonPhase',\n        Groups => { 2 => 'Time' },\n        PrintConv => {\n            0 => 'New',\n            1 => 'New Crescent',\n            2 => 'First Quarter',\n            3 => 'Waxing Gibbous',\n            4 => 'Full',\n            5 => 'Waning Gibbous',\n            6 => 'Last Quarter',\n            7 => 'Old Crescent',\n        },\n    },\n    0x13 => {\n        Name => 'AmbientTemperatureFahrenheit',\n        Format => 'int16s',\n        PrintConv => '\"$val F\"',\n        PrintConvInv => '$val=~/(-?\\d+)/ ? $1 : $val',\n    },\n    0x14 => {\n        Name => 'AmbientTemperature',\n        Format => 'int16s',\n        PrintConv => '\"$val C\"',\n        PrintConvInv => '$val=~/(-?\\d+)/ ? $1 : $val',\n    },\n    0x15 => {\n        Name => 'SerialNumber',\n        Format => 'undef[30]',\n        RawConv => '$_ = $self->Decode($val, \"UCS2\"); s/\\0.*//; $_',\n        RawConvInv => q{\n            $_ = $self->Encode($val, \"UCS2\");\n            $_ = substr($_, 0, 30) if length($_) > 30;\n            return $_;\n        },\n    },\n    0x24 => 'Contrast', \n    0x25 => 'Brightness', \n    0x26 => 'Sharpness', \n    0x27 => 'Saturation', \n    0x28 => {\n        Name => 'InfraredIlluminator',\n        PrintConv => {\n            0 => 'Off',\n            1 => 'On',\n        },\n    },\n    0x29 => 'MotionSensitivity', \n    0x2a => { \n        Name => 'BatteryVoltage',\n        ValueConv => '$val / 1000',\n        ValueConvInv => '$val * 1000',\n        PrintConv => '\"$val V\"',\n        PrintConvInv => '$val=~s/ ?V$//; $val',\n    },\n    0x2b => {\n        Name => 'UserLabel',\n        Format => 'string[22]', \n    },\n)",
      "file" : "/var/tmp/arv_NClAOb/Image-ExifTool-9.13/lib/Image/ExifTool/Reconyx.pm",
      "package" : "Image::ExifTool::Reconyx"
   }
]
