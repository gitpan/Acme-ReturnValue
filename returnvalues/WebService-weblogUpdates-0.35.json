[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n\n\nuse strict;\npackage WebService::weblogUpdates;\n\n$WebService::weblogUpdates::VERSION = '0.35';\n\nuse Carp;\n\nuse constant HOST    => \"http://rpc.weblogs.com\";\nuse constant RSSHOST => \"http://rssrpc.weblogs.com\";\n\nuse constant PATH  => \"/RPC2\";\nuse constant CLASS => \"weblogUpdates\";\n\nuse constant PING      => \"ping\";\nuse constant RSSUPDATE => \"rssUpdate\";\n\n\nsub new {\n    my $pkg = shift;\n    \n    my $self = {};\n    bless $self;\n\n    $self->init(@_) || return undef;\n    return $self;\n}\n\nsub init {\n    my $self = shift;\n    my $args = { @_ };\n\n    if (! $args->{'transport'}) {\n\tcarp \"You must specify a transport.\";\n\treturn 0;\n    }\n\n    $self->Transport($args->{'transport'},debug=>$args->{'debug'}) \n\t|| return 0;\n\n    return 1;\n}\n\n\nsub ping {\n    my $self = shift;\n    my $args = shift;\n\n    delete $self->{'_message'};\n\n\n    if ((! $args->{name}) || (! $args->{url})) {\n\tcarp \"You must specify both a weblog name and url\";\n\treturn 0;\n    }\n\n    my $meth = undef;\n    my @args = ();\n\n    if ($self->{'__ima'} eq \"Frontier::Client\") {\n\n      $meth = join(\".\",CLASS,PING);\n      @args = (\n\t       $self->_client()->string($args->{name}),\n\t       $self->_client()->string($args->{url}),\n\t      );\n      \n      \n      if (($args->{changesurl}) && ($args->{category})) {\n\tpush (@args,\n\t      $self->_client()->string($args->{changesurl}),\n\t      $self->_client()->string($args->{category}));\n      }\n    }\n    \n    elsif ($self->{'__ima'} eq \"XMLRPC::Lite\") {\n\t$meth = join(\".\",CLASS,PING);\n\t@args = (\n\t\t SOAP::Data->type(string=>$args->{name}),\n\t\t SOAP::Data->type(string=>$args->{url}),\n\t\t );\n\n\tif (($args->{changesurl}) && ($args->{category})) {\n\t  push (@args,\n\t\tSOAP::Data->type(string=>$args->{changesurl}),\n\t\tSOAP::Data->name(string=>$args->{category}));\n\t}\n\n   }\n\n    elsif ($self->{'__ima'} eq \"SOAP::Lite\") {\n\t$meth = PING;\n\t@args = (\n\t\t SOAP::Data->name(weblogname=>$args->{name}),\n\t\t SOAP::Data->name(weblogurl=>$args->{url}),\n\t\t );\n\n\tif (($args->{changesurl}) && ($args->{category})) {\n\t  push (@args,\n\t\tSOAP::Data->name(changesurl=>$args->{changesurl}),\n\t\tSOAP::Data->name(categoryname=>$args->{category}));\n\t}\n\n    }\n\n    elsif ($self->{'__ima'} eq \"LWP::Simple\") {\n      $meth = PING;\n      @args = ($args);\n    }\n\n    if (! $meth) {\n\tcarp \"Unable to determine transport and method.\";\n\treturn 0;\n    }\n\n    my $res = $self->_do($meth,@args)\n\t|| &{ carp \"Returned undef. Not good.\"; return 0; };\n\n    $self->{'_message'} = $res->{message};\n    (! $res->{'flerror'}) ? return 1 : return 0;\n}\n\n\nsub rssUpdate {\n  my $self = shift;\n  my $args = shift;\n\n  delete $self->{'_message'};\n\n  \n  if ((! $args->{name}) || (! $args->{url})) {\n    carp \"You must specify both a weblog name and url\";\n    return 0;\n  }\n  \n  my $meth = undef;\n  my @args = ();\n  \n  if ($self->{'__ima'} eq \"Frontier::Client\") {\n\n    $self->_client()->{'url'} = RSSHOST.PATH;\n    $self->_client()->{'rq'}->url(RSSHOST.PATH);\n\n    $meth = join(\".\",RSSUPDATE);\n    @args = (\n\t     $self->_client()->string($args->{name}),\n\t     $self->_client()->string($args->{url}),\n\t    );\n  }\n  \n  elsif ($self->{'__ima'} eq \"XMLRPC::Lite\") {\n\n    $self->_client()->proxy(RSSHOST.PATH);\n    $meth = join(\".\",RSSUPDATE);\n    @args = (\n\t     SOAP::Data->type(string=>$args->{name}),\n\t     SOAP::Data->type(string=>$args->{url}),\n\t    );\n  }\n  \n  elsif ($self->{'__ima'} eq \"SOAP::Lite\") {\n    carp \"This method will be supported as soon as it is documented by UserLand.\\n\";\n    return 0;\n  }\n  \n  elsif ($self->{'__ima'} eq \"LWP::Simple\") {\n    carp \"This method is not supported for the REST transport.\\n\";\n    return 0;\n  }\n  \n  if (! $meth) {\n    carp \"Unable to determine transport and method.\";\n    return 0;\n  }\n  \n  my $res = $self->_do($meth,@args)\n    || &{ carp \"Returned undef. Not good.\"; return 0; };\n  \n  $self->{'_message'} = $res->{message};\n  (! $res->{'flerror'}) ? return 1 : return 0;\n}\n\n\nsub LastMessage {\n  my $self = shift;\n  (exists($self->{'_message'})) ? return $self->{'_message'} : return undef;\n}\n\n\nsub Transport {\n  my $self      = shift;\n  my $transport = shift;\n  my $args      = { @_ };\n  \n  if (defined $transport) {\n    \n    if (! $transport =~ /^(xmlrpc|soap|rest)$/i) {\n      delete $self->{\"_transport\"};\n      return undef;\n    }\n    \n    $self->{\"_transport\"} = lc $transport;\n    \n    if (! $self->_client(debug=>$args->{'debug'})) {\n      delete $self->{\"_transport\"};\n      return undef;\n    }\n  }\n  \n  return $self->{\"_transport\"};\n}\n\n\nsub ping_message {\n  my $self = shift;\n  return $self->LastMessage();\n}\n\n\nsub _do {\n    my $self = shift;\n    my $meth = shift;\n    my @args = @_;\n\n    if ($self->{'__ima'} eq \"Frontier::Client\") {\n      my $res = undef;\n\n      eval { $res = $self->_client()->call($meth,@args); };\n\n      if ($@) {\n\tcarp $@;\n\treturn 0;\n      }\n      \n      if ($res->{'flerror'}) {\n\t$res->{'flerror'} = $res->{'flerror'}->value();\n      }\n\n      return $res;\n    }\n\n\n    elsif ($self->{'__ima'} =~ /^(SOAP|XMLRPC)::Lite$/){\n\treturn $self->_client()->call($meth,@args)->result();\n    }\n\n    elsif ($self->{'__ima'} eq \"LWP::Simple\") {\n      return $self->_client()->call($meth,@args);\n    }\n\n    else {\n      return {flerror=>1,message=>\"unknown transport\"};\n    }\n}\n\nsub _client {\n    my $self   = shift;\n    my $client = \"_\".$self->Transport();\n    return $self->$client(@_);\n}\n\nsub _xmlrpc {\n  my $self = shift;\n  my $args = { @_ };\n  \n  if (! $self->{\"_xmlrpc\"}) {\n    \n    if (&_require(\"Frontier::Client\")) {\n      $self->{\"_xmlrpc\"} = Frontier::Client->new(url=>HOST.PATH,debug=>$args->{'debug'})\n\t|| &{ carp $!; return 0; };\n    }\n    \n    elsif (&_require(\"XMLRPC::Lite\")) {\n      my $xmlrpc = XMLRPC::Lite->new()\n\t|| &{ carp $!; return 0; };\n\n      &_setup_soaplite($xmlrpc,$args);\n\n\n      $xmlrpc->proxy(HOST.PATH);\n      $self->{\"_xmlrpc\"} = $xmlrpc; \n    }\n    \n    else {\n      return 0;\n    }\n\n    $self->{'__ima'} = ref($self->{\"_xmlrpc\"});\n  }\n\n  return $self->{\"_xmlrpc\"};\n}\n\nsub _soap {\n  my $self = shift;\n  my $args = { @_ };\n  \n  if (! $self->{\"_soap\"}) {\n    \n    my $class = \"SOAP::Lite\";\n    &_require($class) || return 0;\n    \n    if ($SOAP::Lite::VERSION < 0.55) {\n      carp \n\t\"SOAP::Lite version is $SOAP::Lite::VERSION\\n\".\n\t  \"Please upgrade to version 0.55 or higher.\\n\";\n    }\n    \n    carp \n      my $soap = $class->new() ||\n\t&{ carp $!; return 0; };\n    \n    &_setup_soaplite($soap,$args);\n    \n    \n    $soap->proxy(join(\"/\",HOST,CLASS));\n    \n    $soap->on_action(\n\t\t     sub{ \n\t\t       \"\\\"/\".CLASS.\"\\\"\" \n\t\t     }\n\t\t    );\n    \n    $self->{\"_soap\"} = $soap;\n    $self->{'__ima'} = ref($self->{\"_soap\"});\n  }\n  \n  return $self->{\"_soap\"};\n}\n\nsub _setup_soaplite {\n  my $lite = shift;\n  my $args = shift;\n\n  $lite->on_fault(\n\t\t  sub{ \n\t\t    my ($lite,$res) = @_; \n\t\t    carp (ref $res) ? $res->faultstring : $lite->transport->status(); \n\t\t    return 0; \n\t\t  }\n\t\t );\n  \n  if ($args->{'debug'}) {\n    $lite->on_debug(sub { print @_; });\n  }\n}\n\nsub _rest {\n  my $self = shift;\n  my $class = \"LWP::Simple\";\n  &_require($class) || return 0;\n\n  $self->{'__ima'} = $class;\n  return \"REST\";\n}\n\nsub _require {\n    my $class = shift;\n    \n    eval \"require $class\" ||\n\t&{ carp $@; return 0; };\n    \n    return 1;\n}\n\nsub DESTROY {\n    return 1;\n}\n\npackage REST;\nuse constant PINGSITEFORM        => \"http://newhome.weblogs.com/pingSiteForm\";\nuse constant PINGSITEFORMTWOURLS => \"http://newhome.weblogs.com/pingSiteFormTwoUrls\";\n\nmy $html_parser = undef;\n\nsub call {\n  my $pkg  = shift;\n  my $meth = shift;\n  my $args = shift;\n\n  my $ping = undef;\n\n  if ($args->{changesurl}) {\n    $ping = PINGSITEFORMTWOURLS.\"?name=$args->{name}&url=$args->{url}&changesUrl=$args->{changesurl}\";\n  }\n\n  else {\n    $ping = PINGSITEFORM.\"?name=$args->{name}&url=$args->{url}\";\n  }\n\n\n  my $html = LWP::Simple::get($ping);\n\n  if (! $html) {\n    return {flerror=>1,message=>\"Failed to ping: \".LWP::Simple::getprint($ping)};\n  }\n\n\n  eval \"require HTML::Parser\";\n\n  if ($@) {\n    return {flerror=>0,message=>\"Failed to parse HTML, $@\"};\n  }\n\n\n  if (! $html_parser) {\n    $html_parser = HTML::Parser->new(\n\t\t\t\t     start_h       => [\\&start_element, \"self,tagname, attr\"],\n\t\t\t\t     text_h        => [\\&characters,    \"self,text\"],\n\t\t\t\t    );\n    $html_parser->unbroken_text(1);\n  }\n\n  $html_parser->parse($html);\n\n  return {flerror=>0,message=>$html_parser->{__message}};\n}\n\n\nsub start_element {\n  my $parser = shift;\n  my $tag  = shift;\n\n  if ($tag eq \"html\") {\n    $parser->{'__ok'}      = 0;\n    $parser->{'__message'} = undef;\n  }\n}\n\nsub characters {\n  my $parser = shift;\n  my $chars = shift;\n\n  return if (! $chars);\n\n  $chars =~ s/^\\s+//;\n  $chars =~ s/\\s+$//;\n  return if (! $chars);\n\n\n  if ($chars eq \"Enter the name and URL of a weblog that has been updated.\") {\n    $parser->{'__ok'} = 1;\n    return;\n  }\n\n\n  if ($chars =~ /^Name:/) {\n    $parser->{'__ok'} = 0;\n  }\n\n  if ($parser->{'__ok'}) {\n    $chars =~ s/&nbsp;/ /gm;\n    $parser->{__message} .= \" $chars\";\n  }\n\n  return 1;\n}\n\n\nreturn 1;\n\n}",
      "file" : "/var/tmp/arv_HuK6v4/WebService-weblogUpdates-0.35/lib/WebService/weblogUpdates.pm",
      "package" : "WebService::weblogUpdates"
   }
]
