[
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n  package Net::Braintree::AdvancedSearchFields;\n  use Carp;\n  use Moose;\n\n  has \"metaclass\" => (is => 'rw');\n\n  sub field {\n    my ($self, $name, $node) = @_;\n    $self->metaclass->add_attribute($name, is => 'rw', default => $node);\n  }\n\n  sub is {\n    my ($self, $name) = @_;\n    $self->field($name, sub {\n      return Net::Braintree::IsNode->new(searcher => shift, name => $name);\n    });\n  }\n\n  sub equality {\n    my ($self, $name) = @_;\n    $self->field($name, sub {\n      return Net::Braintree::EqualityNode->new(searcher => shift, name => $name);\n    });\n  }\n\n  sub text {\n    my ($self, $name) = @_;\n    $self->field($name, sub {\n      return Net::Braintree::TextNode->new(searcher => shift, name => $name);\n    });\n  }\n\n  sub key_value {\n    my ($self, $name) = @_;\n    $self->field($name, sub {\n      return Net::Braintree::KeyValueNode->new(searcher => shift, name => $name);\n    });\n  }\n\n  sub range {\n    my ($self, $name) = @_;\n    $self->field($name, sub {\n      return Net::Braintree::RangeNode->new(searcher => shift, name => $name);\n    });\n  }\n\n  sub multiple_values {\n    my ($self, $name, @allowed_values) = @_;\n    my $node = sub {\n      return Net::Braintree::MultipleValuesNode->new(\n        searcher => shift,\n        name => $name,\n        allowed_values => @allowed_values ? [@allowed_values] : undef)\n    };\n    $self->field($name, $node);\n  }\n\n  sub partial_match {\n    my ($self, $name) = @_;\n    $self->field($name, sub {\n      return Net::Braintree::PartialMatchNode->new(searcher => shift, name => $name);\n    });\n  }\n\n  1;\n}",
      "file" : "/var/tmp/arv_e19rdy/Net-Braintree-0.11.0/lib/Net/Braintree/AdvancedSearchFields.pm",
      "package" : "Net::Braintree::AdvancedSearchFields"
   },
   {
      "PPI" : "PPI::Statement::Compound",
      "bad" : "{\n  package Net::Braintree::MultipleValuesNode;\n  use Carp;\n  use Moose;\n  use Net::Braintree::Util;\n  extends (\"Net::Braintree::SearchNode\");\n\n  has 'allowed_values' => (is => 'rw');\n\n  sub default_criteria {\n    return [];\n  }\n\n  sub active {\n    my $self = shift;\n    return @{$self->criteria};\n  }\n\n  sub is {\n    shift->in(@_);\n  }\n\n  sub _args_to_array {\n    my $self = shift;\n    my @args;\n    if (ref($_[0]) eq 'ARRAY') {\n      @args = @{$_[0]};\n    } else {\n      @args = @_;\n    }\n    return @args;\n  }\n\n  sub in {\n    my $self = shift;\n    my @values = $self->_args_to_array(@_);\n\n    my $bad_values = difference_arrays(\\@values, $self->allowed_values);\n\n    if (@$bad_values && $self->allowed_values)  {\n      croak \"Invalid Argument(s) for \" . $self->name . \": \" . join(\", \", @$bad_values);\n    }\n\n    push(@{$self->criteria}, @values);\n    return $self->searcher;\n  }\n\n  1;\n}",
      "file" : "/var/tmp/arv_e19rdy/Net-Braintree-0.11.0/lib/Net/Braintree/AdvancedSearchNodes.pm",
      "package" : "Net::Braintree::AdvancedSearchNodes"
   }
]
