[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub cease {\n    my ($self, %args) = @_;\n    $self->_check_params(\\%args, qw/cli/);\n\n    if ( $args{crd} ) {\n        my $d = Time::Piece->new($args{crd}, \"%F\");\n        $args{crd} = $d->strftime(\"%d/%m/%Y\");\n    }\n\n    my %resp = $self->_make_request(\"Wsrequestcancellation\", %args);\n\n    my $result = $resp->{Xml_cancellations}->{A_Result};\n    if ( $result == 11 ) {\n        croak \"No active line found\";\n    } elsif ( $result == 12 || $result == 22 ) {\n        croak \"crd invalid\";\n    } elsif ( $result == 13 ) {\n        croak \"Line is secondary. Cease must be placed on primary line\";\n    } elsif ( $result == 21 ) {\n        croak \"Existing cease order cannot be amended\";\n    }\n        \n        /^1$/   &&  { $result = \n\n    croak \"Cease not possible\" unless $resp->{Xml_cancellations}->{A_Result} == 1;\n    my %rv = ();\n    $rv{status} = $resp->{Xml_cancellations}->{A_Status};\n\n    my $r = Time::Piece->strptime($resp->{Xml_cancellations}->{D_RequestReceived}, \"%d/%m/%Y\");\n    $rv{requested_date} = $r->ymd;\n\n    my $s = Time::Piece->strptime($resp->{Xml_cancellations}->{D_ServiceCease}, \"%d/%m/%Y\");\n    $rv{service_cease} = $s->ymd;\n\n    my $b = Time::Piece->strptime($resp->{Xml_cancellations}->{D_BillingCease}, \"%d/%m/%Y\");\n    $rv{billing_cease} = $b->ymd;\n\n    return %rv;\n}\n\n\nsub request_mac {\n    my ($self, %args) = @_;\n    $self->_check_params(\\%args, qw/cli/);\n\n    my %resp = $self->_make_request(\"Wsrequestmac\", %args);\n\n    my $result = $resp->{Xml_cancellations}->{A_Result};\n    my %rv = ();\n\n    if ( $result == 14 ) {\n        croak \"No active line found\";\n    } elsif ( $result == 15 ) {\n        croak \"MAC not available for this network\";\n    } elsif ( $result == 1 || $result == 11 ) {\n        $rv{mac} = $resp->{Xml_macs}->{A_MAC};\n        my $e = Time::Piece->strptime($resp->{Xml_macs}->{D_Expiry}, \"%d/%m/%Y\");\n        $rv{expiry_date} = $e->ymd;\n    } elsif ( $result == 2 || $result == 12 ) {\n        %rv = ( \"mac_requested\" => 1 );\n    } elsif ( $result == 3 || $result == 13 ) {\n        croak \"MAC Request Failed. Please contact support\";\n    }\n\n    return %rv;\n}\n\n\nsub interleaving {\n    my ($self, %args) = @_;\n    $self->_check_params(\\%args, qw/cli interleave-code snr-code/);\n\n    my %resp = $self->_make_request(\"Wsupdateprofile\", %args);\n\n    my $result = $resp->{Xml_update_profile}->{ResultCode};\n    croak \"Cannot change interleaving\" if $result > 1;\n\n    return 1;\n}\n\n\n\n\nsub terms_and_conditions {\n    return \"XXX Get terms and conditions dynamically, or just put them here\";\n}\n\nsub services_available {\n    my ($self, %args) = @_;\n\n\n    my $ua = new LWP::UserAgent;\n    my $agent = __PACKAGE__ . '/0.1 ';\n    my $url = 'http://checker.cerberusnetworks.co.uk/cgi-bin/externaldslcheck.cgi?pstn='.$args{cli}.'&user='.$self->{dslcheckuser}.'&pass='.$self->{dslcheckpass};\n    my $req = new HTTP::Request 'GET' => $url;\n    my $res = $ua->request($req);\n\n    my ($up, $down, $status, $line_length) = split(/ /, $res->content);\n    $up =~ s/ADSL2PLUS_ANNEXA_UP_ESTIMATE=(.*)/$1/;\n    $down =~ s/ADSL2PLUS_ANNEXA_DOWN_ESTIMATE=(.*)/$1/;\n    $status =~ s/ADSL2PLUS_STATUS=(\\d+)/$1/;\n    $line_length =~ s/BT_LINE_LENGTH=(\\d+)/$1/;\n\n    die \"No service available\" unless $status < 2;\n\n    my $t = Time::Piece->new();\n    $t += ONE_WEEK;\n    while ( is_uk_holiday($t->ymd) || ($t->wday == 1 || $t->wday == 7) ) {\n        $t += ONE_DAY;\n    }\n\n    my %rv = ( qualification => {\n            'first_date' => $t->ymd,\n            '2plus' => $down } );\n    return %rv;    \n}\n\nsub service_view {\n    my ($self, %args) = @_;\n    foreach ( @{$fields{Wsfinddslline}} ) {\n        die \"Provide the $_ parameter\" unless $args{$_};\n    }\n\n\n    my $resp = $self->_make_request(\"Wsfinddslline\", %args);\n\n    return %{$resp->{Xml_DSLLines}};\n}\n\n1\n",
      "file" : "/var/tmp/arv_oDStf5/Net-DSLProvider-0.03/lib/Net/DSLProvider/Cerberus.pm",
      "package" : "Net::DSLProvider::Cerberus"
   }
]
