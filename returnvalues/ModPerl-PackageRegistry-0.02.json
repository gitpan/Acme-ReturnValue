[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub handler {\n    my $r = shift;\n    my $uri = $r->uri;\n    my $config = config($r);\n    my $base = $config->{PackageBase} || '/';\n    my $ns;\n    \n    return DECLINED\n        unless(substr($r->uri, 0, length $base) eq $base);\n            \n    unless($ns = $config->{PackageNamespace}) {\n        $r->log->crit(qq{$uri: PackageNamespace is not defined!});\n        return SERVER_ERROR;\n    }\n            \n    my $path = substr($r->uri, length $base);\n\n    if($path =~ m{[; ]}) {\n        $r->log->error(\"$uri: HACKING ATTEMPT: URI with a space or semicolon in it's name!\");\n        return FORBIDDEN;\n    }\n    \n    $path =~ s{^/}{}g;\n    $path =~ s{\\..+$}{};\n    $path =~ s{/}{::}g;\n        \n    if($path =~ m{::$} || !$path) {\n        if(my $index = $config->{PackageIndex}) {\n            $path .= $index;\n        } else {\n            $r->log->error(\"$uri has no PackageIndex defined\");\n            return NOT_FOUND;\n        }\n    }\n    \n    my $pkg = join('::', $ns, $path);\n\n    my $handler = $config->{PackageHandler} || 'handler';\n    my @argv = ($r);\n    \n    if($handler =~ s{^-\\>}{}) {\n        unshift(@argv, $pkg);\n    }\n    \n    my $func;\n    \n    unless($func = $pkg->can($handler)) {\n        eval \"use $pkg;\";\n        \n        if($@ =~ m{Can't locate .+? in \\@INC}) {\n            $r->log->error(qq{$uri: $@});\n            return NOT_FOUND;\n        } elsif($@) {\n            $r->log->crit(qq{$uri: use \"$pkg\" failed: $@});\n            return SERVER_ERROR;\n        }\n        \n        unless($func = $pkg->can($handler)) {\n            $r->log->crit(\n                qq{$uri: \"$pkg\" does not provide a \"$handler\" function/method.}\n            );\n            return SERVER_ERROR;\n        }\n    }\n    \n    return $func->(@argv);\n}",
      "file" : "/var/tmp/arv_rN_w4V/ModPerl-PackageRegistry-0.02/lib/ModPerl/PackageRegistry.pm",
      "package" : "ModPerl::PackageRegistry"
   }
]
