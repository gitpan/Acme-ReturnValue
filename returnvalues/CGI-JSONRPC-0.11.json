[
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub apache2_read_post {\n    my($self, $r) = @_;\n\n    my $length;\n    unless($length = $r->headers_in->{'Content-Length'}) {\n        $r->log_error(\"No JSONRPC content sent!\");\n        return;\n    }\n    \n    my $buffer = \"\";\n    my $actual = $r->read($buffer, $length);\n    \n    unless($actual == $length) {\n        $r->log_error(\"Expected $length bytes, only got $actual back!\");\n        return;\n    }\n    \n    return $buffer;\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/Apache2/JSONRPC.pm",
      "package" : "Apache2::JSONRPC"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub _have_cookie {\n  my ($self,$r) = @_;\n  if(my $cookie_jar = CGI::Cookie->fetch($r)) {\n       if($cookie_jar->{CGISESSID}) {\n           return $cookie_jar->{CGISESSID}->value;\n       }\n   }\n\n   return;\n\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/Apache2/JSONRPC/Session.pm",
      "package" : "Apache2::JSONRPC::Session"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub handler {\n    my($class, $cgi,@args) = @_;\n    \n    $cgi ||= CGI->new;\n    my $self = $class->new(\n        path        =>  $cgi->url(-absolute => 1, -full => 0, -path_info => 0),\n        path_info   =>  $cgi->path_info(),\n        cgi         =>  $cgi,\n        @args\n    );\n\n    $self->{path_info} =~ s{^/|/$}{}g;\n    $self->{path_info} =~ s{//}{/}g;\n    \n    my $method = $cgi->request_method;\n    \n    if($method eq 'GET' || $method eq 'HEAD') {\n        print $self->headers_js(), $self->return_javascript;\n        return 1;\n    } elsif($method eq 'POST') {\n        my $json = $cgi->param('POSTDATA') or die \"No POST data was sent!\";\n        print $self->headers_json(), $self->run_json_request($json);\n        return 1;\n    } else {\n        die \"Unsupported method: \", $cgi->method;\n    }\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/CGI/JSONRPC.pm",
      "package" : "CGI::JSONRPC"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub jsonrpc_javascript {\n  my $self = shift;\n  return $self->js_class\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/CGI/JSONRPC/Obj.pm",
      "package" : "CGI::JSONRPC::Obj"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub AUTOLOAD {\n  my($class, $id, $to) = splice(@_, 0, 3);\n  (my $method_name = $AUTOLOAD) =~ s{^.*::}{};\n  die \"Can't call a $method_name without a class\\n\" unless $to;\n  $to =~ s{[\\./]}{::}g;\n  die \"$to\\::$method_name may not be dispatched\\n\" if $Protected{$to}{$method_name};\n  my $object = $to->jsonrpc_new($id, $class);\n  if(my $method = $object->can($method_name)) {\n    return $method->($object, @_);\n  } else {\n    die qq{Can't locate object method \"$method_name\" via package \"$to\"\\n};\n  }\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/CGI/JSONRPC/Dispatcher.pm",
      "package" : "CGI::JSONRPC::Dispatcher"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub jsonrpc_javascript {\n  my $self = shift;\n  my $fh;\n  open($fh, '<', $JAVASCRIPT) or die $!;\n  my @rv = <$fh>;\n  if($self->{path}) {\n    push(@rv, \"\\nJSONRPC.URL = '$self->{path}';\\n\");\n  }\n  return join('', @rv);\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/CGI/JSONRPC/Base.pm",
      "package" : "CGI::JSONRPC::Base"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub default_dispatcher {\n    'CGI::JSONRPC::Dispatcher::Session'\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/CGI/JSONRPC/Session.pm",
      "package" : "CGI::JSONRPC::Session"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub AUTOLOAD {\n    my($jsonrpco, $id, $to) = splice(@_, 0, 3);\n    (my $method = $AUTOLOAD) =~ s{^.*::}{};\n    die \"Can't call a method without a package\" unless $to;\n    $to =~ s{\\.}{::}g;\n    my $object = $to->jsonrpc_new($id,$jsonrpco->{session});\n    return unless $object;\n    my $result = $object->$method(@_);\n    $object->_jsonrpc_finish() if $object->can('_jsonrpc_finish');\n    return $result;\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/CGI/JSONRPC/Dispatcher/Session.pm",
      "package" : "CGI::JSONRPC::Dispatcher::Session"
   },
   {
      "PPI" : "PPI::Statement::Sub",
      "bad" : "sub jsonrpc_javascript {\n  my $self = shift;\n  return '';\n}",
      "file" : "/var/tmp/arv_oS9BuC/CGI-JSONRPC-0.11/lib/CGI/JSONRPC/Session/Obj.pm",
      "package" : "CGI::JSONRPC::Session::Obj"
   }
]
